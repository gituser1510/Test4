SET DEFINE OFF;

CREATE TABLE APPLICATION_ERRORS
(
  APP_ERR_ID    NUMBER(10),
  USER_NAME     VARCHAR2(30 BYTE),
  ROLE_NAME     VARCHAR2(30 BYTE),
  APP_ERRORS    VARCHAR2(4000 BYTE),
  APP_ERR_TIME  DATE                            DEFAULT SYSDATE,
  CONSTRAINT APP_ERR_ID
  PRIMARY KEY
  (APP_ERR_ID)
);


CREATE TABLE APP_PATCH_UPDATE_MASTER
(
  PATCH_ID    NUMBER(10),
  SETUP_NO    NUMBER(10),
  PATCH_NO    NUMBER(10),
  COMMENTS    VARCHAR2(4000 BYTE),
  CREATED_ON  DATE                              DEFAULT SYSDATE,
  CREATED_BY  VARCHAR2(40 BYTE),
  CONSTRAINT APUM_PATCH_ID_PK
  PRIMARY KEY
  (PATCH_ID)
);


CREATE TABLE CLASSIFICATION_MASTER
(
  CM_ID       NUMBER(10),
  CLASS_TYPE  CHAR(1 BYTE),
  CLASS_NAME  VARCHAR2(1000 BYTE),
  CONSTRAINT CM_CMID_PK
  PRIMARY KEY
  (CM_ID)
);


CREATE TABLE CLASSIFICATION_SYSNO
(
  CS_ID            NUMBER,
  CM_ID            NUMBER(10),
  SYS_NO           VARCHAR2(10 BYTE),
  SYS_NO_CATEGORY  VARCHAR2(100 BYTE),
  SYS_TEXT         VARCHAR2(100 BYTE),
  CONSTRAINT CS_CSID_PK
  PRIMARY KEY
  (CS_ID),
  CONSTRAINT CS_CM_ID_FK 
  FOREIGN KEY (CM_ID) 
  REFERENCES CLASSIFICATION_MASTER (CM_ID)
);


CREATE TABLE DELIVERY_MASTER
(
  DELIVERY_ID             NUMBER(10),
  DELIVERY_NAME           VARCHAR2(100 BYTE),
  DELIVERY_DATE           DATE,
  DELIVERED_REFS_CNT      NUMBER(8),
  DELIVERED_REACTION_CNT  NUMBER(8),
  MDL_START_NO            NUMBER(8),
  MDL_END_NO              NUMBER(8),
  CREATED_BY              NUMBER(10),
  CREATED_ON              DATE                  DEFAULT SYSDATE,
  CONSTRAINT DM_DELIVERYID_PK
  PRIMARY KEY
  (DELIVERY_ID)
);


CREATE TABLE ERROR_LOG
(
  PKG_NAME      VARCHAR2(32 BYTE),
  PROC_NAME     VARCHAR2(32 BYTE),
  ERR_LINE_NUM  NUMBER,
  ERR_NUM       VARCHAR2(100 BYTE),
  ERR_MSG       VARCHAR2(1000 BYTE),
  ERR_TIME      TIMESTAMP(6)                    DEFAULT SYSTIMESTAMP
);


CREATE TABLE IMPORT_SHIPMENT_REFERENCES
(
  S_NO            NUMBER(10),
  REF_NO          VARCHAR2(100 BYTE),
  SYS_NO          VARCHAR2(100 BYTE),
  SYS_TEXT        VARCHAR2(1000 BYTE),
  GVK_RXN_STATUS  VARCHAR2(10 BYTE)
);


CREATE GLOBAL TEMPORARY TABLE QUEST_SL_TEMP_EXPLAIN1
(
  STATEMENT_ID       VARCHAR2(30 BYTE),
  PLAN_ID            NUMBER,
  TIMESTAMP          DATE,
  REMARKS            VARCHAR2(4000 BYTE),
  OPERATION          VARCHAR2(30 BYTE),
  OPTIONS            VARCHAR2(255 BYTE),
  OBJECT_NODE        VARCHAR2(128 BYTE),
  OBJECT_OWNER       VARCHAR2(30 BYTE),
  OBJECT_NAME        VARCHAR2(30 BYTE),
  OBJECT_ALIAS       VARCHAR2(65 BYTE),
  OBJECT_INSTANCE    INTEGER,
  OBJECT_TYPE        VARCHAR2(30 BYTE),
  OPTIMIZER          VARCHAR2(255 BYTE),
  SEARCH_COLUMNS     NUMBER,
  ID                 INTEGER,
  PARENT_ID          INTEGER,
  DEPTH              INTEGER,
  POSITION           INTEGER,
  COST               INTEGER,
  CARDINALITY        INTEGER,
  BYTES              INTEGER,
  OTHER_TAG          VARCHAR2(255 BYTE),
  PARTITION_START    VARCHAR2(255 BYTE),
  PARTITION_STOP     VARCHAR2(255 BYTE),
  PARTITION_ID       INTEGER,
  OTHER              LONG,
  DISTRIBUTION       VARCHAR2(30 BYTE),
  CPU_COST           INTEGER,
  IO_COST            INTEGER,
  TEMP_SPACE         INTEGER,
  ACCESS_PREDICATES  VARCHAR2(4000 BYTE),
  FILTER_PREDICATES  VARCHAR2(4000 BYTE),
  PROJECTION         VARCHAR2(4000 BYTE),
  TIME               INTEGER,
  QBLOCK_NAME        VARCHAR2(30 BYTE),
  OTHER_XML          CLOB
)
ON COMMIT PRESERVE ROWS
RESULT_CACHE (MODE DEFAULT);


CREATE GLOBAL TEMPORARY TABLE REACTION_REFERENCE_AUTO_TEMP
(
  RRAT_ID                NUMBER(10),
  STARTING_REACTION_ID   NUMBER(10),
  STARTING_REACTION_SNO  NUMBER(5),
  PATH_NO                NUMBER(5),
  RXN_SNO_IN_PATH        NUMBER(5),
  REACTION_ID            NUMBER(10),
  REACTION_SNO           NUMBER(5)
)
ON COMMIT PRESERVE ROWS
RESULT_CACHE (MODE DEFAULT);


CREATE TABLE ROLE_MASTER
(
  ROLE_ID    NUMBER(3)                          NOT NULL,
  ROLE_NAME  VARCHAR2(100 BYTE),
  CONSTRAINT PK_ROLE_MASTER
  PRIMARY KEY
  (ROLE_ID)
);


CREATE TABLE SHIPMENT_MASTER
(
  SHIPMENT_ID              NUMBER(10)           NOT NULL,
  DOC_TYPE                 VARCHAR2(20 BYTE),
  SHIPMENT_NAME            VARCHAR2(100 BYTE),
  DOWNLOADED_DATE          DATE,
  SCH_DELIVERY_DATE        DATE,
  DOWNLOADED_FILENAME      VARCHAR2(250 BYTE),
  TASK_PREPARATION_STATUS  CHAR(1 BYTE)         DEFAULT 'N',
  SHIPMENT_YEAR            NUMBER(4),
  ISSUE                    NUMBER(4),
  REF_COUNT                NUMBER(4),
  CONSTRAINT PK_SHIPMENTS
  PRIMARY KEY
  (SHIPMENT_ID)
);


CREATE TABLE SHIPMENT_REFERENCES
(
  SHIPMENT_REF_ID        NUMBER(10)             NOT NULL,
  REFERENCE_NAME         VARCHAR2(250 BYTE),
  REFERENCE_TYPE         VARCHAR2(20 BYTE),
  TITLE                  VARCHAR2(1000 BYTE),
  DOI                    VARCHAR2(100 BYTE),
  AUTHORS                VARCHAR2(1000 BYTE),
  SYS_TEXT               VARCHAR2(1000 BYTE),
  SYS_NO                 VARCHAR2(100 BYTE),
  SYS_CLASS_TYPE         VARCHAR2(10 BYTE),
  ZERO_REACTIONS_STATUS  CHAR(1 BYTE)           DEFAULT 'N',
  VALIDATION_STATUS      CHAR(1 BYTE)           DEFAULT 'N',
  VALIDATED_BY           NUMBER(10),
  VALIDATED_ON           DATE,
  SHIPMENT_ID            NUMBER(10),
  IS_DELIVERED           CHAR(1 BYTE)           DEFAULT 'N',
  JOURNAL_NAME           VARCHAR2(1000 BYTE),
  JOURNAL_YEAR           NUMBER(4),
  ISSUE                  VARCHAR2(50 BYTE),
  START_PAGE             VARCHAR2(10 BYTE),
  END_PAGE               VARCHAR2(10 BYTE),
  VOLUME                 VARCHAR2(50 BYTE),
  CHECK ("REFERENCE_NAME" IS NOT NULL)
  DISABLE,
  CHECK ("REFERENCE_TYPE" IS NOT NULL)
  DISABLE,
  CONSTRAINT DOC_DOCID_PK
  PRIMARY KEY
  (SHIPMENT_REF_ID)
);


CREATE TABLE SHIPMENT_REFERENCE_FILES
(
  SHIPMENT_FILE_ID            NUMBER(10)        NOT NULL,
  SHIPMENT_REFERENCE_ID       NUMBER(10),
  FILE_NAME                   VARCHAR2(250 BYTE),
  FILE_TYPE                   VARCHAR2(250 BYTE),
  DOWNLOADED_URL              VARCHAR2(1000 BYTE),
  ABSTRACT_SOURCE_FILE_NAMES  VARCHAR2(2000 BYTE),
  CONSTRAINT PK_FAD_FILES
  PRIMARY KEY
  (SHIPMENT_FILE_ID),
  CONSTRAINT SHIPMENT_REFERENCE_FILES_R01 
  FOREIGN KEY (SHIPMENT_REFERENCE_ID) 
  REFERENCES SHIPMENT_REFERENCES (SHIPMENT_REF_ID)
);


CREATE TABLE SOLVENT_AGENTS_MASTER
(
  SOL_AGE_ID    NUMBER(10),
  MOL_FILE      CLOB,
  IUPAC_NAME    VARCHAR2(4000 BYTE),
  INCHI_STRING  VARCHAR2(4000 BYTE),
  INCHI_KEY     VARCHAR2(4000 BYTE),
  OTHER_NAMES   CLOB,
  CONSTRAINT SAM_SOL_AGE_ID_PK
  PRIMARY KEY
  (SOL_AGE_ID)
);


CREATE TABLE SOLVENT_AGENTS_MASTER2
(
  SOL_AGE_ID    NUMBER(10),
  MOL_FILE      CLOB,
  IUPAC_NAME    VARCHAR2(4000 BYTE),
  INCHI_STRING  VARCHAR2(4000 BYTE),
  INCHI_KEY     VARCHAR2(4000 BYTE),
  OTHER_NAMES   CLOB
);


CREATE TABLE TASK_COMMENTS
(
  TASK_COM_ID    NUMBER(10),
  TASK_ID        NUMBER(10),
  TASK_ALLOC_ID  NUMBER(10),
  UR_ID          NUMBER(10),
  USER_COMMENT   VARCHAR2(1000 BYTE),
  IS_LATEST      CHAR(1 BYTE),
  CONSTRAINT TC_TASKCOMID_PK
  PRIMARY KEY
  (TASK_COM_ID)
);


CREATE TABLE TEAM_USERS
(
  TEAM_USER_ID      NUMBER(10),
  MODULE            VARCHAR2(20 BYTE),
  TOOL_MGR_UR_ID    NUMBER(10),
  QUAL_ANLST_UR_ID  NUMBER(10),
  REV_ANLST_UR_ID   NUMBER(10),
  ANLST_UR_ID       NUMBER(10),
  START_DATE        DATE                        DEFAULT sysdate,
  END_DATE          DATE,
  IS_ACTIVE         CHAR(1 BYTE)                DEFAULT 'Y',
  CREATED_BY        NUMBER(10),
  CONSTRAINT TU_TEAMUSERID_PK
  PRIMARY KEY
  (TEAM_USER_ID)
);


CREATE TABLE USER_MASTER
(
  USER_ID        NUMBER(10)                     NOT NULL,
  USER_NAME      VARCHAR2(100 BYTE),
  EMAIL_ID       VARCHAR2(100 BYTE),
  IS_ACTIVE      CHAR(1 BYTE)                   DEFAULT 'Y',
  INACTIVE_DATE  DATE,
  CREATED_DATE   DATE                           DEFAULT sysdate,
  PASSWD         VARCHAR2(100 BYTE),
  IS_LDAP_USER   CHAR(1 BYTE)                   DEFAULT 'Y',
  CONSTRAINT PK_USER_MASTER
  PRIMARY KEY
  (USER_ID)
);


CREATE TABLE USER_ROLES
(
  UR_ID          NUMBER(10)                     NOT NULL,
  USER_ID        NUMBER(10),
  ROLE_ID        NUMBER(10),
  MODULE         VARCHAR2(10 BYTE),
  IS_ACTIVE      CHAR(1 BYTE)                   DEFAULT 'Y',
  INACTIVE_DATE  DATE,
  CREATED_DATE   DATE                           DEFAULT sysdate,
  CONSTRAINT PK_USER_ROLES
  PRIMARY KEY
  (UR_ID),
  CONSTRAINT UR_ROLEID_FK 
  FOREIGN KEY (ROLE_ID) 
  REFERENCES ROLE_MASTER (ROLE_ID),
  CONSTRAINT UR_USERID_FK 
  FOREIGN KEY (USER_ID) 
  REFERENCES USER_MASTER (USER_ID)
);

















CREATE INDEX SRF_SHPREFID_INDX ON SHIPMENT_REFERENCE_FILES
(SHIPMENT_REFERENCE_ID);


CREATE INDEX SR_SHIPMENTID_INDX ON SHIPMENT_REFERENCES
(SHIPMENT_ID);


CREATE INDEX TC_TASKALLOCID_INDX ON TASK_COMMENTS
(TASK_ALLOC_ID);




CREATE INDEX TC_TASKID_INDX ON TASK_COMMENTS
(TASK_ID);




CREATE INDEX UR_USERID_INDX ON USER_ROLES
(USER_ID);


CREATE TABLE APP_PATCH_UPDATE_FILES
(
  PATCH_FILE_ID  NUMBER(10),
  PATCH_ID       NUMBER(10),
  FILE_NAME      VARCHAR2(100 BYTE),
  FILE_VERSION   VARCHAR2(40 BYTE),
  FILE_PATH      VARCHAR2(4000 BYTE),
  CONSTRAINT APUF_PATCH_FILEID_PK
  PRIMARY KEY
  (PATCH_FILE_ID),
  CONSTRAINT APUF_PATCH_ID_FK 
  FOREIGN KEY (PATCH_ID) 
  REFERENCES APP_PATCH_UPDATE_MASTER (PATCH_ID)
);


CREATE TABLE DELIVERY_REFERENCES
(
  DR_ID            NUMBER(10),
  DELIVERY_ID      NUMBER(10),
  SHIPMENT_REF_ID  NUMBER(10),
  MDL_START_NO     NUMBER(8),
  MDL_END_NO       NUMBER(8),
  CONSTRAINT DR_DRID_PK
  PRIMARY KEY
  (DR_ID),
  CONSTRAINT DR_DELIVERYID_FK 
  FOREIGN KEY (DELIVERY_ID) 
  REFERENCES DELIVERY_MASTER (DELIVERY_ID),
  CONSTRAINT DR_SHPREFID_FK 
  FOREIGN KEY (SHIPMENT_REF_ID) 
  REFERENCES SHIPMENT_REFERENCES (SHIPMENT_REF_ID)
);


CREATE TABLE DELIVERY_SOL_CATS
(
  DSC_ID           NUMBER(10),
  DELIVERY_ID      NUMBER(10),
  SHIPMENT_REF_ID  NUMBER(10),
  MOL_NAME         VARCHAR2(250 BYTE),
  MOL_FILE         CLOB,
  MOL_INCHI_KEY    VARCHAR2(100 BYTE),
  CONSTRAINT DSC_DSCID_PK
  PRIMARY KEY
  (DSC_ID),
  CONSTRAINT DSC_DELIVERYID_FK 
  FOREIGN KEY (DELIVERY_ID) 
  REFERENCES DELIVERY_MASTER (DELIVERY_ID),
  CONSTRAINT DSC_SHPREFID_FK 
  FOREIGN KEY (SHIPMENT_REF_ID) 
  REFERENCES SHIPMENT_REFERENCES (SHIPMENT_REF_ID)
);


CREATE TABLE REACTIONS
(
  REACTION_ID       NUMBER(10)                  NOT NULL,
  DOC_ID            NUMBER(10),
  REACTION_SCHEME   CLOB,
  REACTION_SNO      NUMBER(10),
  RXN_COMMENTS      VARCHAR2(1000 BYTE),
  RXN_MAPPING_TYPE  VARCHAR2(100 BYTE),
  CREATED_BY        NUMBER(10),
  CREATED_ON        TIMESTAMP(6)                DEFAULT SYSTIMESTAMP,
  MODIFIED_BY       NUMBER(10),
  MODIFIED_ON       TIMESTAMP(6),
  CURATED_BY        NUMBER(10),
  CURATED_ON        TIMESTAMP(6),
  REVIEWED_BY       NUMBER(10),
  REVIEWED_ON       TIMESTAMP(6),
  QC_BY             NUMBER(10),
  QC_ON             TIMESTAMP(6),
  IS_IMPORTANT      CHAR(1 BYTE)                DEFAULT 'N',
  CONSTRAINT PK_REACTIONS
  PRIMARY KEY
  (REACTION_ID),
  CONSTRAINT RXN_DOCID_FK 
  FOREIGN KEY (DOC_ID) 
  REFERENCES SHIPMENT_REFERENCES (SHIPMENT_REF_ID)
);


CREATE TABLE REACTION_REFERENCE
(
  RR_ID        NUMBER(10)                       NOT NULL,
  REACTION_ID  NUMBER(10),
  EXT_REG_NO   NUMBER(5),
  RR_PATH      VARCHAR2(10 BYTE),
  STEP         VARCHAR2(20 BYTE),
  CONSTRAINT PK_REACTION_REFERENCE
  PRIMARY KEY
  (RR_ID),
  CONSTRAINT RR_REACTIONID_FK 
  FOREIGN KEY (REACTION_ID) 
  REFERENCES REACTIONS (REACTION_ID)
);


CREATE TABLE REACTION_STEPS
(
  RXN_STEP_ID   NUMBER(10)                      NOT NULL,
  REACTION_ID   NUMBER(10),
  RXN_STEP_SNO  NUMBER(3),
  YIELD         VARCHAR2(50 BYTE),
  CONSTRAINT PK_CROSS_REFERENCES_0
  PRIMARY KEY
  (RXN_STEP_ID),
  CONSTRAINT RS_RACTIONID_FK 
  FOREIGN KEY (REACTION_ID) 
  REFERENCES REACTIONS (REACTION_ID)
);


CREATE TABLE TASK_MASTER
(
  TASK_ID          NUMBER(10),
  SHIPMENT_ID      NUMBER(10),
  MODULE           VARCHAR2(4 BYTE),
  SHIPMENT_REF_ID  NUMBER(10),
  TOOL_MGR_UR_ID   NUMBER(10),
  START_DATE       DATE,
  END_DATE         DATE,
  CREATED_DATE     DATE                         DEFAULT sysdate,
  TEAM_USER_ID     NUMBER(10),
  TASK_STATUS      VARCHAR2(50 BYTE),
  CONSTRAINT TM_TASKID_PK
  PRIMARY KEY
  (TASK_ID),
  CONSTRAINT TM_DOCID_FK 
  FOREIGN KEY (SHIPMENT_REF_ID) 
  REFERENCES SHIPMENT_REFERENCES (SHIPMENT_REF_ID),
  CONSTRAINT TM_SHIPMENTID_FK 
  FOREIGN KEY (SHIPMENT_ID) 
  REFERENCES SHIPMENT_MASTER (SHIPMENT_ID),
  CONSTRAINT TM_TMURID_FK 
  FOREIGN KEY (TOOL_MGR_UR_ID) 
  REFERENCES USER_ROLES (UR_ID)
);




CREATE INDEX DR_DELIVERYID_INDX ON DELIVERY_REFERENCES
(DELIVERY_ID);












CREATE INDEX RS_REACTIONID_INDX ON REACTION_STEPS
(REACTION_ID);


CREATE INDEX RXN_CURATEDBY_INDX ON REACTIONS
(CURATED_BY);


CREATE INDEX RXN_DOCID_INDX ON REACTIONS
(DOC_ID);


CREATE INDEX TM_SHIPMENTID_INDX ON TASK_MASTER
(SHIPMENT_ID);


CREATE INDEX TM_SHPTREFID_INDX ON TASK_MASTER
(SHIPMENT_REF_ID);




CREATE TABLE CONDITIONS
(
  CONDITION_ID      NUMBER(10)                  NOT NULL,
  RXN_STEP_ID       NUMBER(10),
  COND_TIME         VARCHAR2(20 BYTE),
  TEMPERATURE       VARCHAR2(20 BYTE),
  PRESSURE          VARCHAR2(20 BYTE),
  PH                VARCHAR2(10 BYTE),
  IS_WARMUP         CHAR(1 BYTE),
  IS_COOL_DOWN      CHAR(1 BYTE),
  IS_REFLUX         CHAR(1 BYTE),
  OTHER_CONDITIONS  VARCHAR2(500 BYTE),
  OPERATION         VARCHAR2(500 BYTE),
  COND_TIME_UNIT    VARCHAR2(20 BYTE),
  TEMPERATURE_UNIT  VARCHAR2(20 BYTE),
  PRESSURE_UNIT     VARCHAR2(20 BYTE),
  CONSTRAINT PK_CONDITIONS
  PRIMARY KEY
  (CONDITION_ID),
  CONSTRAINT CDT_RXNSTEPID_FK 
  FOREIGN KEY (RXN_STEP_ID) 
  REFERENCES REACTION_STEPS (RXN_STEP_ID)
);


CREATE TABLE CROSS_REFERENCES
(
  CR_ID         NUMBER(10)                      NOT NULL,
  REACTION_ID   NUMBER(10),
  PRE_RXN_SNO   NUMBER(3),
  SUCC_RXN_SNO  NUMBER(3),
  CONSTRAINT PK_CROSS_REFERENCES
  PRIMARY KEY
  (CR_ID),
  CONSTRAINT CR_REACTIONID_FK 
  FOREIGN KEY (REACTION_ID) 
  REFERENCES REACTIONS (REACTION_ID)
);


CREATE TABLE PARTICIPANTS
(
  PRPNT_ID         NUMBER(10)                   NOT NULL,
  RXN_STEP_ID      NUMBER(10),
  PRPNT_TYPE       VARCHAR2(10 BYTE),
  PRPNT_STRUCTURE  CLOB,
  INCHI_KEY        VARCHAR2(27 BYTE),
  PRPNT_NAME       VARCHAR2(250 BYTE),
  STRUCTURE_NO     VARCHAR2(50 BYTE),
  GRADE            VARCHAR2(50 BYTE),
  CONSTRAINT PK_PARTICIPANTS
  PRIMARY KEY
  (PRPNT_ID),
  CONSTRAINT PTP_RXNSTEPID_FK 
  FOREIGN KEY (RXN_STEP_ID) 
  REFERENCES REACTION_STEPS (RXN_STEP_ID)
);


CREATE TABLE PRODUCTS
(
  PRODUCT_ID             NUMBER(10)             NOT NULL,
  REACTION_ID            NUMBER(10),
  PROD_STRUCTURE         CLOB,
  INCHI_KEY              VARCHAR2(27 BYTE),
  PRODUCT_NAME           VARCHAR2(1000 BYTE),
  STRUCTURE_NO           VARCHAR2(10 BYTE),
  YIELD                  VARCHAR2(50 BYTE),
  CHEMO_SELECTIVITY      VARCHAR2(50 BYTE),
  DIASTEREO_SELECTIVITY  VARCHAR2(50 BYTE),
  DIASTEREOMERIC_EXCESS  VARCHAR2(50 BYTE),
  ENANTIOMERIC_EXCESS    VARCHAR2(50 BYTE),
  GRADE                  VARCHAR2(50 BYTE),
  CONSTRAINT PK_PRODUCTS
  PRIMARY KEY
  (PRODUCT_ID),
  CONSTRAINT PROD_REACTIONID_FK 
  FOREIGN KEY (REACTION_ID) 
  REFERENCES REACTIONS (REACTION_ID)
);


CREATE TABLE TASK_ALLOCATION
(
  TASK_ALLOC_ID      NUMBER(10),
  TASK_ID            NUMBER(10),
  UR_ID              NUMBER(10),
  START_DATE         DATE,
  END_DATE           DATE,
  ALLOCATION_STATUS  VARCHAR2(10 BYTE),
  IS_ACTIVE          CHAR(1 BYTE)               DEFAULT 'Y',
  ALLOCATION_TYPE    VARCHAR2(10 BYTE),
  IS_REASSIGNED      CHAR(1 BYTE)               DEFAULT 'N',
  IS_REJECTED        CHAR(1 BYTE)               DEFAULT 'N',
  CREATED_BY         NUMBER(10),
  CREATED_ON         DATE                       DEFAULT SYSDATE,
  CONSTRAINT TA_TAID_PK
  PRIMARY KEY
  (TASK_ALLOC_ID),
  CONSTRAINT TA_TASKID_FK 
  FOREIGN KEY (TASK_ID) 
  REFERENCES TASK_MASTER (TASK_ID),
  CONSTRAINT TA_URID_FK 
  FOREIGN KEY (UR_ID) 
  REFERENCES USER_ROLES (UR_ID)
);


CREATE INDEX CDT_RXNSTRPID_INDX ON CONDITIONS
(RXN_STEP_ID);










CREATE INDEX PR_REACTIONID_INDX ON PRODUCTS
(REACTION_ID);


CREATE INDEX PTP_RXNSTEPID_INDX ON PARTICIPANTS
(RXN_STEP_ID);




CREATE INDEX TA_TASKID_INDX ON TASK_ALLOCATION
(TASK_ID);


CREATE INDEX TA_URID_INDX ON TASK_ALLOCATION
(UR_ID);


CREATE SEQUENCE APP_ERR_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE CM_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE CONDITION_ID_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE CR_ID_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE CS_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE DELIVERY_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE DOC_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE DR_ID_SEQ
  START WITH 0
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE DSC_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE PRODUCT_ID_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE PRPNT_ID_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE REACTION_ID_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE RR_ID_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE RXN_STEP_ID_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE SHIPMENT_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE SHIPMENT_REF_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE SOL_AGE_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE ST_FILE_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE ST_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE TASK_ALLOC_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE TASK_COM_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE TASK_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE TEAM_USER_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE TU_ID_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE UR_ID_SEQ
  START WITH 4
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE USER_ID_SEQ
  START WITH 2
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;



CREATE OR REPLACE TYPE "INTEGER_NTT"
AS TABLE OF integer;
/

CREATE OR REPLACE TYPE "NUMBER_NTT"
IS TABLE OF NUMBER;
/

CREATE OR REPLACE TYPE "VARCHAR2_NTT"
AS TABLE OF VARCHAR2(4000);
/


/* Formatted on 04/25/16 3:53:40 PM (QP5 v5.256.13226.35538) */
CREATE OR REPLACE FORCE VIEW TASK_MASTER_ALLOC_DETAILS_V
(
   TASK_ID,
   SHIPMENT_ID,
   TASK_STATUS,
   TASK_ALLOC_ID,
   UR_ID,
   TA_START_DATE,
   TA_END_DATE,
   ALLOCATION_STATUS,
   TA_IS_ACTIVE,
   ALLOCATION_TYPE,
   IS_REASSIGNED,
   IS_REJECTED
)
AS
   SELECT TM.TASK_ID,
          TM.SHIPMENT_ID,
          TM.TASK_STATUS,
          TA.TASK_ALLOC_ID,
          TA.UR_ID,
          TA.START_DATE TA_START_DATE,
          TA.END_DATE TA_END_DATE,
          TA.ALLOCATION_STATUS,
          TA.IS_ACTIVE TA_IS_ACTIVE,
          TA.ALLOCATION_TYPE,
          TA.IS_REASSIGNED,
          TA.IS_REJECTED
     FROM TASK_MASTER TM
          INNER JOIN TASK_ALLOCATION TA ON (TA.TASK_ID = TM.TASK_ID);


/* Formatted on 04/25/16 3:53:41 PM (QP5 v5.256.13226.35538) */
CREATE OR REPLACE FORCE VIEW USER_ROLE_DETAILS
(
   UR_ID,
   ROLE_ID,
   ROLE_NAME,
   USER_ID,
   USER_NAME,
   EMAIL_ID,
   IS_ACTIVE,
   INACTIVE_DATE,
   CREATED_DATE
)
AS
   SELECT UR_ID,
          UR.ROLE_ID,
          ROLE_NAME,
          UM."USER_ID",
          UM."USER_NAME",
          UM."EMAIL_ID",
          UM."IS_ACTIVE",
          UM."INACTIVE_DATE",
          UM."CREATED_DATE"
     FROM USER_ROLES UR, ROLE_MASTER RM, USER_MASTER UM
    WHERE UR.ROLE_ID = RM.ROLE_ID AND UM.USER_ID = UR.USER_ID;


/* Formatted on 04/25/16 3:53:41 PM (QP5 v5.256.13226.35538) */
CREATE OR REPLACE FORCE VIEW USER_ROLE_DETAILS_V
(
   MODULE,
   UR_ID,
   USER_ID,
   EMAIL_ID,
   USER_NAME,
   ROLE_ID,
   ROLE_NAME,
   IS_ACTIVE
)
AS
   SELECT UR.MODULE,
          UR.UR_ID,
          UR.USER_ID,
          UM.EMAIL_ID,
          UM.USER_NAME,
          UR.ROLE_ID,
          RM.ROLE_NAME,
          UR.IS_ACTIVE
     FROM USER_ROLES UR
          INNER JOIN ROLE_MASTER RM ON (UR.ROLE_ID = RM.ROLE_ID)
          INNER JOIN USER_MASTER UM ON (UM.USER_ID = UR.USER_ID);


/* Formatted on 04/25/16 3:53:41 PM (QP5 v5.256.13226.35538) */
CREATE OR REPLACE FORCE VIEW ACT_TASK_ALLOC_USER_DET_V
(
   UR_ID,
   USER_ID,
   USER_NAME,
   ROLE_ID,
   ROLE_NAME,
   IS_ACTIVE,
   TASK_ALLOC_ID,
   TASK_ID,
   START_DATE,
   END_DATE,
   ALLOCATION_STATUS,
   IS_ACTIVE_TA,
   ALLOCATION_TYPE,
   IS_REASSIGNED,
   IS_REJECTED
)
AS
   SELECT UR."UR_ID",
          UR."USER_ID",
          UR."USER_NAME",
          UR."ROLE_ID",
          UR."ROLE_NAME",
          UR."IS_ACTIVE",
          TA.TASK_ALLOC_ID,
          TA.TASK_ID,
          TA.START_DATE,
          TA.END_DATE,
          TA.ALLOCATION_STATUS,
          TA.IS_ACTIVE IS_ACTIVE_TA,
          TA.ALLOCATION_TYPE,
          TA.IS_REASSIGNED,
          TA.IS_REJECTED
     FROM USER_ROLE_DETAILS_V UR
          INNER JOIN TASK_ALLOCATION TA ON (TA.UR_ID = UR.UR_ID)
    WHERE TA.IS_ACTIVE = 'Y';


/* Formatted on 04/25/16 3:53:41 PM (QP5 v5.256.13226.35538) */
CREATE OR REPLACE FORCE VIEW TASK_ALLOC_USER_DETAILS_V
(
   TASK_ID,
   SHIPMENT_ID,
   TASK_STATUS,
   TASK_ALLOC_ID,
   UR_ID,
   TA_START_DATE,
   TA_END_DATE,
   ALLOCATION_STATUS,
   TA_IS_ACTIVE,
   ALLOCATION_TYPE,
   IS_REASSIGNED,
   IS_REJECTED,
   USER_ID,
   USER_NAME,
   ROLE_ID,
   ROLE_NAME,
   UR_IS_ACTIVE,
   MODULE
)
AS
   SELECT TM.TASK_ID,
          TM.SHIPMENT_ID,
          TM.TASK_STATUS,
          TA.TASK_ALLOC_ID,
          TA.UR_ID,
          TA.START_DATE TA_START_DATE,
          TA.END_DATE TA_END_DATE,
          TA.ALLOCATION_STATUS,
          TA.IS_ACTIVE TA_IS_ACTIVE,
          TA.ALLOCATION_TYPE,
          TA.IS_REASSIGNED,
          TA.IS_REJECTED,
          UR.USER_ID,
          UR.USER_NAME,
          UR.ROLE_ID,
          UR.ROLE_NAME,
          UR.IS_ACTIVE UR_IS_ACTIVE,
          TM.MODULE
     FROM TASK_MASTER TM
          INNER JOIN TASK_ALLOCATION TA ON (TA.TASK_ID = TM.TASK_ID)
          INNER JOIN USER_ROLE_DETAILS_V UR ON (UR.UR_ID = TA.UR_ID);


/* Formatted on 04/25/16 3:53:41 PM (QP5 v5.256.13226.35538) */
CREATE OR REPLACE FORCE VIEW TEAM_USER_DETAILS_V
(
   TEAM_USER_ID,
   MODULE,
   TOOL_MGR_UR_ID,
   TOOL_MGR_NAME,
   QUAL_ANLST_UR_ID,
   QUAL_ANLST_NAME,
   REV_ANLST_UR_ID,
   REV_ANLST_NAME,
   ANLST_UR_ID,
   ANLST_NAME,
   START_DATE,
   END_DATE,
   IS_ACTIVE
)
AS
   SELECT TU.TEAM_USER_ID,
          TU.MODULE,
          TU.TOOL_MGR_UR_ID,
          UTM.USER_NAME TOOL_MGR_NAME,
          TU.QUAL_ANLST_UR_ID,
          UQA.USER_NAME QUAL_ANLST_NAME,
          TU.REV_ANLST_UR_ID,
          URA.USER_NAME REV_ANLST_NAME,
          TU.ANLST_UR_ID,
          UA.USER_NAME ANLST_NAME,
          TU.START_DATE,
          TU.END_DATE,
          TU.IS_ACTIVE
     FROM TEAM_USERS TU
          INNER JOIN USER_ROLE_DETAILS_V UTM
             ON (UTM.UR_ID = TU.TOOL_MGR_UR_ID)
          LEFT OUTER JOIN USER_ROLE_DETAILS_V UQA
             ON (UQA.UR_ID = TU.QUAL_ANLST_UR_ID)
          LEFT OUTER JOIN USER_ROLE_DETAILS_V URA
             ON (URA.UR_ID = TU.REV_ANLST_UR_ID)
          INNER JOIN USER_ROLE_DETAILS_V UA ON (UA.UR_ID = TU.ANLST_UR_ID);


CREATE OR REPLACE FUNCTION                 NTT_TO_VARCHAR2
                    (
                        PINTT_NT        IN          VARCHAR2_NTT,
                        PIC_DELIMITER   IN          VARCHAR2 DEFAULT ';',
                        PIC_DISTINCT    IN          VARCHAR2 DEFAULT 'NO',
                        PIC_ORDER       IN          VARCHAR2 DEFAULT 'NO'
                    ) RETURN VARCHAR2 IS

V_IDX       PLS_INTEGER;
V_STR       VARCHAR2(32767);
V_DLM       VARCHAR2(10);

BEGIN

    IF PIC_DISTINCT = 'NO' AND PIC_ORDER = 'NO' THEN
        FOR I IN (SELECT * FROM TABLE(PINTT_NT))
        LOOP
            V_STR := V_STR || V_DLM || I.COLUMN_VALUE;
            V_DLM := PIC_DELIMITER;
        END LOOP;
    ELSIF PIC_DISTINCT = 'YES' AND PIC_ORDER = 'YES' THEN
        FOR I IN (SELECT DISTINCT * FROM TABLE(PINTT_NT) ORDER BY 1)
        LOOP
            V_STR := V_STR || V_DLM || I.COLUMN_VALUE;
            V_DLM := PIC_DELIMITER;
        END LOOP;
    ELSIF PIC_DISTINCT = 'YES' AND PIC_ORDER = 'NO' THEN
        FOR I IN (SELECT DISTINCT * FROM TABLE(PINTT_NT))
        LOOP
            V_STR := V_STR || V_DLM || I.COLUMN_VALUE;
            V_DLM := PIC_DELIMITER;
        END LOOP;
    ELSE
        FOR I IN (SELECT * FROM TABLE(PINTT_NT) ORDER BY 1)
        LOOP
            V_STR := V_STR || V_DLM || I.COLUMN_VALUE;
            V_DLM := PIC_DELIMITER;
        END LOOP;
    END IF;

    RETURN V_STR;
END NTT_TO_VARCHAR2;
 
/


CREATE OR REPLACE PACKAGE                  COMMON AS

TYPE PLST_CHAR IS TABLE OF VARCHAR2(32767 BYTE) INDEX BY PLS_INTEGER;
TYPE PLST_NCHAR IS TABLE OF NVARCHAR2(32767) INDEX BY PLS_INTEGER;
TYPE PLST_NUM IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
TYPE PLST_DATE IS TABLE OF DATE INDEX BY PLS_INTEGER;

TYPE REF_CUR IS REF CURSOR;    

PROCEDURE LOG_ERROR(PIC_PKG_NAME        IN VARCHAR2, 
                    PIC_PROC_NAME       IN VARCHAR2,
                    PIN_ERR_LINE_NUM    IN NUMBER,
                    PIC_ERR_NUM         IN VARCHAR2,
                    PIC_ERR_MSG         IN VARCHAR2
                    );

PROCEDURE POPULATE_GTT_FROM_LIST(PIC_IDS            IN  VARCHAR2,
                                 PIC_DELIMITER      IN  CHAR,
                                 PIC_ID_TYPE        IN  CHAR DEFAULT 'NUM',
                                 PIC_GTT_NAME       OUT VARCHAR2--,    
                                 --REF_CUR_IDS_VALUES OUT COMMON.REF_CUR
                                );   

PROCEDURE SPLIT2ARRAY(PIC_CONCAT_STRING IN    VARCHAR2, 
                      PIC_DELIMITER     IN    CHAR, 
                      POAC_TOKENS       OUT   COMMON.PLST_CHAR); 

PROCEDURE INSERT_APP_ERRORS
    (
        PIC_USER_NAME                   IN              VARCHAR2,
        PIC_ROLE_NAME                   IN              VARCHAR2,
        PIC_APP_ERRORS                  IN              VARCHAR2
    );
END COMMON;
 
/
CREATE OR REPLACE PACKAGE BODY                  COMMON AS

PROCEDURE LOG_ERROR(PIC_PKG_NAME        IN VARCHAR2, 
                    PIC_PROC_NAME       IN VARCHAR2,
                    PIN_ERR_LINE_NUM    IN NUMBER,
                    PIC_ERR_NUM         IN VARCHAR2,
                    PIC_ERR_MSG         IN VARCHAR2
                    ) AS

/* Mke sure that following Table is pre-created.
    CREATE TABLE ERROR_LOG 
    (
    PKG_NAME        VARCHAR2(32BYTE),
    PROC_NAME       VARCHAR2(32BYTE),
    ERR_LINE_NUM    NUMBER,
    ERR_NUM         VARCHAR2(100BYTE),
    ERR_MSG         VARCHAR2(100BYTE),
    ERR_TIME        TIMESTAMP DEFAULT SYSTIMESTAMP
    );

*/
PRAGMA AUTONOMOUS_TRANSACTION;

BEGIN
    
    INSERT INTO ERROR_LOG(PKG_NAME, PROC_NAME, ERR_LINE_NUM, ERR_NUM, ERR_MSG) 
                   VALUES(PIC_PKG_NAME, PIC_PROC_NAME, PIN_ERR_LINE_NUM, PIC_ERR_NUM, PIC_ERR_MSG);
    
    COMMIT;
    
EXCEPTION 
WHEN OTHERS THEN
    RAISE;

END;                    

 PROCEDURE POPULATE_GTT_FROM_LIST(PIC_IDS            IN  VARCHAR2,
                                  PIC_DELIMITER      IN  CHAR,
                                  PIC_ID_TYPE        IN  CHAR DEFAULT 'NUM',
                                  PIC_GTT_NAME       OUT VARCHAR2--,    
                                  --REF_CUR_IDS_VALUES OUT COMMON.REF_CUR
                                 ) AS   
 /* Ensure that the following tables are pre-created
    CREATE GLOBAL TEMPORARY TABLE GTT_IDS (ID   NUMBER) ON COMMIT PRESERVE ROWS;
    CREATE GLOBAL TEMPORARY TABLE GTT_VALUES (VAL   VARCHAR2(4000BYTE)) 
    ON COMMIT PRESERVE ROWS;
 */
 LN_ERR_LINE        NUMBER;
 
 LN_TOT_VALUES      NUMBER;
 LC_ALL_VALUES      VARCHAR2(32767BYTE);
 LC_SINGLE_VAL      VARCHAR2(100BYTE);
 
 LC_GTT_START_STR   VARCHAR2(1000BYTE);
 LC_GTT_END_STR     VARCHAR2(1000BYTE); 
 
 
 LRC_IDS_VALUES     COMMON.REF_CUR;
 
 BEGIN
 
    LN_ERR_LINE := 10;
    IF UPPER(TRIM(PIC_ID_TYPE)) LIKE '%N%' THEN   
        
        PIC_GTT_NAME := 'GTT_IDS';
        LC_GTT_START_STR := 'GTT_IDS VALUES(TO_NUMBER(TRIM(';
        LC_GTT_END_STR := ')))';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE GTT_IDS';
        
    ELSE   
    
        PIC_GTT_NAME := 'GTT_VALUES';
        LC_GTT_START_STR := 'GTT_VALUES VALUES(';
        LC_GTT_END_STR := ')';
        EXECUTE IMMEDIATE 'TRUNCATE TABLE GTT_VALUES';
    
    END IF;
    
    LN_ERR_LINE := 10; 
    LC_ALL_VALUES := PIC_IDS || PIC_DELIMITER;
    
    LN_TOT_VALUES := LENGTH(LC_ALL_VALUES) - LENGTH(REPLACE(LC_ALL_VALUES, PIC_DELIMITER, NULL));
    
    LN_ERR_LINE := 20; 
    FOR I IN 1..LN_TOT_VALUES
    LOOP
    
        LN_ERR_LINE := 30;
        LC_SINGLE_VAL := SUBSTR(LC_ALL_VALUES, 1, INSTR(LC_ALL_VALUES, PIC_DELIMITER, 1, 1) - 1);
        
        LN_ERR_LINE := 40;
        LC_ALL_VALUES := SUBSTR(LC_ALL_VALUES, INSTR(LC_ALL_VALUES, PIC_DELIMITER, 1, 1) + 1);
        
        LN_ERR_LINE := 50;
        EXECUTE IMMEDIATE 'INSERT INTO ' || LC_GTT_START_STR || LC_SINGLE_VAL || LC_GTT_END_STR;
        
        LN_ERR_LINE := 60;
        IF MOD(I, 10000) = 0 THEN
            COMMIT;
        END IF;
        
    END LOOP;
    
    LN_ERR_LINE := 70;
    COMMIT;
 
    /*For Testing
    IF UPPER(TRIM(PIC_ID_TYPE)) LIKE '%N%' THEN   
        
        OPEN LRC_IDS_VALUES FOR SELECT * FROM GTT_IDS;
        
    ELSE   
    
        OPEN LRC_IDS_VALUES FOR SELECT * FROM GTT_VALUES;
    
    END IF;
    
    REF_CUR_IDS_VALUES := LRC_IDS_VALUES;
    For Testing*/
    
 EXCEPTION
 WHEN OTHERS THEN
    COMMON.LOG_ERROR('COMMON', 'POPULATE_GTT_FROM_LIST', LN_ERR_LINE, SQLCODE, SQLERRM);
 
 END;
 
PROCEDURE SPLIT2ARRAY(PIC_CONCAT_STRING IN    VARCHAR2, 
                      PIC_DELIMITER     IN    CHAR, 
                      POAC_TOKENS       OUT   COMMON.PLST_CHAR) AS

LN_ERR_LINE        NUMBER;

LC_CON_STR  VARCHAR2(4000);
LN_FIRST    NUMBER;
LN_SECOND   NUMBER;
LC_TOKEN    VARCHAR2(4000);
LN_TOKEN_CNT NUMBER := 0;

BEGIN
    
    LN_ERR_LINE := 10;
    LC_CON_STR := PIC_DELIMITER || PIC_CONCAT_STRING || PIC_DELIMITER;
    LN_FIRST := 1;
        
    LN_ERR_LINE := 20;
    LOOP
        
        LN_ERR_LINE := 30;
        LN_SECOND := INSTR(LC_CON_STR, PIC_DELIMITER, LN_FIRST + 1 );
        
        LN_ERR_LINE := 40;
        LC_TOKEN := SUBSTR(LC_CON_STR, LN_FIRST + 1, LN_SECOND - LN_FIRST - 1);
        
        LN_ERR_LINE := 50;
        LN_FIRST := LN_SECOND;
        
        LN_ERR_LINE := 60;
        LN_TOKEN_CNT := LN_TOKEN_CNT + 1;
        
        LN_ERR_LINE := 70;
        POAC_TOKENS(LN_TOKEN_CNT) := LC_TOKEN;
        
        LN_ERR_LINE := 80;
        EXIT WHEN LN_SECOND >= LENGTH(LC_CON_STR);

    END LOOP;

EXCEPTION
WHEN OTHERS THEN
    COMMON.LOG_ERROR('COMMON', 'SPLIT2ARRAY', LN_ERR_LINE, SQLCODE, SQLERRM);
 
END;

PROCEDURE INSERT_APP_ERRORS
    (
        PIC_USER_NAME                   IN              VARCHAR2,
        PIC_ROLE_NAME                   IN              VARCHAR2,
        PIC_APP_ERRORS                  IN              VARCHAR2
    )
IS
PRAGMA AUTONOMOUS_TRANSACTION;
LN_ERR_NO   NUMBER;
BEGIN

    LN_ERR_NO:=10;

   INSERT INTO APPLICATION_ERRORS
    ( APP_ERR_ID, USER_NAME, ROLE_NAME, APP_ERRORS) 
    VALUES ( APP_ERR_ID_SEQ.NEXTVAL, PIC_USER_NAME, PIC_ROLE_NAME, SUBSTR(PIC_APP_ERRORS,1,3500));   
    
    COMMIT;
    
    LN_ERR_NO:=20;   
    
EXCEPTION
WHEN OTHERS THEN
    COMMON.LOG_ERROR('COMMON', 'INSERT_APP_ERRORS', LN_ERR_NO, SQLCODE, SQLERRM);       

END INSERT_APP_ERRORS;
    
END COMMON;
/


CREATE OR REPLACE PROCEDURE                       GET_CROSS_REFERENCES
	(
    	PIN_SHP_REF_ID			IN		NUMBER,
        PORC_CROSS_REFS			OUT		COMMON.REF_CUR
    )
IS
/******************************************************************************
   NAME:       GET_CROSS_REFERENCES
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        10/20/14   VISWANATH.ETIKALA       1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     GET_CROSS_REFERENCES
      Sysdate:         10/20/14
      Date and Time:   10/20/14, 5:58:15 PM, and 10/20/14 5:58:15 PM
      Username:        VISWANATH.ETIKALA (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
LN_ERR_LINE NUMBER;
BEGIN

	OPEN PORC_CROSS_REFS FOR
    SELECT RR.*,
           (SELECT NTT_TO_VARCHAR2(CAST(COLLECT(TO_CHAR(PR_R.REACTION_SNO)) AS VARCHAR2_NTT), '; ', 'YES', 'YES') REACTION_SNO
              FROM (PRODUCTS P
                   INNER JOIN REACTIONS P_R ON (P_R.REACTION_ID = P.REACTION_ID))
                   INNER JOIN
                   (PARTICIPANTS PR
                   INNER JOIN REACTION_STEPS RS ON (RS.RXN_STEP_ID = PR.RXN_STEP_ID) 
                   INNER JOIN REACTIONS PR_R ON (PR_R.REACTION_ID = RS.REACTION_ID))
                   ON (P_R.DOC_ID = PR_R.DOC_ID AND P.INCHI_KEY = PR.INCHI_KEY AND PR_R.REACTION_SNO > P_R.REACTION_SNO)
             WHERE P_R.REACTION_ID = RR.REACTION_ID
           ) SUCCEEDING,
           (SELECT NTT_TO_VARCHAR2(CAST(COLLECT(TO_CHAR(P_R.REACTION_SNO)) AS VARCHAR2_NTT), '; ', 'YES', 'YES') REACTION_SNO
              FROM (PARTICIPANTS PR
                   INNER JOIN REACTION_STEPS RS ON (RS.RXN_STEP_ID = PR.RXN_STEP_ID)
                   INNER JOIN REACTIONS PR_R ON (PR_R.REACTION_ID = RS.REACTION_ID))
                   INNER JOIN
                   (PRODUCTS P
                   INNER JOIN REACTIONS P_R ON (P_R.REACTION_ID = P.REACTION_ID))
                   ON (P_R.DOC_ID = PR_R.DOC_ID AND P.INCHI_KEY = PR.INCHI_KEY AND PR_R.REACTION_SNO > P_R.REACTION_SNO)
             WHERE PR_R.REACTION_ID = RR.REACTION_ID
           ) PRECEEDING
      FROM REACTIONS RR
     WHERE DOC_ID = PIN_SHP_REF_ID
     ORDER BY RR.REACTION_SNO;


EXCEPTION
WHEN OTHERS THEN
    COMMON.LOG_ERROR('','GET_CROSS_REFERENCES', LN_ERR_LINE, SQLCODE, SQLERRM);
    RAISE;
END GET_CROSS_REFERENCES;
 
/

CREATE OR REPLACE PROCEDURE GET_REF_PRODUCTS
	(
    	PIN_SHIPMENT_REF_ID			IN		NUMBER,
        PORC_REF_PRODUCTS			OUT		COMMON.REF_CUR
    ) 
IS
/******************************************************************************
   NAME:       GET_REF_PRODUCTS
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        10/29/14   VISWANATH.ETIKALA       1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     GET_REF_PRODUCTS
      Sysdate:         10/29/14
      Date and Time:   10/29/14, 5:21:57 PM, and 10/29/14 5:21:57 PM
      Username:        VISWANATH.ETIKALA (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/
LN_ERR_LINE NUMBER;

BEGIN
	LN_ERR_LINE := 10;
	OPEN PORC_REF_PRODUCTS FOR
    SELECT P.*, R.REACTION_SNO
      FROM PRODUCTS P
           INNER JOIN REACTIONS R
              ON (R.REACTION_ID = P.REACTION_ID)
           INNER JOIN SHIPMENT_REFERENCES SR
              ON (SR.SHIPMENT_REF_ID = R.DOC_ID)
     WHERE SR.SHIPMENT_REF_ID = PIN_SHIPMENT_REF_ID
     ORDER BY R.REACTION_SNO, P.PRODUCT_ID;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
    	COMMON.LOG_ERROR('','GET_REF_PRODUCTS', LN_ERR_LINE, SQLCODE, SQLERRM);
        RAISE;
END GET_REF_PRODUCTS;
/

CREATE OR REPLACE PROCEDURE                  PATCH_UPDATES
    (
        PIN_SETUP_NO        IN          NUMBER,
        PIN_PATCH_NO        IN          NUMBER,
        PO_MAX_PATCH_NO     OUT         NUMBER,
        POC_REFCURSOR       OUT         SYS_REFCURSOR
    ) IS
/******************************************************************************
   NAME:       PATCH_UPDATES_DLL
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        2/25/2014   harishbabul.yeddula       1. Created this procedure.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     PATCH_UPDATES_DLL
      Sysdate:         2/25/2014
      Date and Time:   2/25/2014, 11:15:24 AM, and 2/25/2014 11:15:24 AM
      Username:        harishbabul.yeddula (set in TOAD Options, Procedure Editor)
      Table Name:       (set in the "New PL/SQL Object" dialog)

******************************************************************************/

LN_ERR_LINE NUMBER:=0;

BEGIN
    LN_ERR_LINE :=10;     
    SELECT MAX(PATCH_NO) INTO PO_MAX_PATCH_NO
    FROM APP_PATCH_UPDATE_MASTER;
    OPEN POC_REFCURSOR FOR 
    SELECT P.SETUP_NO, P.PATCH_ID, P.PATCH_FILE_ID, P.FILE_NAME, 
            P.FILE_VERSION, P.FILE_PATH 
      FROM ( SELECT APUF.PATCH_FILE_ID, APUF.PATCH_ID, APUF.FILE_NAME,
                    APUF.FILE_VERSION, FILE_PATH, SETUP_NO,
                    ROW_NUMBER() OVER(PARTITION BY FILE_NAME ORDER BY APUF.PATCH_ID DESC) R_NO 
              FROM  APP_PATCH_UPDATE_MASTER APUM,
                    APP_PATCH_UPDATE_FILES APUF
              WHERE APUM.PATCH_ID = APUF.PATCH_ID
                AND APUM.PATCH_NO > PIN_PATCH_NO
                   AND APUM.SETUP_NO = PIN_SETUP_NO)P
      WHERE P.R_NO = 1; 

    LN_ERR_LINE:=20;

EXCEPTION
WHEN OTHERS THEN
    COMMON.LOG_ERROR('','PATCH_UPDATES_DLL', LN_ERR_LINE, SQLCODE, SQLERRM);
    RAISE;
END PATCH_UPDATES;
 
/


CREATE OR REPLACE PACKAGE                       DELIVERY_PKG AS
/******************************************************************************
   NAME:       DELIVERY_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        11/07/14      VISWANATH.ETIKALA       1. Created this package.
******************************************************************************/

PROCEDURE EXPORT_SHIPMENT_REFERENCES
    (
        PIN_YEAR            	IN			NUMBER,
        PIC_CLASS_TYPE			IN			VARCHAR2,
        PORC_REPORT         	OUT			COMMON.REF_CUR,
    	PORC_SOL_CATS			OUT			COMMON.REF_CUR
    );

PROCEDURE GET_DELIVERIES
	(
        PORC_DELIVERIES						OUT			COMMON.REF_CUR
	);

PROCEDURE GET_DELIVERED_REFS
	(
    	PIN_DELIVERY_ID			IN		NUMBER,
        PORC_REFS				OUT		COMMON.REF_CUR,
        PORC_SOL_CATS			OUT		COMMON.REF_CUR
    );

PROCEDURE GET_NEXT_MDL_NO
	(
    	PON_MDL_NO		OUT		NUMBER
    );

PROCEDURE DELIVERY_INSERTS
	(
        PIC_DELIVERY_NAME					IN			VARCHAR2,
        PIN_DELIVERED_REFS_CNT				IN			NUMBER,
        PIN_DELIVERED_REACTION_CNT			IN			NUMBER,
        PIN_MDL_START_NO					IN			NUMBER,
        PIN_MDL_END_NO						IN			NUMBER,
        PINA_SHIPMENT_REF_ID				IN			COMMON.PLST_NUM,
        PINA_MDL_START_NO					IN			COMMON.PLST_NUM,
        PINA_MDL_END_NO						IN			COMMON.PLST_NUM,
        PIN_UR_ID							IN			NUMBER,
        POC_STATUS							OUT			VARCHAR2,
        PORC_DELIVERIES						OUT			COMMON.REF_CUR
	);

PROCEDURE GET_DELIVERED_SOL_CATS
	(
    	PORC_SOL_CATS			OUT		COMMON.REF_CUR
    );

PROCEDURE INSERT_DELIVERED_SOL_CATS
	(
        PIC_DELIVERY_NAME			IN			VARCHAR2,
        PIN_SHIPMENT_REF_ID			IN			NUMBER,
        PIC_MOL_NAME				IN			VARCHAR2,
        PIL_MOL_FILE				IN			CLOB,
        PIC_MOL_INCHI_KEY			IN			VARCHAR2        
    );

END DELIVERY_PKG;
/

CREATE OR REPLACE PACKAGE                       REACTION_ANALYSIS 
IS
/******************************************************************************
   NAME:       REACTION_ANALYSIS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        9/17/2014      harishbabul.yeddula       1. Created this package.
******************************************************************************/

PROCEDURE DML_REACTIONS
    (
        PIN_REACTION_ID                 IN          NUMBER,
        PIN_DOC_ID                      IN          NUMBER, 
        PIC_REACTION_SCHEME             IN          CLOB,
        PIN_REACTION_SNO                IN          NUMBER,
        PIC_OPTION                      IN          VARCHAR2,  
        PIC_RXN_COMMENTS                IN         	VARCHAR2,
        PIC_RXN_MAPPING_TYPE            IN         	VARCHAR2,
        PIC_COMPLETED_STATUS			IN			CHAR,
        PIC_ROLE_NAME					IN			VARCHAR2,
        PIC_IS_IMPORTANT				IN			CHAR,
        PIN_UR_ID						IN			NUMBER,
        POC_STATUS                      OUT         VARCHAR2,
        PORC_REACTIONS                  OUT         SYS_REFCURSOR
    );
    
PROCEDURE DML_REACTION_REFERENCE
    (
        PIN_RR_ID                       IN          NUMBER, 
        PIN_REACTION_ID                 IN          NUMBER, 
        PIN_EXT_REG_NO                  IN          NUMBER, 
        PIC_RR_PATH                     IN          VARCHAR2,
        PIC_STEP                        IN          VARCHAR2,
        PIC_OPTION                      IN          VARCHAR2, 
        POC_STATUS                      OUT         VARCHAR2,
        PORC_REACT_REFERECNCES          OUT         SYS_REFCURSOR
    ); 

PROCEDURE DML_CROSS_REFERENCES
    (
        PIN_CR_ID                       IN          NUMBER,
        PIN_REACTION_ID                 IN          NUMBER,
        PIN_PRE_RXN_SNO                 IN          NUMBER,
        PIN_SUCC_RXN_SNO                IN          NUMBER,         
        PIC_OPTION                      IN          VARCHAR2, 
        POC_STATUS                      OUT         VARCHAR2,
        PORC_CROSS_REACTIONS            OUT         SYS_REFCURSOR
    );   
    
PROCEDURE DML_REACTION_STEPS
    (
        PIN_RXN_STEP_ID                 IN          NUMBER, 
        PIN_REACTION_ID                 IN          NUMBER, 
        PIN_RXN_STEP_SNO                IN          NUMBER, 
        PIN_YIELD                       IN          VARCHAR2, 
        PIC_OPTION                      IN          VARCHAR2, 
        POC_STATUS                      OUT         VARCHAR2,
        PORC_REACITON_STEPS             OUT         SYS_REFCURSOR
    );                 

PROCEDURE DML_CONDITIONS
    (
        PIN_CONDITION_ID                IN          NUMBER, 
        PIN_REACTION_ID                 IN          NUMBER,
        PIN_RXN_STEP_ID                 IN          NUMBER, 
        PIC_COND_TIME                   IN          VARCHAR2, 
        PIC_TEMPERATURE                 IN          VARCHAR2, 
        PIC_PRESSURE                    IN          VARCHAR2, 
        PIC_PH                          IN          VARCHAR2, 
        PIC_IS_WARMUP                   IN          CHAR, 
        PIC_IS_COOL_DOWN                IN          CHAR, 
        PIC_IS_REFLUX                   IN          CHAR, 
        PIC_OTHER_CONDITIONS            IN          VARCHAR2,
        PIC_OPERATION                   IN          VARCHAR2,
        PIC_OPTION                      IN          VARCHAR2, 
        PIC_COND_TIME_UNIT              IN          VARCHAR2,
        PIC_TEMPERATURE_UNIT           IN          VARCHAR2,
        PIC_PRESSURE_UNIT			    IN 		   VARCHAR2,
        POC_STATUS                      OUT         VARCHAR2,
        PORC_CONDITIONS                 OUT         SYS_REFCURSOR
    );
    
PROCEDURE DML_PARTICIPANTS
    (
        PIN_PRPNT_ID                    IN          NUMBER, 
        PIN_REACTION_ID                 IN          NUMBER,
        PIN_RXN_STEP_ID                 IN          NUMBER, 
        PIC_PRPNT_TYPE                  IN          VARCHAR,
        PIC_PRPNT_STRUCTURE             IN          CLOB,
        PIC_INCHI_KEY                   IN          VARCHAR2, 
        PIC_PRPNT_NAME                  IN          VARCHAR2,
        PIC_STRUCTURE_NO                IN          VARCHAR2, 
        PIC_GRADE                       IN          VARCHAR2,
        PIC_OPTION                      IN          VARCHAR2, 
        POC_STATUS                      OUT         VARCHAR2,
        PORC_PARITCIPANTS               OUT         SYS_REFCURSOR
    ); 
    
PROCEDURE DML_PRODUCTS
    (
        PIN_PRODUCT_ID                  IN          NUMBER, 
        PIN_REACTION_ID                 IN          NUMBER, 
        PIC_PROD_STRUCTURE              IN          CLOB,
        PIC_INCHI_KEY                   IN          VARCHAR2, 
        PIC_PRODUCT_NAME                IN          VARCHAR2, 
        PIC_STRUCTURE_NO                IN          VARCHAR2, 
        PIC_YIELD                       IN          VARCHAR2, 
        PIC_CHEMO_SELECTIVITY           IN          VARCHAR2, 
        PIC_DIASTEREO_SELECTIVITY       IN          VARCHAR2, 
        PIC_DIASTEREOMERIC_EXCESS       IN          VARCHAR2, 
        PIC_ENANTIOMERIC_EXCESS         IN          VARCHAR2,
        PIC_GRADE						IN			VARCHAR2,
        PIC_OPTION                      IN          VARCHAR2, 
        POC_STATUS                      OUT         VARCHAR2,
        PORC_PROUCTS                    OUT         SYS_REFCURSOR
    );   

PROCEDURE GET_REACTIONS_ON_DOC_ID
    (
        PIN_DOC_ID                      IN          NUMBER,
        PORC_DOCUMENTS                  OUT         SYS_REFCURSOR,
        PORC_REACTIONS                  OUT         SYS_REFCURSOR,
        PORC_REACT_REFERECNCES          OUT         SYS_REFCURSOR,
        PORC_CROSS_REACTIONS            OUT         SYS_REFCURSOR,
        PORC_REACITON_STEPS             OUT         SYS_REFCURSOR,
        PORC_CONDITIONS                 OUT         SYS_REFCURSOR,
        PORC_PARITCIPANTS               OUT         SYS_REFCURSOR,
        PORC_PRODUCTS                   OUT         SYS_REFCURSOR
    );     
    
      
PROCEDURE GET_SOLVENT_AGENT_DLTS
    (
        PORC_RECORDS                    OUT         SYS_REFCURSOR
    );

PROCEDURE DUPLICATE_REACTION_DATA
(
    PIN_SHIPMENT_REF_ID         IN              NUMBER,
    PIN_REACTION_ID	            IN              NUMBER,
    PIN_REACTION_SNO	        IN              NUMBER,
    PIN_UR_ID                   IN              NUMBER,
    PON_REACTION_ID_NEW         OUT             NUMBER
);
   
PROCEDURE GET_REACTION_DATA_ON_RXN_ID
    (
        PIN_RXN_ID                 IN          NUMBER,
        PORC_RXN_DATA                 OUT         SYS_REFCURSOR
    );

PROCEDURE UPDATE_QC_COMPLETED_STATUS
	(
		PIN_DOC_ID				IN			NUMBER,
        PINA_RXN_IDS			IN			COMMON.PLST_NUM,
        PIN_UR_ID				IN			NUMBER,
        POC_STATUS				OUT			VARCHAR2
    );

PROCEDURE CHECK_DUPLICATE_REACTIONS
	(
    	PIN_SHIPMENT_REF_ID					IN		NUMBER,
        PIN_REACTION_SNO					IN		NUMBER,
        PORC_DUPLICATION_REACTIONS			OUT		COMMON.REF_CUR
    );

END REACTION_ANALYSIS;
/

CREATE OR REPLACE PACKAGE                       REACTION_CROSS_REFERENCE AS
/******************************************************************************
   NAME:       CROSS_REFERENCE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        11/07/14      VISWANATH.ETIKALA       1. Created this package.
******************************************************************************/

PROCEDURE GET_RXN_CROSS_REFERENCES
	(
    	PIN_SHIPMENT_REF_ID			IN			NUMBER,
        PORC_CROSS_REFERENCES		OUT			COMMON.REF_CUR,
        PORC_RXN_REFERENCES			OUT			COMMON.REF_CUR
    );

END REACTION_CROSS_REFERENCE;
/

CREATE OR REPLACE PACKAGE                       REACTION_CROSS_REFERENCE_DEV AS
/******************************************************************************
   NAME:       CROSS_REFERENCE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        11/07/14      VISWANATH.ETIKALA       1. Created this package.
******************************************************************************/

PROCEDURE GET_RXN_CROSS_REFERENCES
	(
    	PIN_SHIPMENT_REF_ID			IN			NUMBER,
        PORC_CROSS_REFERENCES		OUT			COMMON.REF_CUR,
        PORC_RXN_REFERENCES			OUT			COMMON.REF_CUR
    );

END REACTION_CROSS_REFERENCE_DEV;
/

CREATE OR REPLACE PACKAGE                       REPORTS AS
/******************************************************************************
   NAME:       REPORTS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        10/15/2014      Viswanath Etikala       1. Created this package.
******************************************************************************/
PROCEDURE EXPORT_SHIPMENT_REFERENCES
    (
        PIN_YEAR            IN			NUMBER,
        PIC_CLASS_TYPE		IN			VARCHAR2,
        PORC_REPORT         OUT			COMMON.REF_CUR
    );

PROCEDURE SHIPMENT_SUMMARY_REPORT
    (
        PIN_SHIPMENT_ID            IN            NUMBER,
        PORC_REPORT                OUT            COMMON.REF_CUR
    );

PROCEDURE MONTHLY_USER_REPORT
	(
    	PID_START_DATE			IN			DATE,
        PID_END_DATE			IN			DATE,
        PIC_MODULE				IN			VARCHAR2,
        PORC_REPORT				OUT			COMMON.REF_CUR
    );

PROCEDURE USER_HOURLY_REPORT
	(
    	PIN_UR_ID				IN		NUMBER,
        PID_REPORT_DATE			IN		DATE,
        PORC_HOURLY_REPORT		OUT		COMMON.REF_CUR
    );

END REPORTS;
/

CREATE OR REPLACE PACKAGE                  SHIPMENTS
AS
/******************************************************************************
   NAME:       SHIPMENTS
   PURPOSE:

   REVISIONS:
   VER        DATE        AUTHOR           DESCRIPTION
   ---------  ----------  ---------------  ------------------------------------
   1.0        1/29/2014             1. CREATED THIS PACKAGE.
******************************************************************************/
PROCEDURE GET_SHIPMENTS 
    (
            PORC_SHIPMENTS OUT COMMON.REF_CUR
    );
PROCEDURE GET_SHIPMENTS_NAMES 
    (
            PORC_SHIPMENTS OUT COMMON.REF_CUR
    );

FUNCTION SAVE_SHIPMENT
    (
      PIN_SHIPMENT_ID               IN   SHIPMENT_MASTER.SHIPMENT_ID%TYPE,
      PIN_SHIPMENT_NAME             IN   SHIPMENT_MASTER.SHIPMENT_NAME%TYPE,
      PIC_DOC_TYPE                  IN   SHIPMENT_MASTER.DOC_TYPE%TYPE,
      PIN_ABS_REF_COUNT             IN   SHIPMENT_MASTER.REF_COUNT%TYPE,
      PIN_SHIPMENT_YEAR				IN	 SHIPMENT_MASTER.SHIPMENT_YEAR%TYPE,
      PIN_ISSUE						IN	 SHIPMENT_MASTER.ISSUE%TYPE,
      PID_DOWNLOADED_DATE           IN   SHIPMENT_MASTER.DOWNLOADED_DATE%TYPE,
      PID_SCH_DELIVERY_DATE         IN   SHIPMENT_MASTER.SCH_DELIVERY_DATE%TYPE,
      PIC_DOWNLOADED_FILENAME       IN   SHIPMENT_MASTER.DOWNLOADED_FILENAME%TYPE,
      PIC_TASK_PREPARATION_STATUS   IN   SHIPMENT_MASTER.TASK_PREPARATION_STATUS%TYPE
    )
          RETURN NUMBER;
END SHIPMENTS;
 
/

CREATE OR REPLACE PACKAGE                       SHIPMENT_MANAGEMENT 
IS
/******************************************************************************
   NAME:       SHIPMENT_MANAGEMENT
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        9/25/2014      harishbabul.yeddula       1. Created this package.
******************************************************************************/
PROCEDURE SAVE_SHIPMENT
    (
      PIN_SHIPMENT_ID               IN   SHIPMENT_MASTER.SHIPMENT_ID%TYPE,
      PIN_SHIPMENT_NAME             IN   SHIPMENT_MASTER.SHIPMENT_NAME%TYPE,
      PIC_DOC_TYPE                  IN   SHIPMENT_MASTER.DOC_TYPE%TYPE,
      PIN_ABS_REF_COUNT             IN   SHIPMENT_MASTER.REF_COUNT%TYPE,
      PIN_SHIPMENT_YEAR				IN	 SHIPMENT_MASTER.SHIPMENT_YEAR%TYPE,
      PIN_ISSUE						IN	 SHIPMENT_MASTER.ISSUE%TYPE,
      PID_DOWNLOADED_DATE           IN   SHIPMENT_MASTER.DOWNLOADED_DATE%TYPE,
      PID_SCH_DELIVERY_DATE         IN   SHIPMENT_MASTER.SCH_DELIVERY_DATE%TYPE,
      PIC_DOWNLOADED_FILENAME       IN   SHIPMENT_MASTER.DOWNLOADED_FILENAME%TYPE,
      PIC_TASK_PREPARATION_STATUS   IN   SHIPMENT_MASTER.TASK_PREPARATION_STATUS%TYPE,
      POC_STATUS                    OUT  VARCHAR2
    );

PROCEDURE SAVE_SHIPMENT_REFERENCE
    (
        PIN_SHIPMENT_REF_ID             IN          NUMBER,
        PIC_ABSTRACT_REF_NO             IN          VARCHAR2, 
        PIC_JOURNAL_NAME                IN          VARCHAR2,         
        PIC_DOI                         IN          VARCHAR2, 
        PIC_ZERO_RXN_STATUS             IN          CHAR,       
        PIC_FILE_NAME                   IN          VARCHAR2,
        PIC_FILE_TYPE                   IN          VARCHAR2,
        PIC_REF_FILE_NAMES              IN         VARCHAR2,
        PIC_SYS_NO                      IN          VARCHAR2,
        PIC_SYS_TEXT                    IN          VARCHAR2,  
        PIC_SYS_CLASS_TYPE              IN          VARCHAR2,     
        POC_STATUS                      OUT         VARCHAR2,
        PORC_SHIPMENT_REFS              OUT         SYS_REFCURSOR
    ); 
    
PROCEDURE GET_SHIPMENT_DLTS
    (
        PORC_SHIPMENTS                  OUT         SYS_REFCURSOR
    );    

PROCEDURE GET_CLASSFICATION_DLTS
    (
        PORC_CLASSFICATION_DLTS         OUT         SYS_REFCURSOR,
        PORC_SYSNO_DLTS                 OUT         SYS_REFCURSOR
    );
    
PROCEDURE GET_SHIPMENT_REFERENCES_DLTS
    (
        PIN_SHIPMENT_REF_ID             IN          NUMBER,
        PORC_SHIPMENT_REFERENCES        OUT         SYS_REFCURSOR
    );        
                                                         
PROCEDURE UPDATE_BIBLIOGRAPHY_INFO
	(
    	PIN_SHIPMENT_REF_ID			IN		NUMBER,
        PIC_JOURNAL_NAME 			IN		VARCHAR2,
        PIN_JOURNAL_YEAR			IN		NUMBER,
        PIC_VOLUME					IN		VARCHAR2,
        PIC_ISSUE					IN		VARCHAR2,
        PIC_START_PAGE				IN		VARCHAR2,
        PIC_END_PAGE				IN		VARCHAR2,
        PIC_DOI						IN		VARCHAR2,
        PORC_SHIPMENT_REFERENCES    OUT     SYS_REFCURSOR
    );

END SHIPMENT_MANAGEMENT;
/

CREATE OR REPLACE PACKAGE                       TASK_MANAGEMENT
IS

PROCEDURE GET_MODULE_SHIPMENTS
	(
		PIC_MODULE					IN		VARCHAR2,
        PORC_SHIPMENTS				OUT		COMMON.REF_CUR
    );

PROCEDURE GET_USER_TASK_CNTS
	(
        PIC_MODULE				IN      VARCHAR2,
        PORC_MODULE_USER		OUT		COMMON.REF_CUR,
        PORC_USER_TASK_CNTS		OUT		COMMON.REF_CUR
    );

PROCEDURE GET_UNASSIGNED_REFS
	(
        PIC_MODULE				IN      VARCHAR2,
        PIN_SHIPMENT_ID			IN      NUMBER,
        PORC_REFS				OUT		COMMON.REF_CUR
    );

PROCEDURE GET_SHIPMENT_REF_DETAILS
	(
        PIC_MODULE				IN      VARCHAR2,
        PIN_SHIPMENT_ID			IN      NUMBER,
        PORC_REFS				OUT		COMMON.REF_CUR
    );

PROCEDURE TASK_ALLOC_TO_CURATION
    (
        PIC_MODULE				IN      VARCHAR2,
        PIN_SHIPMENT_ID			IN      NUMBER,
        PIN_TEAM_USER_ID		IN      NUMBER,
        PINA_SHPMT_REF_IDS		IN      COMMON.PLST_NUM
     );

PROCEDURE GET_USER_TASKS
    (
        PIC_MODULE				IN      VARCHAR2,
        PIN_UR_ID               IN      NUMBER,
        PORC_RECORDS            OUT     SYS_REFCURSOR
     );

PROCEDURE UPDATE_TASK_STATUS
    (
		PIN_TASK_ID					IN        NUMBER,
        PIN_TASK_ALLOC_ID			IN        NUMBER,
        PIN_UR_ID					IN        NUMBER,
        PIC_STATUS					IN        VARCHAR2,
        PIC_REMARKS					IN        VARCHAR2
    );

PROCEDURE GET_SHIPMENT_REFERENCES
	(
    	PIN_SHIPMENT_ID			IN		NUMBER,
        PORC_SHIPMENT_REFS		OUT		COMMON.REF_CUR
    );

PROCEDURE UPDATE_VALIDATION_STATUS
	(
    	PIAN_SHPT_REFS			IN			COMMON.PLST_NUM,
        PIN_UR_ID				IN			NUMBER,
        POC_STATUS				OUT			VARCHAR2
    );

PROCEDURE MT_GET_USER_DETAILS
    (
        PIC_MODULE						IN			VARCHAR2,
        PIN_ROLE_ID						IN          NUMBER,
        PORC_USER_DETAILS				OUT         COMMON.REF_CUR
    );

PROCEDURE MT_GET_USER_TASKS
    (
        PIN_UR_ID				IN            NUMBER,
        PORC_USER_TASKS			OUT            SYS_REFCURSOR
    );

PROCEDURE MT_REASSIGN_REFS
    (
        PIAN_TASK_ALLOC_IDS			IN          COMMON.PLST_NUM,
        PIN_UR_ID                   IN          NUMBER,
        PIN_PM_UR_ID                IN          NUMBER,               
        POC_STATUS                  OUT         VARCHAR2
    );

PROCEDURE MT_CANCEL_TASKS
    (
        PIAN_TASK_IDS			IN          COMMON.PLST_NUM,
        POC_STATUS              OUT         VARCHAR2
    );

END TASK_MANAGEMENT;
/

CREATE OR REPLACE PACKAGE                  USER_MANAGEMENT
IS

PROCEDURE GET_ROLES
    (
            PORC_ROLES              OUT         COMMON.REF_CUR
    );

PROCEDURE GET_USER_DETAILS
    (
            PIC_MODULE       IN            VARCHAR2,
            PIC_USER_NAME        IN            VARCHAR2,
            PIN_ROLE_ID          IN            NUMBER,
            PORC_USER_DETAILS    OUT           COMMON.REF_CUR
    );
/*
PROCEDURE SAVE_USER
    (
            PIN_USER_ID             IN          NUMBER,
            PIC_USER_NAME           IN          VARCHAR2,
            PIC_EMAIL_ID            IN          VARCHAR2,
            PIC_PASSWORD            IN          VARCHAR2,
            PIC_IS_ACTIVE           IN          VARCHAR2,
            PIC_OP_TYPE             IN          VARCHAR2,
            PIC_IS_LDAP_USER        IN          CHAR,
            POC_STATUS              OUT         VARCHAR2
    );

PROCEDURE GET_USERS
    (
            PORC_USERS              OUT         COMMON.REF_CUR
    );

PROCEDURE GET_ACTIVE_USERS
    (   
            PORC_USERS              OUT         COMMON.REF_CUR
    );

PROCEDURE SAVE_USER_ROLE
    (
            PIN_USER_ID				IN			NUMBER,
            PIN_ROLE_ID				IN			NUMBER,
            PIC_APPLICATIONNAME     IN          VARCHAR2,
            PIC_MODULE              IN          VARCHAR2,
            POC_STATUS				OUT			VARCHAR2
    );
    
PROCEDURE GET_ACTIVE_USER_ROLES
    (
            PORC_USER_ROLE_DETAILS	OUT			COMMON.REF_CUR
    );  
    
PROCEDURE GET_USERNAMES_BY_APP_MOD
    (
            PIC_APPLICATION         IN          VARCHAR2,
            PIC_MODULE              IN          VARCHAR2,
            PIN_ROLE_ID             IN          NUMBER,
            PORC_RECORDS            OUT         SYS_REFCURSOR
    );

PROCEDURE DML_TEAM_USERS
    (
             PIC_APPLICATION        IN         VARCHAR2,
             PIC_MODULE             IN         VARCHAR2,
             PIN_ANLST_UR_ID        IN         NUMBER,
             PIN_QUAL_ANLST_UR_ID   IN         NUMBER ,
             PIN_REV_ANLST_UR_ID    IN         NUMBER,
             POC_STATUS             OUT        VARCHAR2
            
     );

PROCEDURE GET_TEAM_USERS
    (
            PORC_RECORDS            OUT          SYS_REFCURSOR
    );

PROCEDURE INACTIVATE_USER_ROLE
    (
            PIN_UR_ID				IN		NUMBER,
            POC_STATUS				OUT		VARCHAR2
    );
    

PROCEDURE GET_APP_MODULE_USERS
	(
        PIC_APPLICATION			IN      VARCHAR2,
        PIC_MODULE				IN      VARCHAR2,
        PORC_USERS				OUT		COMMON.REF_CUR
    );

PROCEDURE CHECK_TOOLMANAGER_ISEXIST
(
       PIC_APPLICATION     IN   VARCHAR2,
       PIC_MODULE          IN   VARCHAR2,
       PORC_RESULTS        OUT  COMMON.REF_CUR
);

PROCEDURE GET_USER_CREDENTIALS
(
       PIC_USER_NAME   IN  VARCHAR2,
       PIC_PASSWORD    IN  VARCHAR2,
       PORC_RESULTS    OUT COMMON.REF_CUR
);

PROCEDURE GET_ANALYSTNAMES_BY_APP_MOD
    (
            PIC_APPLICATION         IN          VARCHAR2,
            PIC_MODULE              IN          VARCHAR2,
            PORC_RECORDS            OUT         SYS_REFCURSOR
    );

PROCEDURE GET_QCDETAILS_ON_REVIEWER
(
            PIC_APPLICATION         IN          VARCHAR2,
            PIC_MODULE              IN          VARCHAR2,
            PIN_REVIEWER_URID            IN          NUMBER,
            PORC_RECORDS            OUT         SYS_REFCURSOR
);

PROCEDURE CHECK_MANAGER_ISEXIST
(
       PIC_APPLICATION     IN   VARCHAR2,
       PIC_MODULE          IN   VARCHAR2,
       POC_STATUS          OUT  VARCHAR2
);

PROCEDURE GET_ACTIVE_USERS_BY_APP
    (
        PIC_APPLICATION     IN      VARCHAR2,
        PORC_ACTIVE_USERS   OUT     SYS_REFCURSOR
    );      
*/  
END USER_MANAGEMENT;
 
/

CREATE OR REPLACE PACKAGE                       USER_MANAGEMENT_NEW AS

PROCEDURE GET_ALL_USERS
    (
        PORC_RES      OUT COMMON.REF_CUR                       
    );

PROCEDURE GET_ROLES
    (
            PORC_ROLES              OUT         COMMON.REF_CUR
    );

PROCEDURE GET_USER_DETAILS
    (
            PIC_MODULE       IN            VARCHAR2,
            PIC_USER_NAME        IN            VARCHAR2,
            PIN_ROLE_ID          IN            NUMBER,
            PORC_USER_DETAILS    OUT           COMMON.REF_CUR
    );

PROCEDURE SAVE_USER
    (
            PIN_USER_ID             IN          NUMBER,
            PIC_USER_NAME           IN          VARCHAR2,
            PIC_EMAIL_ID            IN          VARCHAR2,
            PIC_PASSWORD            IN          VARCHAR2,
            PIC_IS_ACTIVE           IN          VARCHAR2,
            PIC_OP_TYPE             IN          VARCHAR2,
            PIC_IS_LDAP_USER        IN          CHAR,
            POC_STATUS              OUT         VARCHAR2
    );

PROCEDURE GET_USERS
    (
            PORC_USERS              OUT         COMMON.REF_CUR
    );

PROCEDURE GET_ACTIVE_USERS
    (   
            PORC_USERS              OUT         COMMON.REF_CUR
    );

PROCEDURE SAVE_USER_ROLE
    (
        PIN_USER_ID                    IN            NUMBER,
        PIN_ROLE_ID                    IN            NUMBER,
        PIC_MODULE              IN          VARCHAR2,
        POC_STATUS                    OUT            VARCHAR2
    );
    
PROCEDURE GET_ACTIVE_USER_ROLES
    (
            PORC_USER_ROLE_DETAILS    OUT            COMMON.REF_CUR
    );  
--    
PROCEDURE GET_USERNAMES_BY_APP_MOD
    (
        PIC_MODULE            IN        VARCHAR2,
        PIN_ROLE_ID                IN        NUMBER,
        PORC_RECORDS            OUT       SYS_REFCURSOR
    );

PROCEDURE DML_TEAM_USERS
    (
         PIC_MODULE                        IN         VARCHAR2,
         PIN_ANLST_UR_ID                IN         NUMBER,
         PIN_QUAL_ANLST_UR_ID            IN         NUMBER ,
         PIN_REV_ANLST_UR_ID            IN         NUMBER,
         POC_STATUS                        OUT        VARCHAR2                
     );

PROCEDURE GET_TEAM_USERS
    (
            PORC_RECORDS            OUT          SYS_REFCURSOR
    );

PROCEDURE INACTIVATE_USER_ROLE
    (
            PIN_UR_ID                IN        NUMBER,
            POC_STATUS                OUT        VARCHAR2
    );

PROCEDURE INACTIVATE_TEAM_USERS
    (
        PIN_TEAM_USER_ID                IN        NUMBER,
        POC_STATUS                OUT        VARCHAR2
    );


--PROCEDURE GET_APP_MODULE_USERS
--    (
--        PIC_APPLICATION            IN      VARCHAR2,
--        PIC_MODULE                IN      VARCHAR2,
--        PORC_USERS                OUT        COMMON.REF_CUR
--    );

--PROCEDURE CHECK_TOOLMANAGER_ISEXIST
--(
--       PIC_APPLICATION     IN   VARCHAR2,
--       PIC_MODULE          IN   VARCHAR2,
--       PORC_RESULTS        OUT  COMMON.REF_CUR
--);

--PROCEDURE GET_USER_CREDENTIALS
--(
--       PIC_USER_NAME   IN  VARCHAR2,
--       PIC_PASSWORD    IN  VARCHAR2,
--       PORC_RESULTS    OUT COMMON.REF_CUR
--);

--PROCEDURE GET_ANALYSTNAMES_BY_APP_MOD
--    (
--            PIC_APPLICATION         IN          VARCHAR2,
--            PIC_MODULE              IN          VARCHAR2,
--            PORC_RECORDS            OUT         SYS_REFCURSOR
--    );

--PROCEDURE GET_QCDETAILS_ON_REVIEWER
--(
--            PIC_APPLICATION         IN          VARCHAR2,
--            PIC_MODULE              IN          VARCHAR2,
--            PIN_REVIEWER_URID            IN          NUMBER,
--            PORC_RECORDS            OUT         SYS_REFCURSOR
--);

--PROCEDURE CHECK_MANAGER_ISEXIST
--(
--       PIC_APPLICATION     IN   VARCHAR2,
--       PIC_MODULE          IN   VARCHAR2,
--       POC_STATUS          OUT  VARCHAR2
--);

--PROCEDURE GET_ACTIVE_USERS_BY_APP
--    (
--        PIC_APPLICATION     IN      VARCHAR2,
--        PORC_ACTIVE_USERS   OUT     SYS_REFCURSOR
--    );      


END USER_MANAGEMENT_NEW;
/
CREATE OR REPLACE PACKAGE BODY                       DELIVERY_PKG AS
/******************************************************************************
   NAME:       DELIVERY_PKG
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        11/07/14      VISWANATH.ETIKALA       1. Created this package.
******************************************************************************/

PROCEDURE EXPORT_SHIPMENT_REFERENCES
    (
        PIN_YEAR            	IN			NUMBER,
        PIC_CLASS_TYPE			IN			VARCHAR2,
        PORC_REPORT         	OUT			COMMON.REF_CUR,
    	PORC_SOL_CATS			OUT			COMMON.REF_CUR
    )
IS

LN_ERR_NO   NUMBER;

BEGIN

    LN_ERR_NO:=10;
    OPEN PORC_REPORT FOR
    SELECT SM.SHIPMENT_ID, SM.SHIPMENT_NAME,
    	   SR.SHIPMENT_REF_ID, SR.REFERENCE_NAME, SR.SYS_TEXT,
		   SR.SYS_NO, SR.IS_DELIVERED, TM.TASK_STATUS,
           RC.REACTION_CNT
      FROM SHIPMENT_MASTER SM
      	   INNER JOIN SHIPMENT_REFERENCES SR
              ON (SR.SHIPMENT_ID = SM.SHIPMENT_ID)
           INNER JOIN TASK_MASTER TM
              ON (TM.SHIPMENT_REF_ID = SR.SHIPMENT_REF_ID AND TM.MODULE = 'RA')
           INNER JOIN
            (SELECT R.DOC_ID SHIPMENT_REF_ID, COUNT(1) REACTION_CNT 
               FROM REACTIONS R
              GROUP BY R.DOC_ID
            ) RC 
             ON (RC.SHIPMENT_REF_ID = SR.SHIPMENT_REF_ID)
     WHERE TM.TASK_STATUS = 'QC - COMPLETED'
       AND SR.IS_DELIVERED = 'N'
       AND SM.SHIPMENT_YEAR = PIN_YEAR
       AND SR.SYS_CLASS_TYPE = PIC_CLASS_TYPE
     ORDER BY SR.REFERENCE_NAME;

	LN_ERR_NO := 20;
    OPEN PORC_SOL_CATS FOR
    SELECT SR.REFERENCE_NAME, PP.PRPNT_NAME, PP.PRPNT_STRUCTURE, 
    	   PP.INCHI_KEY
      FROM PARTICIPANTS PP
           INNER JOIN REACTION_STEPS RS
              ON (RS.RXN_STEP_ID = PP.RXN_STEP_ID)
           INNER JOIN REACTIONS R
              ON (R.REACTION_ID = RS.REACTION_ID)
           INNER JOIN (
                SELECT SM.SHIPMENT_ID, SM.SHIPMENT_NAME,
                       SR.SHIPMENT_REF_ID, SR.REFERENCE_NAME, SR.SYS_TEXT,
                       SR.SYS_NO, SR.IS_DELIVERED
                  FROM SHIPMENT_MASTER SM
                       INNER JOIN SHIPMENT_REFERENCES SR
                          ON (SR.SHIPMENT_ID = SM.SHIPMENT_ID)
                       INNER JOIN TASK_MASTER TM
                          ON (TM.SHIPMENT_REF_ID = SR.SHIPMENT_REF_ID AND TM.MODULE = 'RA')
                 WHERE TM.TASK_STATUS = 'QC - COMPLETED'
                   AND SR.IS_DELIVERED = 'N'
                   AND SM.SHIPMENT_YEAR = PIN_YEAR
                   AND SR.SYS_CLASS_TYPE = PIC_CLASS_TYPE
                 ORDER BY SR.REFERENCE_NAME) SR
              ON (SR.SHIPMENT_REF_ID = R.DOC_ID)
           LEFT OUTER JOIN 
            (SELECT MOL_INCHI_KEY 
               FROM DELIVERY_SOL_CATS
             UNION 
             SELECT INCHI_KEY
               FROM SOLVENT_AGENTS_MASTER
              WHERE INCHI_KEY IS NOT NULL
            ) DSC
              ON (DSC.MOL_INCHI_KEY = PP.INCHI_KEY)
     WHERE UPPER(PRPNT_TYPE) IN ( 'SOLVENT', 'CATALYST', 'AGENT')
       AND UPPER(PP.INCHI_KEY) <> 'INCHI NOT GENERATED'
       AND DSC.MOL_INCHI_KEY IS NULL;


EXCEPTION
    WHEN OTHERS THEN
    COMMON.LOG_ERROR('REPORTS', 'EXPORT_SHIPMENT_REFERENCES' ,LN_ERR_NO, SQLCODE, SQLERRM);     
END EXPORT_SHIPMENT_REFERENCES;

PROCEDURE GET_DELIVERIES
	(
        PORC_DELIVERIES						OUT			COMMON.REF_CUR
	) IS

LN_LINE_NO		NUMBER;

BEGIN
	LN_LINE_NO := 10;
    OPEN PORC_DELIVERIES FOR 
    SELECT * 
      FROM DELIVERY_MASTER
    ORDER BY DELIVERY_DATE, DELIVERY_ID;
    
EXCEPTION
WHEN OTHERS THEN
    COMMON.LOG_ERROR('DELIVERY_PKG', 'GET_DELIVERIES', LN_LINE_NO, SQLCODE, SQLERRM);
    RAISE;
END;


PROCEDURE GET_DELIVERED_REFS
	(
    	PIN_DELIVERY_ID			IN		NUMBER,
        PORC_REFS				OUT		COMMON.REF_CUR,
        PORC_SOL_CATS			OUT		COMMON.REF_CUR
    ) IS
LN_LINE_NO		NUMBER;
BEGIN
	LN_LINE_NO := 10;
    OPEN PORC_REFS FOR
    SELECT DR_ID, DR.SHIPMENT_REF_ID, SR.REFERENCE_NAME, SR.SYS_CLASS_TYPE,
    	   REACTION_CNT
      FROM DELIVERY_REFERENCES DR
      	   INNER JOIN SHIPMENT_REFERENCES SR 
              ON (SR.SHIPMENT_REF_ID = DR.SHIPMENT_REF_ID)
           INNER JOIN (
           	SELECT DOC_ID, COUNT(1) REACTION_CNT
              FROM REACTIONS
             GROUP BY DOC_ID
           ) R ON (R.DOC_ID = SR.SHIPMENT_REF_ID)
     WHERE DELIVERY_ID = PIN_DELIVERY_ID
     ORDER BY SHIPMENT_REF_ID; 

	LN_LINE_NO := 20;
    OPEN PORC_SOL_CATS FOR
    SELECT DSC.SHIPMENT_REF_ID, SR.REFERENCE_NAME, 
    	   DSC.MOL_NAME, DSC.MOL_FILE, DSC.MOL_INCHI_KEY
      FROM DELIVERY_SOL_CATS DSC
      	   INNER JOIN SHIPMENT_REFERENCES SR
              ON (SR.SHIPMENT_REF_ID = DSC.SHIPMENT_REF_ID)
     WHERE DELIVERY_ID = PIN_DELIVERY_ID;

EXCEPTION
WHEN OTHERS THEN
    COMMON.LOG_ERROR('DELIVERY_PKG', 'DML_DELIVERY_MASTER', LN_LINE_NO, SQLCODE, SQLERRM);
    RAISE;
END;

PROCEDURE GET_NEXT_MDL_NO
	(
    	PON_MDL_NO		OUT		NUMBER
    ) IS

LN_LINE_NO		NUMBER;
LN_MDL_NO	NUMBER;

BEGIN
	LN_LINE_NO := 10;
    SELECT COALESCE(MAX(MDL_END_NO) + 1, 1)
      INTO LN_MDL_NO
      FROM DELIVERY_MASTER;

	LN_LINE_NO := 20;
    PON_MDL_NO := LN_MDL_NO;

EXCEPTION
WHEN OTHERS THEN
    COMMON.LOG_ERROR('DELIVERY_PKG', 'GET_NEXT_MDL_NO', LN_LINE_NO, SQLCODE, SQLERRM);
    RAISE;
END;

PROCEDURE DELIVERY_INSERTS
	(
        PIC_DELIVERY_NAME					IN			VARCHAR2,
        PIN_DELIVERED_REFS_CNT				IN			NUMBER,
        PIN_DELIVERED_REACTION_CNT			IN			NUMBER,
        PIN_MDL_START_NO					IN			NUMBER,
        PIN_MDL_END_NO						IN			NUMBER,
        PINA_SHIPMENT_REF_ID				IN			COMMON.PLST_NUM,
        PINA_MDL_START_NO					IN			COMMON.PLST_NUM,
        PINA_MDL_END_NO						IN			COMMON.PLST_NUM,
        PIN_UR_ID							IN			NUMBER,
        POC_STATUS							OUT			VARCHAR2,
        PORC_DELIVERIES						OUT			COMMON.REF_CUR
	) IS

LN_LINE_NO		NUMBER;

LN_DELIVERY_ID  NUMBER;
LNA_DR_ID		COMMON.PLST_NUM;

BEGIN
	LN_LINE_NO := 10;
    INSERT INTO DELIVERY_MASTER (
       DELIVERY_ID, DELIVERY_NAME, DELIVERY_DATE, 
       DELIVERED_REFS_CNT, DELIVERED_REACTION_CNT, MDL_START_NO, 
       MDL_END_NO, CREATED_BY) 
    VALUES (DELIVERY_ID_SEQ.NEXTVAL, PIC_DELIVERY_NAME, SYSDATE,
            PIN_DELIVERED_REFS_CNT, PIN_DELIVERED_REACTION_CNT, PIN_MDL_START_NO,
            PIN_MDL_END_NO, PIN_UR_ID)
	RETURNING DELIVERY_ID INTO LN_DELIVERY_ID;

	LN_LINE_NO := 20;
    FOR I IN 1 .. PINA_SHIPMENT_REF_ID.COUNT
    LOOP
    	LNA_DR_ID(I) := DR_ID_SEQ.NEXTVAL;
    END LOOP;

	LN_LINE_NO := 30;
    FORALL I IN 1 .. PINA_SHIPMENT_REF_ID.COUNT
    	INSERT INTO DELIVERY_REFERENCES
        VALUES (LNA_DR_ID(I), LN_DELIVERY_ID, PINA_SHIPMENT_REF_ID(I),
        		PINA_MDL_START_NO(I), PINA_MDL_END_NO(I));

	LN_LINE_NO := 40;
    FORALL I IN 1 .. PINA_SHIPMENT_REF_ID.COUNT
    	UPDATE SHIPMENT_REFERENCES
           SET IS_DELIVERED = 'Y'
         WHERE SHIPMENT_REF_ID = PINA_SHIPMENT_REF_ID(I);  

	LN_LINE_NO := 50;
    COMMIT;

    LN_LINE_NO := 60;
    POC_STATUS := 'SUCCESS';
   
EXCEPTION
WHEN OTHERS THEN
    COMMON.LOG_ERROR('DELIVERY_PKG', 'DML_DELIVERY_MASTER', LN_LINE_NO, SQLCODE, SQLERRM);
    POC_STATUS := 'FAILED';
    RAISE;
END;

PROCEDURE GET_DELIVERED_SOL_CATS
	(
    	PORC_SOL_CATS			OUT		COMMON.REF_CUR
    ) IS

LN_LINE_NO		NUMBER;

BEGIN
	LN_LINE_NO := 10;
    OPEN PORC_SOL_CATS FOR
    SELECT DSC.SHIPMENT_REF_ID, SR.REFERENCE_NAME, 
    	   DM.DELIVERY_SNO, DM.DELIVERY_NAME,
    	   DSC.MOL_NAME, DSC.MOL_FILE, DSC.MOL_INCHI_KEY
      FROM DELIVERY_SOL_CATS DSC
      	   INNER JOIN SHIPMENT_REFERENCES SR
              ON (SR.SHIPMENT_REF_ID = DSC.SHIPMENT_REF_ID)
           INNER JOIN 
           	(SELECT DELIVERY_ID, DELIVERY_NAME,
            		ROW_NUMBER() OVER (ORDER BY DELIVERY_ID) DELIVERY_SNO
               FROM DELIVERY_MASTER) DM
              ON (DM.DELIVERY_ID = DSC.DELIVERY_ID)
	 ORDER BY DM.DELIVERY_SNO, DSC.DSC_ID;

EXCEPTION
WHEN OTHERS THEN
    COMMON.LOG_ERROR('DELIVERY_PKG', 'GET_DELIVED_SOL_CATS', LN_LINE_NO, SQLCODE, SQLERRM);
    RAISE;
END;

PROCEDURE INSERT_DELIVERED_SOL_CATS
	(
        PIC_DELIVERY_NAME			IN			VARCHAR2,
        PIN_SHIPMENT_REF_ID			IN			NUMBER,
        PIC_MOL_NAME				IN			VARCHAR2,
        PIL_MOL_FILE				IN			CLOB,
        PIC_MOL_INCHI_KEY			IN			VARCHAR2        
    ) IS

LN_LINE_NO		NUMBER;
LN_DELIVERY_ID	NUMBER(10);

BEGIN
	LN_LINE_NO := 10;
    SELECT DELIVERY_ID
      INTO LN_DELIVERY_ID
      FROM DELIVERY_MASTER
     WHERE DELIVERY_NAME = PIC_DELIVERY_NAME;
    
    LN_LINE_NO := 20;
    INSERT INTO DELIVERY_SOL_CATS (
       DSC_ID, DELIVERY_ID, SHIPMENT_REF_ID, 
       MOL_NAME, MOL_FILE, MOL_INCHI_KEY) 
	VALUES (DSC_ID_SEQ.NEXTVAL, LN_DELIVERY_ID, PIN_SHIPMENT_REF_ID,
    	 PIC_MOL_NAME, PIL_MOL_FILE, PIC_MOL_INCHI_KEY);

	LN_LINE_NO := 30;
    COMMIT;

EXCEPTION
WHEN OTHERS THEN
    COMMON.LOG_ERROR('DELIVERY_PKG', 'GET_DELIVED_SOL_CATS', LN_LINE_NO, SQLCODE, SQLERRM);
    ROLLBACK;
    RAISE;
END;

END DELIVERY_PKG;
/

CREATE OR REPLACE PACKAGE BODY                       REACTION_ANALYSIS 
IS

PROCEDURE DML_REACTIONS
    (
        PIN_REACTION_ID                 IN          NUMBER,
        PIN_DOC_ID                      IN          NUMBER, 
        PIC_REACTION_SCHEME             IN          CLOB,
        PIN_REACTION_SNO                IN          NUMBER,
        PIC_OPTION                      IN          VARCHAR2,  
        PIC_RXN_COMMENTS                IN         	VARCHAR2,
        PIC_RXN_MAPPING_TYPE            IN         	VARCHAR2,
        PIC_COMPLETED_STATUS			IN			CHAR,
        PIC_ROLE_NAME					IN			VARCHAR2,
        PIC_IS_IMPORTANT				IN			CHAR,
        PIN_UR_ID						IN			NUMBER,
        POC_STATUS                      OUT         VARCHAR2,
        PORC_REACTIONS                  OUT         SYS_REFCURSOR
    )
IS
LN_ERR_NO   NUMBER;

LN_REACTION_SNO	NUMBER(10);
LN_DOC_ID		NUMBER(10);

LN_CUR_UR_ID		NUMBER(10);
LN_REV_UR_ID		NUMBER(10);
LN_QC_UR_ID			NUMBER(10);

BEGIN

    LN_ERR_NO:=10;
    IF UPPER(PIC_OPTION) = 'INSERT' THEN
    
        LN_ERR_NO:=20;
        UPDATE REACTIONS
           SET REACTION_SNO = REACTION_SNO + 1
         WHERE DOC_ID = PIN_DOC_ID
           AND REACTION_SNO >= PIN_REACTION_SNO;

        LN_ERR_NO:=30;
        INSERT INTO REACTIONS
         (REACTION_ID, DOC_ID, REACTION_SCHEME, 
          REACTION_SNO, RXN_COMMENTS, RXN_MAPPING_TYPE, 
          IS_IMPORTANT, CREATED_BY) 
        VALUES (REACTION_ID_SEQ.NEXTVAL, PIN_DOC_ID, PIC_REACTION_SCHEME, 
        	PIN_REACTION_SNO,PIC_RXN_COMMENTS, PIC_RXN_MAPPING_TYPE, 
            PIC_IS_IMPORTANT, PIN_UR_ID);
        POC_STATUS:= 'Insert Success';
        
    ELSIF UPPER(PIC_OPTION) = 'UPDATE' THEN

		IF PIC_COMPLETED_STATUS = 'Y' THEN
        	IF UPPER(PIC_ROLE_NAME) = 'ANALYST' THEN
            	LN_CUR_UR_ID := PIN_UR_ID;
            ELSIF UPPER(PIC_ROLE_NAME) = 'REVIEW ANALYST' THEN
            	LN_REV_UR_ID := PIN_UR_ID;
            ELSIF UPPER(PIC_ROLE_NAME) = 'QUALITY ANALYST' THEN
            	LN_QC_UR_ID := PIN_UR_ID;
            END IF;
        END IF;

        LN_ERR_NO:=40;
        UPDATE REACTIONS
            SET DOC_ID          = PIN_DOC_ID,
                REACTION_SCHEME = PIC_REACTION_SCHEME,
                REACTION_SNO    = PIN_REACTION_SNO,
                RXN_COMMENTS = PIC_RXN_COMMENTS,
                RXN_MAPPING_TYPE = PIC_RXN_MAPPING_TYPE,
                IS_IMPORTANT = PIC_IS_IMPORTANT,
                CURATED_BY = COALESCE(LN_CUR_UR_ID, CURATED_BY),
                CURATED_ON = CASE WHEN LN_CUR_UR_ID IS NOT NULL THEN SYSTIMESTAMP ELSE CURATED_ON END, 
                REVIEWED_BY = COALESCE(LN_REV_UR_ID, REVIEWED_BY),
                REVIEWED_ON = CASE WHEN LN_REV_UR_ID IS NOT NULL THEN SYSTIMESTAMP ELSE REVIEWED_ON END, 
                QC_BY = COALESCE(LN_QC_UR_ID, QC_BY),
                QC_ON = CASE WHEN LN_QC_UR_ID IS NOT NULL THEN SYSTIMESTAMP ELSE QC_ON END
            WHERE REACTION_ID   = PIN_REACTION_ID;
         POC_STATUS:= 'Update Success';

    ELSIF UPPER(PIC_OPTION) = 'DELETE' THEN
    
        --DELETING DATA FROM CHILD TABLES.
        
        LN_ERR_NO:=50;
        DELETE FROM PRODUCTS
            WHERE REACTION_ID   = PIN_REACTION_ID;
        LN_ERR_NO:=60;    
        DELETE FROM REACTION_REFERENCE
            WHERE REACTION_ID   = PIN_REACTION_ID;
        LN_ERR_NO:=70;    
        DELETE FROM CROSS_REFERENCES
            WHERE REACTION_ID   = PIN_REACTION_ID;
        LN_ERR_NO:=80;    
        DELETE FROM CONDITIONS 
            WHERE RXN_STEP_ID IN (SELECT RXN_STEP_ID
                                   FROM REACTION_STEPS
                                  WHERE REACTION_ID = PIN_REACTION_ID);
        LN_ERR_NO:=90;                          
        DELETE FROM PARTICIPANTS 
            WHERE RXN_STEP_ID IN (SELECT RXN_STEP_ID
                                   FROM REACTION_STEPS
                                  WHERE REACTION_ID = PIN_REACTION_ID);
        LN_ERR_NO:=100;                                                   
        DELETE FROM REACTION_STEPS
            WHERE REACTION_ID  =  PIN_REACTION_ID;
        
        LN_ERR_NO:=110;            
        DELETE FROM REACTIONS
             WHERE REACTION_ID   = PIN_REACTION_ID
        RETURNING REACTION_SNO, DOC_ID
             INTO LN_REACTION_SNO, LN_DOC_ID;

        UPDATE REACTIONS
           SET REACTION_SNO = REACTION_SNO - 1
         WHERE DOC_ID = LN_DOC_ID
           AND REACTION_SNO > LN_REACTION_SNO;
        
        POC_STATUS:= 'Delete Success';
                  
    END IF;
    
    LN_ERR_NO:=120;
    COMMIT;

    LN_ERR_NO:=130;
    OPEN PORC_REACTIONS FOR
	SELECT REACTION_ID, DOC_ID, REACTION_SNO, 
    	   RXN_COMMENTS, RXN_MAPPING_TYPE, IS_IMPORTANT, 
           CURATED_BY, CURATED_ON, 
           REVIEWED_BY, REVIEWED_ON, 
           QC_BY, QC_ON
	  FROM REACTIONS
     WHERE DOC_ID = PIN_DOC_ID
     ORDER BY REACTION_SNO;
         
    LN_ERR_NO:= 140;
    
EXCEPTION
    WHEN OTHERS THEN 
    COMMON.LOG_ERROR('REACTION_ANALYSIS', 'DML_REACTIONS', LN_ERR_NO, SQLCODE, SQLERRM);
    ROLLBACK;
    RAISE;    
END DML_REACTIONS;            

PROCEDURE DML_REACTION_REFERENCE
    (
        PIN_RR_ID                       IN          NUMBER, 
        PIN_REACTION_ID                 IN          NUMBER, 
        PIN_EXT_REG_NO                  IN          NUMBER, 
        PIC_RR_PATH                     IN          VARCHAR2,
        PIC_STEP                        IN          VARCHAR2,
        PIC_OPTION                      IN          VARCHAR2,  
        POC_STATUS                      OUT         VARCHAR2,
        PORC_REACT_REFERECNCES          OUT         SYS_REFCURSOR
    )
IS
LN_ERR_NO   NUMBER;
BEGIN

    --CHECKIG PIC_OPTION IS INSERT OR DELETE OR UPDATE

    IF UPPER(PIC_OPTION) = 'INSERT' THEN
        
        LN_ERR_NO:=10;
        INSERT INTO REACTION_REFERENCE
         (RR_ID, REACTION_ID, EXT_REG_NO, RR_PATH, STEP) 
        VALUES (RR_ID_SEQ.NEXTVAL, PIN_REACTION_ID, PIN_EXT_REG_NO, PIC_RR_PATH, PIC_STEP);
        POC_STATUS:= 'Insert Success';
        
    ELSIF UPPER(PIC_OPTION) = 'UPDATE' THEN
    
        LN_ERR_NO:=20;
        UPDATE REACTION_REFERENCE
            SET    REACTION_ID = PIN_REACTION_ID,
                   EXT_REG_NO  = PIN_EXT_REG_NO,
                   RR_PATH     = PIC_RR_PATH,
                   STEP        = PIC_STEP
            WHERE  RR_ID       = PIN_RR_ID;
        POC_STATUS:= 'Update Success';            
    
    ELSIF UPPER(PIC_OPTION) = 'DELETE' THEN
    
        LN_ERR_NO:=30;
        DELETE FROM REACTION_REFERENCE
          WHERE RR_ID = PIN_RR_ID;   
        POC_STATUS:= 'Delete Success';               

    END IF;
    
    LN_ERR_NO:=40;
    COMMIT;
    LN_ERR_NO:=50;
     
    OPEN PORC_REACT_REFERECNCES FOR
        SELECT *
         FROM  REACTION_REFERENCE
         WHERE REACTION_ID = PIN_REACTION_ID
         ORDER BY RR_ID;
           
     LN_ERR_NO:=60;
                 
EXCEPTION
    WHEN OTHERS THEN 
    COMMON.LOG_ERROR('REACTION_ANALYSIS', 'DML_REACTION_REFERENCE', LN_ERR_NO, SQLCODE, SQLERRM);
    ROLLBACK;
    RAISE;        
END DML_REACTION_REFERENCE ;

PROCEDURE DML_CROSS_REFERENCES
    (
        PIN_CR_ID                       IN          NUMBER,
        PIN_REACTION_ID                 IN          NUMBER,
        PIN_PRE_RXN_SNO                 IN          NUMBER,
        PIN_SUCC_RXN_SNO                IN          NUMBER,         
        PIC_OPTION                      IN          VARCHAR2, 
        POC_STATUS                      OUT         VARCHAR2,
        PORC_CROSS_REACTIONS            OUT         SYS_REFCURSOR
    )
IS
LN_ERR_NO   NUMBER;
BEGIN

    LN_ERR_NO:=10;
    
    IF UPPER(PIC_OPTION) = 'INSERT' THEN
     
        LN_ERR_NO:=20;
        INSERT INTO CROSS_REFERENCES
         (CR_ID, REACTION_ID, PRE_RXN_SNO, SUCC_RXN_SNO) 
        VALUES (CR_ID_SEQ.NEXTVAL, PIN_REACTION_ID, PIN_PRE_RXN_SNO, PIN_SUCC_RXN_SNO );
        POC_STATUS:= 'Insert Success';
     
    ELSIF UPPER(PIC_OPTION) = 'UPDATE' THEN  
     
        LN_ERR_NO:=20;
        UPDATE CROSS_REFERENCES
            SET  REACTION_ID  = PIN_REACTION_ID,
                 PRE_RXN_SNO  = PIN_PRE_RXN_SNO,
                 SUCC_RXN_SNO = PIN_SUCC_RXN_SNO
             WHERE  CR_ID     = PIN_CR_ID;
        POC_STATUS:= 'Update Success'; 
             
    ELSIF UPPER(PIC_OPTION) = 'DELETE' THEN
    
        LN_ERR_NO:=30;
        DELETE FROM CROSS_REFERENCES
          WHERE  CR_ID  = PIN_CR_ID;             
         POC_STATUS:= 'Delete Success'; 
         
    END IF;  
    
    LN_ERR_NO:=40;
    COMMIT;
    LN_ERR_NO:=50;
    
    OPEN PORC_CROSS_REACTIONS FOR 
        SELECT *
          FROM CROSS_REFERENCES
         WHERE REACTION_ID = PIN_REACTION_ID
         ORDER BY CR_ID;
          
     LN_ERR_NO:=60;
                 
EXCEPTION
    WHEN OTHERS THEN 
    COMMON.LOG_ERROR('REACTION_ANALYSIS', 'DML_CROSS_REFERENCES', LN_ERR_NO, SQLCODE, SQLERRM);
    ROLLBACK;
    RAISE;        
END DML_CROSS_REFERENCES ;

PROCEDURE DML_REACTION_STEPS
    (
        PIN_RXN_STEP_ID                 IN          NUMBER, 
        PIN_REACTION_ID                 IN          NUMBER, 
        PIN_RXN_STEP_SNO                IN          NUMBER, 
        PIN_YIELD                       IN          VARCHAR2, 
        PIC_OPTION                      IN          VARCHAR2, 
        POC_STATUS                      OUT         VARCHAR2,
        PORC_REACITON_STEPS             OUT         SYS_REFCURSOR
    )
IS
LN_ERR_NO   NUMBER;
LN_RXN_STEP_SNO NUMBER;
BEGIN
     
    IF UPPER(PIC_OPTION) = 'INSERT' THEN
    
        LN_ERR_NO:=10;
        INSERT INTO REACTION_STEPS 
        (RXN_STEP_ID, REACTION_ID, RXN_STEP_SNO, YIELD) 
        VALUES (RXN_STEP_ID_SEQ.NEXTVAL, PIN_REACTION_ID, PIN_RXN_STEP_SNO, PIN_YIELD);
        POC_STATUS:= 'Insert Success'; 
        
    ELSIF UPPER(PIC_OPTION) = 'UPDATE' THEN
    
        LN_ERR_NO:=20;
        UPDATE REACTION_STEPS
            SET  REACTION_ID  = PIN_REACTION_ID,
                 RXN_STEP_SNO = PIN_RXN_STEP_SNO,
                 YIELD        = PIN_YIELD
          WHERE  RXN_STEP_ID  = PIN_RXN_STEP_ID;
        POC_STATUS:= 'Update Success';           
    
    ELSIF UPPER(PIC_OPTION) = 'DELETE' THEN
    
        LN_ERR_NO:=30;
        DELETE FROM CONDITIONS
            WHERE RXN_STEP_ID = PIN_RXN_STEP_ID;

        LN_ERR_NO:=40;   
        DELETE FROM PARTICIPANTS
            WHERE RXN_STEP_ID = PIN_RXN_STEP_ID;

        LN_ERR_NO:=50;    
        DELETE FROM REACTION_STEPS
         WHERE RXN_STEP_ID = PIN_RXN_STEP_ID
        RETURNING RXN_STEP_SNO INTO LN_RXN_STEP_SNO;
        
        UPDATE REACTION_STEPS 
           SET RXN_STEP_SNO = RXN_STEP_SNO - 1
         WHERE REACTION_ID = PIN_REACTION_ID 
           AND RXN_STEP_SNO > LN_RXN_STEP_SNO;

        POC_STATUS:= 'Delete Success';                                         
                  
    END IF; 
    LN_ERR_NO:=60;
    COMMIT;
    LN_ERR_NO:=70;
    
    OPEN PORC_REACITON_STEPS FOR 
        SELECT * 
          FROM REACTION_STEPS
         WHERE REACTION_ID = PIN_REACTION_ID
         ORDER BY RXN_STEP_ID;--RXN_STEP_SNO; 
    LN_ERR_NO:=80;           
EXCEPTION
    WHEN OTHERS THEN 
    COMMON.LOG_ERROR('REACTION_ANALYSIS', 'DML_REACTION_STEPS', LN_ERR_NO, SQLCODE, SQLERRM);
    ROLLBACK;
    RAISE;           
END DML_REACTION_STEPS;

PROCEDURE DML_CONDITIONS
    (
        PIN_CONDITION_ID                IN          NUMBER, 
        PIN_REACTION_ID                 IN          NUMBER,
        PIN_RXN_STEP_ID                 IN          NUMBER, 
        PIC_COND_TIME                   IN          VARCHAR2, 
        PIC_TEMPERATURE                 IN          VARCHAR2, 
        PIC_PRESSURE                    IN          VARCHAR2, 
        PIC_PH                          IN          VARCHAR2, 
        PIC_IS_WARMUP                   IN          CHAR, 
        PIC_IS_COOL_DOWN                IN          CHAR, 
        PIC_IS_REFLUX                   IN          CHAR, 
        PIC_OTHER_CONDITIONS            IN          VARCHAR2,
        PIC_OPERATION                   IN          VARCHAR2,
        PIC_OPTION                      IN          VARCHAR2, 
        PIC_COND_TIME_UNIT              IN          VARCHAR2,
        PIC_TEMPERATURE_UNIT           IN          VARCHAR2,
        PIC_PRESSURE_UNIT               IN          VARCHAR2, 
        POC_STATUS                      OUT         VARCHAR2,
        PORC_CONDITIONS                 OUT         SYS_REFCURSOR
    )
IS
LN_ERR_NO   NUMBER;
BEGIN

     LN_ERR_NO:=10;

     IF UPPER(PIC_OPTION) = 'INSERT' THEN
     
        LN_ERR_NO:=20;
        INSERT INTO CONDITIONS
         (CONDITION_ID, RXN_STEP_ID, COND_TIME, TEMPERATURE, PRESSURE, PH, 
          IS_WARMUP, IS_COOL_DOWN, IS_REFLUX, OTHER_CONDITIONS, OPERATION,COND_TIME_UNIT , TEMPERATURE_UNIT, PRESSURE_UNIT) 
        VALUES (CONDITION_ID_SEQ.NEXTVAL, PIN_RXN_STEP_ID, PIC_COND_TIME, PIC_TEMPERATURE, PIC_PRESSURE, PIC_PH, 
                PIC_IS_WARMUP, PIC_IS_COOL_DOWN, PIC_IS_REFLUX, PIC_OTHER_CONDITIONS, PIC_OPERATION ,PIC_COND_TIME_UNIT, PIC_TEMPERATURE_UNIT, PIC_PRESSURE_UNIT);
        POC_STATUS:= 'Insert Success';                
        
     ELSIF UPPER(PIC_OPTION) = 'UPDATE' THEN
     
        LN_ERR_NO:=30;
        UPDATE CONDITIONS
            SET RXN_STEP_ID      = PIN_RXN_STEP_ID,
                COND_TIME        = PIC_COND_TIME,
                TEMPERATURE      = PIC_TEMPERATURE,
                PRESSURE         = PIC_PRESSURE,
                PH               = PIC_PH,
                IS_WARMUP        = PIC_IS_WARMUP,
                IS_COOL_DOWN     = PIC_IS_COOL_DOWN,
                IS_REFLUX        = PIC_IS_REFLUX,
                OTHER_CONDITIONS = PIC_OTHER_CONDITIONS,
                OPERATION = PIC_OPERATION,
                COND_TIME_UNIT = PIC_COND_TIME_UNIT,
                TEMPERATURE_UNIT = PIC_TEMPERATURE_UNIT,
                PRESSURE_UNIT = PIC_PRESSURE_UNIT
            WHERE  CONDITION_ID  = PIN_CONDITION_ID;
        POC_STATUS:= 'Update Success';             
            
        
     ELSIF UPPER(PIC_OPTION) = 'DELETE' THEN
     
        LN_ERR_NO:=40;
        DELETE FROM  CONDITIONS 
            WHERE CONDITION_ID  = PIN_CONDITION_ID;      
        POC_STATUS:= 'Delete Success';    
        
     END IF;
    LN_ERR_NO:=50;   
    COMMIT;
    LN_ERR_NO:=60;
    
    OPEN PORC_CONDITIONS FOR
        SELECT C.*
          FROM REACTIONS R
               INNER JOIN REACTION_STEPS RS
                ON (R.REACTION_ID = RS.REACTION_ID)
               INNER JOIN CONDITIONS C
                ON ( RS.RXN_STEP_ID = C.RXN_STEP_ID)
         WHERE R.REACTION_ID = PIN_REACTION_ID
         ORDER BY C.CONDITION_ID;
          
    
EXCEPTION
    WHEN OTHERS THEN 
    COMMON.LOG_ERROR('REACTION_ANALYSIS', 'DML_CONDITIONS', LN_ERR_NO, SQLCODE, SQLERRM);
    ROLLBACK;
    RAISE;     
END DML_CONDITIONS;

PROCEDURE DML_PARTICIPANTS
    (
        PIN_PRPNT_ID                    IN          NUMBER, 
        PIN_REACTION_ID                 IN          NUMBER,
        PIN_RXN_STEP_ID                 IN          NUMBER, 
        PIC_PRPNT_TYPE                  IN          VARCHAR,
        PIC_PRPNT_STRUCTURE             IN          CLOB,
        PIC_INCHI_KEY                   IN          VARCHAR2, 
        PIC_PRPNT_NAME                  IN          VARCHAR2,
        PIC_STRUCTURE_NO                IN          VARCHAR2, 
        PIC_GRADE                       IN          VARCHAR2,
        PIC_OPTION                      IN          VARCHAR2, 
        POC_STATUS                      OUT         VARCHAR2,
        PORC_PARITCIPANTS               OUT         SYS_REFCURSOR
    )
IS
LN_ERR_NO   NUMBER;
BEGIN
    
    IF UPPER(PIC_OPTION) = 'INSERT' THEN
    
        LN_ERR_NO:=10;
        INSERT INTO PARTICIPANTS
         (PRPNT_ID, RXN_STEP_ID, PRPNT_TYPE, PRPNT_STRUCTURE, INCHI_KEY, 
          PRPNT_NAME, STRUCTURE_NO, GRADE) 
        VALUES (PRPNT_ID_SEQ.NEXTVAL, PIN_RXN_STEP_ID, PIC_PRPNT_TYPE, PIC_PRPNT_STRUCTURE, PIC_INCHI_KEY,
                PIC_PRPNT_NAME, PIC_STRUCTURE_NO, PIC_GRADE);
         POC_STATUS:= 'Insert Success';  
                
    ELSIF UPPER(PIC_OPTION) = 'UPDATE' THEN 
    
        LN_ERR_NO:=20; 
        UPDATE PARTICIPANTS
            SET RXN_STEP_ID     = PIN_RXN_STEP_ID,
                PRPNT_TYPE      = PIC_PRPNT_TYPE,
                PRPNT_STRUCTURE = PIC_PRPNT_STRUCTURE,
                INCHI_KEY       = PIC_INCHI_KEY,
                PRPNT_NAME      = PIC_PRPNT_NAME,
                STRUCTURE_NO    = PIC_STRUCTURE_NO,
                GRADE           = PIC_GRADE
         WHERE  PRPNT_ID        = PIN_PRPNT_ID;
         POC_STATUS:= 'Update Success';
         
    ELSIF UPPER(PIC_OPTION) = 'DELETE' THEN
    
        LN_ERR_NO:=30;
        DELETE FROM PARTICIPANTS
            WHERE PRPNT_ID = PIN_PRPNT_ID;
        POC_STATUS:= 'Delete Success';                   
    END IF;
    LN_ERR_NO:=40;
    COMMIT;
    LN_ERR_NO:=50;
    
    OPEN PORC_PARITCIPANTS FOR
        SELECT P.*
          FROM REACTIONS R
               INNER JOIN REACTION_STEPS RS
                ON (R.REACTION_ID = RS.REACTION_ID)
               INNER JOIN PARTICIPANTS P
                ON (RS.RXN_STEP_ID = P.RXN_STEP_ID)
         WHERE R.REACTION_ID = PIN_REACTION_ID
         ORDER BY P.PRPNT_ID; 
                
     LN_ERR_NO:=60;               
    
EXCEPTION
    WHEN OTHERS THEN 
    COMMON.LOG_ERROR('REACTION_ANALYSIS', 'DML_PARTICIPANTS', LN_ERR_NO, SQLCODE, SQLERRM);
    ROLLBACK;
    RAISE;
END DML_PARTICIPANTS; 

PROCEDURE DML_PRODUCTS
    (
        PIN_PRODUCT_ID                  IN          NUMBER, 
        PIN_REACTION_ID                 IN          NUMBER, 
        PIC_PROD_STRUCTURE              IN          CLOB,
        PIC_INCHI_KEY                   IN          VARCHAR2, 
        PIC_PRODUCT_NAME                IN          VARCHAR2, 
        PIC_STRUCTURE_NO                IN          VARCHAR2, 
        PIC_YIELD                       IN          VARCHAR2, 
        PIC_CHEMO_SELECTIVITY           IN          VARCHAR2, 
        PIC_DIASTEREO_SELECTIVITY       IN          VARCHAR2, 
        PIC_DIASTEREOMERIC_EXCESS       IN          VARCHAR2, 
        PIC_ENANTIOMERIC_EXCESS         IN          VARCHAR2,
        PIC_GRADE						IN			VARCHAR2,
        PIC_OPTION                      IN          VARCHAR2, 
        POC_STATUS                      OUT         VARCHAR2,
        PORC_PROUCTS                    OUT         SYS_REFCURSOR
    )
IS
LN_ERR_NO   NUMBER;
BEGIN

    LN_ERR_NO:=10;
    
    IF UPPER(PIC_OPTION) = 'INSERT' THEN
    
        LN_ERR_NO:=20;
        INSERT INTO PRODUCTS
         (PRODUCT_ID, REACTION_ID, PROD_STRUCTURE, INCHI_KEY, PRODUCT_NAME, STRUCTURE_NO, 
          YIELD, CHEMO_SELECTIVITY, DIASTEREO_SELECTIVITY, DIASTEREOMERIC_EXCESS, ENANTIOMERIC_EXCESS,
          GRADE) 
        VALUES (PRODUCT_ID_SEQ.NEXTVAL,PIN_REACTION_ID, PIC_PROD_STRUCTURE, PIC_INCHI_KEY, PIC_PRODUCT_NAME , PIC_STRUCTURE_NO,
                PIC_YIELD, PIC_CHEMO_SELECTIVITY, PIC_DIASTEREO_SELECTIVITY,  PIC_DIASTEREOMERIC_EXCESS, PIC_ENANTIOMERIC_EXCESS,
                PIC_GRADE);
        POC_STATUS:= 'Insert Success';  
                
    ELSIF UPPER(PIC_OPTION) = 'UPDATE' THEN
    
        LN_ERR_NO:=30;
        UPDATE PRODUCTS
            SET PROD_STRUCTURE = PIC_PROD_STRUCTURE,
                INCHI_KEY  = PIC_INCHI_KEY,
                PRODUCT_NAME = PIC_PRODUCT_NAME,
                STRUCTURE_NO = PIC_STRUCTURE_NO,
                YIELD   = PIC_YIELD,
                CHEMO_SELECTIVITY     = PIC_CHEMO_SELECTIVITY,
                DIASTEREO_SELECTIVITY = PIC_DIASTEREO_SELECTIVITY,
                DIASTEREOMERIC_EXCESS = PIC_DIASTEREOMERIC_EXCESS,
                ENANTIOMERIC_EXCESS   = PIC_ENANTIOMERIC_EXCESS,
                GRADE = PIC_GRADE
         WHERE  PRODUCT_ID = PIN_PRODUCT_ID
          AND   REACTION_ID = PIN_REACTION_ID;
         POC_STATUS:= 'Update Success'; 
                  
    ELSIF UPPER(PIC_OPTION) = 'DELETE' THEN
    
        LN_ERR_NO:=40;
        DELETE FROM PRODUCTS
            WHERE PRODUCT_ID = PIN_PRODUCT_ID;                         
         POC_STATUS:= 'Delete Success';                     
    END IF;    
    
    LN_ERR_NO:=50;
    COMMIT;
    LN_ERR_NO:=60;
    
    OPEN PORC_PROUCTS FOR
        SELECT *
          FROM PRODUCTS
         WHERE REACTION_ID = PIN_REACTION_ID
         ORDER BY PRODUCT_ID; 
    
EXCEPTION
    WHEN OTHERS THEN 
    COMMON.LOG_ERROR('REACTION_ANALYSIS', 'DML_PRODUCTS', LN_ERR_NO, SQLCODE, SQLERRM);
    ROLLBACK;
    RAISE;
END DML_PRODUCTS;

PROCEDURE GET_REACTIONS_ON_DOC_ID
    (
        PIN_DOC_ID                      IN          NUMBER,
        PORC_DOCUMENTS                  OUT         SYS_REFCURSOR,
        PORC_REACTIONS                  OUT         SYS_REFCURSOR,
        PORC_REACT_REFERECNCES          OUT         SYS_REFCURSOR,
        PORC_CROSS_REACTIONS            OUT         SYS_REFCURSOR,
        PORC_REACITON_STEPS             OUT         SYS_REFCURSOR,
        PORC_CONDITIONS                 OUT         SYS_REFCURSOR,
        PORC_PARITCIPANTS               OUT         SYS_REFCURSOR,
        PORC_PRODUCTS                   OUT         SYS_REFCURSOR
    )
IS
LN_ERR_NO   NUMBER;
BEGIN
    LN_ERR_NO:=10;
    
    OPEN PORC_DOCUMENTS FOR
         SELECT *
          FROM SHIPMENT_REFERENCES SR
         WHERE SHIPMENT_REF_ID = PIN_DOC_ID
         ORDER BY SHIPMENT_REF_ID;
    
    OPEN PORC_REACTIONS FOR
         SELECT R.*
           FROM REACTIONS R
          WHERE R.DOC_ID = PIN_DOC_ID
          ORDER BY REACTION_SNO;
          
    LN_ERR_NO:=20;   
            
    OPEN PORC_REACT_REFERECNCES FOR
         SELECT RR.*
         FROM REACTIONS R
              INNER JOIN REACTION_REFERENCE RR
              ON( R.REACTION_ID = RR.REACTION_ID)
        WHERE R.DOC_ID = PIN_DOC_ID
        ORDER BY RR.RR_ID;
        
     LN_ERR_NO:=30;
     
     OPEN PORC_CROSS_REACTIONS FOR
         SELECT CR.*
         FROM REACTIONS R
              INNER JOIN CROSS_REFERENCES CR
              ON( R.REACTION_ID = CR.REACTION_ID)
        WHERE R.DOC_ID = PIN_DOC_ID
        ORDER BY CR_ID;   
        
    LN_ERR_NO:=40;                 
    
    OPEN PORC_REACITON_STEPS FOR
         SELECT RS.*
         FROM REACTIONS R
              INNER JOIN REACTION_STEPS RS
              ON( R.REACTION_ID = RS.REACTION_ID)
        WHERE R.DOC_ID = PIN_DOC_ID
        ORDER BY RS.RXN_STEP_ID;   

    LN_ERR_NO:=50;
    
     OPEN PORC_PARITCIPANTS FOR
         SELECT P.*
         FROM REACTIONS R
              INNER JOIN REACTION_STEPS RS
              ON( R.REACTION_ID = RS.REACTION_ID)
              INNER JOIN PARTICIPANTS P
              ON ( RS.RXN_STEP_ID = P.RXN_STEP_ID)
        WHERE R.DOC_ID = PIN_DOC_ID
        ORDER BY P.PRPNT_ID;
        
    LN_ERR_NO:=60;
    
      OPEN PORC_CONDITIONS FOR
         SELECT C.*
         FROM REACTIONS R
              INNER JOIN REACTION_STEPS RS
              ON( R.REACTION_ID = RS.REACTION_ID)
              INNER JOIN CONDITIONS C
              ON ( RS.RXN_STEP_ID = C.RXN_STEP_ID)
        WHERE R.DOC_ID = PIN_DOC_ID
        ORDER BY C.CONDITION_ID;  

    LN_ERR_NO:=70;
    
    OPEN PORC_PRODUCTS FOR
         SELECT P.*
           FROM REACTIONS R
                INNER JOIN PRODUCTS P
                ON ( R.REACTION_ID = P.REACTION_ID)
          WHERE R.DOC_ID = PIN_DOC_ID
          ORDER BY P.PRODUCT_ID;   
    
    LN_ERR_NO:=80;
               
EXCEPTION
    WHEN OTHERS THEN 
    COMMON.LOG_ERROR('REACTION_ANALYSIS', 'GET_REACTIONS_ON_DOC_ID', LN_ERR_NO, SQLCODE, SQLERRM);
    ROLLBACK;
    RAISE;
END GET_REACTIONS_ON_DOC_ID;  

PROCEDURE GET_SOLVENT_AGENT_DLTS
    (
        PORC_RECORDS                    OUT         SYS_REFCURSOR
    )
IS
LN_ERR_NO   NUMBER;
BEGIN
    LN_ERR_NO:=10;
    
    OPEN PORC_RECORDS FOR
        SELECT *
          FROM SOLVENT_AGENTS_MASTER
      ORDER BY SOL_AGE_ID;
    LN_ERR_NO:= 20;
             
EXCEPTION
    WHEN OTHERS THEN 
    COMMON.LOG_ERROR('REACTION_ANALYSIS', 'GET_SOLVENT_AGENT_DLTS', LN_ERR_NO, SQLCODE, SQLERRM);
    ROLLBACK;
    RAISE;         
                            
END  GET_SOLVENT_AGENT_DLTS;  

PROCEDURE DUPLICATE_REACTION_DATA
(
    PIN_SHIPMENT_REF_ID         IN              NUMBER,
    PIN_REACTION_ID	            IN              NUMBER,
    PIN_REACTION_SNO	        IN              NUMBER,
    PIN_UR_ID                   IN              NUMBER,
    PON_REACTION_ID_NEW         OUT             NUMBER
) IS

-- Duplicate Reactions Data Into Multiple Relative Tables

LN_ERR_NO               NUMBER;
LN_REACTION_ID_NEW      NUMBER;
LN_RXN_STEP_ID_NEW     NUMBER;

BEGIN

    -- Update REACTIONS Display Order Based On TAN & Display Order
    LN_ERR_NO := 10;
    UPDATE REACTIONS 
       SET REACTION_SNO = REACTION_SNO + 1
     WHERE DOC_ID = PIN_SHIPMENT_REF_ID
       AND REACTION_SNO >= PIN_REACTION_SNO;

    -- Capture New RXN_ID
    LN_ERR_NO := 20;
    LN_REACTION_ID_NEW := REACTION_ID_SEQ.NEXTVAL;

    -- Save REACTIONS Details
    LN_ERR_NO := 30;
    INSERT INTO REACTIONS (
       REACTION_ID, DOC_ID, REACTION_SCHEME, 
       REACTION_SNO, RXN_COMMENTS, RXN_MAPPING_TYPE, CREATED_BY) 
    SELECT LN_REACTION_ID_NEW, PIN_SHIPMENT_REF_ID, REACTION_SCHEME, 
           PIN_REACTION_SNO, RXN_COMMENTS, RXN_MAPPING_TYPE,
           PIN_UR_ID
      FROM REACTIONS
     WHERE REACTION_ID = PIN_REACTION_ID;
    
    -- Save PP Details
    LN_ERR_NO := 40;
    INSERT INTO PRODUCTS (
       PRODUCT_ID, REACTION_ID, PROD_STRUCTURE, 
       INCHI_KEY, PRODUCT_NAME, STRUCTURE_NO, 
       YIELD, CHEMO_SELECTIVITY, DIASTEREO_SELECTIVITY, 
       DIASTEREOMERIC_EXCESS, ENANTIOMERIC_EXCESS) 
	SELECT PRODUCT_ID_SEQ.NEXTVAL, LN_REACTION_ID_NEW, PROD_STRUCTURE, 
       	   INCHI_KEY, PRODUCT_NAME, STRUCTURE_NO,
           YIELD, CHEMO_SELECTIVITY, DIASTEREO_SELECTIVITY,
           DIASTEREOMERIC_EXCESS, ENANTIOMERIC_EXCESS
	  FROM PRODUCTS
     WHERE REACTION_ID = PIN_REACTION_ID;

    
    -- For Every RXN_STAGE_ID
    LN_ERR_NO := 60;      
    FOR I IN (
        SELECT RXN_STEP_ID 
          FROM REACTION_STEPS 
         WHERE REACTION_ID = PIN_REACTION_ID
         ORDER BY RXN_STEP_ID
    )LOOP
    
        -- Capture New RXN_STAGE_ID
        LN_ERR_NO := 70;
        LN_RXN_STEP_ID_NEW := RXN_STEP_ID_SEQ.NEXTVAL;
        
        -- Save RXN_STAGE Details With Captured New RXN_STAGE_ID, New RXN_ID
        LN_ERR_NO := 80;
        INSERT INTO REACTION_STEPS (
           RXN_STEP_ID, REACTION_ID, RXN_STEP_SNO, 
           YIELD) 
        SELECT LN_RXN_STEP_ID_NEW, LN_REACTION_ID_NEW, RXN_STEP_SNO,
        	   YIELD
          FROM REACTION_STEPS
        WHERE RXN_STEP_ID = I.RXN_STEP_ID;
        
        -- Save PP Details With Captured New RXN_STAGE_ID, New RXN_ID
        LN_ERR_NO := 90;
        INSERT INTO PARTICIPANTS (
           PRPNT_ID, RXN_STEP_ID, PRPNT_TYPE, 
           PRPNT_STRUCTURE, INCHI_KEY, PRPNT_NAME, 
           STRUCTURE_NO, GRADE) 
        SELECT PRPNT_ID_SEQ.NEXTVAL, LN_RXN_STEP_ID_NEW, PRPNT_TYPE, 
           	   PRPNT_STRUCTURE, INCHI_KEY, PRPNT_NAME,
               STRUCTURE_NO, GRADE
          FROM PARTICIPANTS
         WHERE RXN_STEP_ID = I.RXN_STEP_ID;

        -- Save Condition Detials With Captured New RXN_STAGE_ID
        LN_ERR_NO := 110;
        INSERT INTO CONDITIONS (
           CONDITION_ID, RXN_STEP_ID, COND_TIME, 
           TEMPERATURE, PRESSURE, PH, 
           IS_WARMUP, IS_COOL_DOWN, IS_REFLUX, 
           OTHER_CONDITIONS, OPERATION, COND_TIME_UNIT, 
           TEMPERATURE_UNIT, PRESSURE_UNIT) 
        SELECT CONDITION_ID_SEQ.NEXTVAL, LN_RXN_STEP_ID_NEW, COND_TIME, 
			   TEMPERATURE, PRESSURE, PH,
               IS_WARMUP, IS_COOL_DOWN, IS_REFLUX,
               OTHER_CONDITIONS, OPERATION, COND_TIME_UNIT,
               TEMPERATURE_UNIT, PRESSURE_UNIT
          FROM CONDITIONS
         WHERE RXN_STEP_ID = I.RXN_STEP_ID;
    END LOOP;        
     
    -- Report New RXN_ID
    LN_ERR_NO := 120;
    PON_REACTION_ID_NEW := LN_REACTION_ID_NEW;
        
    LN_ERR_NO := 140;
    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        COMMON.LOG_ERROR('REACTION_ANALYSIS', 'DUPLICATE_REACTION_DATA', LN_ERR_NO, SQLCODE, SQLERRM);
        ROLLBACK;

END DUPLICATE_REACTION_DATA;

PROCEDURE GET_REACTION_DATA_ON_RXN_ID
    (
        PIN_RXN_ID                 IN          NUMBER,
        PORC_RXN_DATA                 OUT         SYS_REFCURSOR
    )
IS

BEGIN

    OPEN PORC_RXN_DATA FOR
        SELECT *
          FROM REACTIONS 
         WHERE REACTION_ID = PIN_RXN_ID;       

END GET_REACTION_DATA_ON_RXN_ID;


PROCEDURE UPDATE_QC_COMPLETED_STATUS
	(
		PIN_DOC_ID				IN			NUMBER,
        PINA_RXN_IDS			IN			COMMON.PLST_NUM,
        PIN_UR_ID				IN			NUMBER,
        POC_STATUS				OUT			VARCHAR2
    )
IS

LN_LINE_NO NUMBER(6);

BEGIN

	LN_LINE_NO := 10;
	FORALL I IN 1 .. PINA_RXN_IDS.COUNT
    	UPDATE REACTIONS
           SET QC_BY = PIN_UR_ID,
               QC_ON = SYSDATE
         WHERE REACTION_ID = PINA_RXN_IDS(I);

	LN_LINE_NO := 20;
    POC_STATUS := 'SUCCESS';

EXCEPTION
    WHEN OTHERS THEN
        COMMON.LOG_ERROR('REACTION_ANALYSIS', 'UPDATE_QC_COMPLETED_STATUS', LN_LINE_NO, SQLCODE, SQLERRM);
        ROLLBACK;
        POC_STATUS := 'FALIED';
END UPDATE_QC_COMPLETED_STATUS;

PROCEDURE CHECK_DUPLICATE_REACTIONS
	(
    	PIN_SHIPMENT_REF_ID					IN		NUMBER,
        PIN_REACTION_SNO					IN		NUMBER,
        PORC_DUPLICATION_REACTIONS			OUT		COMMON.REF_CUR
    ) 
IS

LN_LINE_NO NUMBER;

BEGIN

	LN_LINE_NO := 10;
	OPEN PORC_DUPLICATION_REACTIONS FOR
    WITH REACTION_PARTICITANTS
         AS (SELECT R.DOC_ID, RS.REACTION_ID, R.REACTION_SNO,
                    RS.RXN_STEP_ID, RS.RXN_STEP_SNO, PRPNT_TYPE,
                    INCHI_KEY
               FROM REACTION_STEPS RS
                    INNER JOIN REACTIONS R ON (RS.REACTION_ID = R.REACTION_ID)
                    INNER JOIN PARTICIPANTS P ON (P.RXN_STEP_ID = RS.RXN_STEP_ID)
              WHERE R.DOC_ID = PIN_SHIPMENT_REF_ID),
         REACTION_PRODUCTS
         AS (SELECT R.DOC_ID, R.REACTION_ID, R.REACTION_SNO, 
                    P.INCHI_KEY
               FROM REACTIONS R
                    INNER JOIN PRODUCTS P ON (P.REACTION_ID = R.REACTION_ID)
              WHERE R.DOC_ID = PIN_SHIPMENT_REF_ID)
    SELECT P.REACTION_SNO
      FROM (  SELECT RP2.REACTION_SNO,
                     COUNT (CASE WHEN RP1.REACTION_ID IS NOT NULL AND RP1.REACTION_ID IS NOT NULL
                                 THEN 1 ELSE NULL END) M_CNT,
                     COUNT (RP2.REACTION_ID) F_CNT1,
                     COUNT (RP1.REACTION_ID) F_CNT2
                FROM (SELECT *
                        FROM REACTION_PARTICITANTS
                       WHERE REACTION_SNO = PIN_REACTION_SNO) RP1
                     FULL OUTER JOIN (SELECT *
                                        FROM REACTION_PARTICITANTS RP2
                                       WHERE REACTION_SNO <> PIN_REACTION_SNO) RP2
                        ON (    RP1.RXN_STEP_SNO = RP2.RXN_STEP_SNO
                            AND RP1.PRPNT_TYPE = RP2.PRPNT_TYPE
                            AND RP1.INCHI_KEY = RP2.INCHI_KEY)
            GROUP BY RP2.REACTION_SNO
              HAVING     COUNT (CASE WHEN RP1.REACTION_ID IS NOT NULL AND RP1.REACTION_ID IS NOT NULL
                                     THEN 1 ELSE NULL END) = COUNT (RP2.REACTION_ID)
                     AND COUNT (RP1.REACTION_ID) = (SELECT COUNT(1) FROM REACTION_PARTICITANTS WHERE REACTION_SNO = PIN_REACTION_SNO)) P
           INNER JOIN
           (  SELECT RP2.REACTION_SNO,
                     COUNT (CASE WHEN RP1.REACTION_ID IS NOT NULL AND RP1.REACTION_ID IS NOT NULL
                                 THEN 1 ELSE NULL END) M_CNT,
                     COUNT (RP2.REACTION_ID) F_CNT1,
                     COUNT (RP1.REACTION_ID) F_CNT2
                FROM (SELECT *
                        FROM REACTION_PRODUCTS
                       WHERE REACTION_SNO = PIN_REACTION_SNO) RP1
                     FULL OUTER JOIN (SELECT *
                                        FROM REACTION_PRODUCTS RP2
                                       WHERE REACTION_SNO <> PIN_REACTION_SNO) RP2
                        ON (RP1.INCHI_KEY = RP2.INCHI_KEY)
            GROUP BY RP2.REACTION_SNO
              HAVING     COUNT (CASE WHEN RP1.REACTION_ID IS NOT NULL AND RP1.REACTION_ID IS NOT NULL
                                     THEN 1 ELSE NULL END) = COUNT (RP2.REACTION_ID)
                     AND COUNT (RP1.REACTION_ID) = (SELECT COUNT(1) FROM REACTION_PRODUCTS WHERE REACTION_SNO = PIN_REACTION_SNO)) R
              ON (P.REACTION_SNO = R.REACTION_SNO);

	LN_LINE_NO := 20;

EXCEPTION
    WHEN OTHERS THEN
    	COMMON.LOG_ERROR('REACTION_ANALYSIS','CHECK_DUPLICATE_REACTIONS', LN_LINE_NO, SQLCODE, SQLERRM);
        RAISE;
END CHECK_DUPLICATE_REACTIONS;

END REACTION_ANALYSIS;
/

CREATE OR REPLACE PACKAGE BODY                       REACTION_CROSS_REFERENCE AS
/******************************************************************************
   NAME:       CROSS_REFERENCE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        11/07/14      VISWANATH.ETIKALA       1. Created this package body.
******************************************************************************/

PROCEDURE INSERT_PATH
	(
    	PIN_SHP_REF_ID				IN		NUMBER,
        PIC_REACTION_ID_PATH		IN		VARCHAR2,
        PIC_REACTION_SNO_PATH		IN		VARCHAR2
    ) IS
LN_REC_ID	NUMBER(10);
LN_RR_SNO	NUMBER(10);
BEGIN
	SELECT NVL(MAX(RRAT_ID), 0), NVL(MAX(PATH_NO), 0) + 1
      INTO LN_REC_ID, LN_RR_SNO
      FROM REACTION_REFERENCE_AUTO_TEMP;

	INSERT INTO REACTION_REFERENCE_AUTO_TEMP
    SELECT LN_REC_ID + S.TOKEN_NO, STARTING_REACTION_ID, STARTING_REACTION_SNO,
    	   LN_RR_SNO, S.TOKEN_NO, REACTION_ID,
           REACTION_SNO
      FROM (
            SELECT LEVEL TOKEN_NO, REGEXP_SUBSTR(PIC_REACTION_SNO_PATH,'[^->]+', 1, LEVEL) REACTION_SNO,
            	   REGEXP_SUBSTR(PIC_REACTION_SNO_PATH,'[^->]+', 1, 1) STARTING_REACTION_SNO
              FROM DUAL
            CONNECT BY REGEXP_SUBSTR(PIC_REACTION_SNO_PATH, '[^->]+', 1, LEVEL) IS NOT NULL
           ) S,
           (
            SELECT LEVEL TOKEN_NO, REGEXP_SUBSTR(PIC_REACTION_ID_PATH,'[^->]+', 1, LEVEL) REACTION_ID,
            	   REGEXP_SUBSTR(PIC_REACTION_ID_PATH,'[^->]+', 1, 1) STARTING_REACTION_ID 
              FROM DUAL
            CONNECT BY REGEXP_SUBSTR(PIC_REACTION_ID_PATH, '[^->]+', 1, LEVEL) IS NOT NULL
           ) I
	 WHERE S.TOKEN_NO = I.TOKEN_NO;

END;

PROCEDURE FIND_PATH_RECURSIVE
	(
    	PIN_SHP_REF_ID				IN		NUMBER,
        PIN_STARTING_REACTION_ID	IN		NUMBER,
        PIN_REACTION_ID				IN		NUMBER,
        PIN_REACTION_SNO			IN		NUMBER,
        PIC_REACTION_ID_PATH		IN		VARCHAR2,
        PIC_REACTION_SNO_PATH		IN		VARCHAR2
    ) IS

LN_PRD_CNT NUMBER(3);
LN_RXN_CNT	NUMBER(3);
LN_REACTION_ID NUMBER(10);

LC_REACTION_SNO_PATH	VARCHAR2(4000);
LC_REACTION_ID_PATH	VARCHAR2(4000);

BEGIN
	LN_REACTION_ID := PIN_REACTION_ID;
	
    IF PIC_REACTION_ID_PATH IS NULL THEN
    	LC_REACTION_SNO_PATH := PIN_REACTION_SNO;
        LC_REACTION_ID_PATH := PIN_REACTION_ID;
    ELSE
    	LC_REACTION_SNO_PATH := PIC_REACTION_SNO_PATH || '->' || PIN_REACTION_SNO;
        LC_REACTION_ID_PATH := PIC_REACTION_ID_PATH || '->' || PIN_REACTION_ID;
    END IF;
    
    SELECT COUNT(1)
      INTO LN_PRD_CNT
      FROM PRODUCTS
     WHERE REACTION_ID = LN_REACTION_ID;
         
    IF LN_PRD_CNT > 1 THEN
		SELECT COUNT(1)
          INTO LN_RXN_CNT
          FROM (
                SELECT R.REACTION_ID, R.REACTION_SNO
                  FROM PARTICIPANTS PR
                       INNER JOIN REACTION_STEPS RS ON (RS.RXN_STEP_ID = PR.RXN_STEP_ID)
                       INNER JOIN REACTIONS R ON (R.REACTION_ID = RS.REACTION_ID)
                 WHERE R.DOC_ID = PIN_SHP_REF_ID
                   AND R.REACTION_SNO > PIN_REACTION_SNO
                   AND PR.INCHI_KEY IN (SELECT INCHI_KEY FROM PRODUCTS P WHERE REACTION_ID = LN_REACTION_ID)
                   AND R.REACTION_SNO NOT IN (SELECT REACTION_SNO FROM REACTION_REFERENCE_AUTO_TEMP WHERE STARTING_REACTION_SNO <> PIN_STARTING_REACTION_ID)
                   AND PR.PRPNT_TYPE = 'Reactant'
                 GROUP BY R.REACTION_ID, R.REACTION_SNO
                HAVING COUNT(DISTINCT INCHI_KEY) = (SELECT COUNT(DISTINCT INCHI_KEY) FROM PRODUCTS P WHERE REACTION_ID = LN_REACTION_ID)
               );

		IF LN_RXN_CNT = 0 THEN
        	DBMS_OUTPUT.PUT_LINE(LC_REACTION_SNO_PATH);
            INSERT_PATH(PIN_SHP_REF_ID, LC_REACTION_ID_PATH, LC_REACTION_SNO_PATH);
		ELSE
            FOR J IN (
                SELECT *
                  FROM (
                        SELECT R.REACTION_ID, R.REACTION_SNO
                          FROM PARTICIPANTS PR
                               INNER JOIN REACTION_STEPS RS ON (RS.RXN_STEP_ID = PR.RXN_STEP_ID)
                               INNER JOIN REACTIONS R ON (R.REACTION_ID = RS.REACTION_ID)
                         WHERE R.DOC_ID = PIN_SHP_REF_ID
                           AND R.REACTION_SNO > PIN_REACTION_SNO
                           AND PR.INCHI_KEY IN (SELECT INCHI_KEY FROM PRODUCTS P WHERE REACTION_ID = LN_REACTION_ID)
                           AND R.REACTION_SNO NOT IN (SELECT REACTION_SNO FROM REACTION_REFERENCE_AUTO_TEMP WHERE STARTING_REACTION_SNO <> PIN_STARTING_REACTION_ID)
                           AND PR.PRPNT_TYPE = 'Reactant'
                         GROUP BY R.REACTION_ID, R.REACTION_SNO
                        HAVING COUNT(DISTINCT INCHI_KEY) = (SELECT COUNT(DISTINCT INCHI_KEY) FROM PRODUCTS P WHERE REACTION_ID = LN_REACTION_ID)
                         ORDER BY R.REACTION_SNO
                       )
                 ORDER BY REACTION_SNO
            ) LOOP
                FIND_PATH_RECURSIVE(PIN_SHP_REF_ID, PIN_STARTING_REACTION_ID, J.REACTION_ID, J.REACTION_SNO, LC_REACTION_ID_PATH, LC_REACTION_SNO_PATH);
            END LOOP;
		END IF;
     ELSE

		SELECT COUNT(1)
          INTO LN_RXN_CNT
          FROM (
                SELECT DISTINCT R.REACTION_ID, R.REACTION_SNO
                  FROM PARTICIPANTS PR
                       INNER JOIN REACTION_STEPS RS ON (RS.RXN_STEP_ID = PR.RXN_STEP_ID)
                       INNER JOIN REACTIONS R ON (R.REACTION_ID = RS.REACTION_ID)
                 WHERE R.DOC_ID = PIN_SHP_REF_ID
                   AND R.REACTION_SNO > PIN_REACTION_SNO
                   AND PR.INCHI_KEY = (SELECT INCHI_KEY FROM PRODUCTS P WHERE REACTION_ID = LN_REACTION_ID)
                   AND R.REACTION_SNO NOT IN (SELECT REACTION_SNO FROM REACTION_REFERENCE_AUTO_TEMP WHERE STARTING_REACTION_SNO <> PIN_STARTING_REACTION_ID)
                   AND PR.PRPNT_TYPE = 'Reactant'
                 ORDER BY R.REACTION_SNO
          	   );

		IF LN_RXN_CNT = 0 THEN
        	DBMS_OUTPUT.PUT_LINE(LC_REACTION_SNO_PATH);
            INSERT_PATH(PIN_SHP_REF_ID, LC_REACTION_ID_PATH, LC_REACTION_SNO_PATH);
        ELSE
            FOR J IN (
                SELECT DISTINCT R.REACTION_ID, R.REACTION_SNO
                  FROM PARTICIPANTS PR
                       INNER JOIN REACTION_STEPS RS ON (RS.RXN_STEP_ID = PR.RXN_STEP_ID)
                       INNER JOIN REACTIONS R ON (R.REACTION_ID = RS.REACTION_ID)
                 WHERE R.DOC_ID = PIN_SHP_REF_ID
                   AND R.REACTION_SNO > PIN_REACTION_SNO
                   AND PR.INCHI_KEY = (SELECT INCHI_KEY FROM PRODUCTS P WHERE REACTION_ID = LN_REACTION_ID)
                   AND R.REACTION_SNO NOT IN (SELECT REACTION_SNO FROM REACTION_REFERENCE_AUTO_TEMP WHERE STARTING_REACTION_SNO <> PIN_STARTING_REACTION_ID)
                   AND PR.PRPNT_TYPE = 'Reactant'
                 ORDER BY R.REACTION_SNO
            ) LOOP
                FIND_PATH_RECURSIVE(PIN_SHP_REF_ID, PIN_STARTING_REACTION_ID, J.REACTION_ID, J.REACTION_SNO, LC_REACTION_ID_PATH, LC_REACTION_SNO_PATH);
            END LOOP;
		END IF;
     END IF;

END;

PROCEDURE GET_RXN_CROSS_REFERENCES
	(
    	PIN_SHIPMENT_REF_ID			IN			NUMBER,
        PORC_CROSS_REFERENCES		OUT			COMMON.REF_CUR,
        PORC_RXN_REFERENCES			OUT			COMMON.REF_CUR
    ) IS

LN_LINE_NO		NUMBER;
LN_PCNT			NUMBER(5);

BEGIN
    LN_LINE_NO := 10;
	DELETE FROM REACTION_REFERENCE_AUTO_TEMP;
	
    LN_LINE_NO := 20;
    FOR I IN (
	    SELECT P_R.DOC_ID, P_R.REACTION_ID, P_R.REACTION_SNO 
          FROM REACTIONS P_R
         WHERE P_R.DOC_ID = PIN_SHIPMENT_REF_ID
         ORDER BY REACTION_SNO
	) LOOP
		
        LN_LINE_NO := 30;
        SELECT COUNT(1)
          INTO LN_PCNT
          FROM REACTION_REFERENCE_AUTO_TEMP
         WHERE REACTION_SNO = I.REACTION_SNO;
        
        IF LN_PCNT = 0 THEN
        	FIND_PATH_RECURSIVE(I.DOC_ID, I.REACTION_ID, I.REACTION_ID, I.REACTION_SNO, NULL, NULL);
        END IF;

    END LOOP; 

	OPEN PORC_CROSS_REFERENCES FOR
    SELECT REACTION_ID, REACTION_SNO, 
	   	   NTT_TO_VARCHAR2(CAST(COLLECT(TO_CHAR(reaction_sno_prev)) AS VARCHAR2_NTT), '; ', 'YES', 'YES') PRECEEDING,
       	   NTT_TO_VARCHAR2(CAST(COLLECT(TO_CHAR(reaction_sno_next)) AS VARCHAR2_NTT), '; ', 'YES', 'YES') SUCCEEDING
      FROM (SELECT DISTINCT REACTION_ID, REACTION_SNO, REACTION_SNO_PREV, REACTION_SNO_NEXT
  			  FROM (SELECT RRAT_ID, STARTING_REACTION_ID, STARTING_REACTION_SNO, RXN_SNO_IN_PATH,
	   					   REACTION_ID, REACTION_SNO,
	   					   DENSE_RANK() OVER (ORDER BY  STARTING_REACTION_SNO) EXT_REG_NO,
       					   COUNT(1) OVER (PARTITION BY PATH_NO) NO_OF_REACTIONS,
                           CHR(DENSE_RANK() OVER (PARTITION BY STARTING_REACTION_SNO ORDER BY PATH_NO) + 64) PATH_LETTER,
                           LAG(REACTION_SNO, 1) OVER (PARTITION BY PATH_NO ORDER BY RXN_SNO_IN_PATH) AS REACTION_SNO_PREV,
                           LEAD(REACTION_SNO, 1) OVER (PARTITION BY PATH_NO ORDER BY RXN_SNO_IN_PATH) AS REACTION_SNO_NEXT
                      FROM REACTION_REFERENCE_AUTO_TEMP
                   )
		   )
	 GROUP BY REACTION_ID, REACTION_SNO;

	OPEN PORC_RXN_REFERENCES FOR
    SELECT REACTION_ID, REACTION_SNO,
           EXT_REG_NO, PATH_LETTER,
           CASE WHEN NO_OF_REACTIONS = 1 THEN '1 STEP'
           ELSE RXN_SNO_IN_PATH || ' OF ' || NO_OF_REACTIONS
           END STEP
      FROM (
            SELECT RRAT_ID, STARTING_REACTION_ID, STARTING_REACTION_SNO, RXN_SNO_IN_PATH,
            	   REACTION_ID, REACTION_SNO,
                   DENSE_RANK() OVER (ORDER BY  STARTING_REACTION_SNO, CEIL(PATH_LETTER_NUM/26)) EXT_REG_NO,
                   COUNT(1) OVER (PARTITION BY PATH_NO) NO_OF_REACTIONS,
                   CHR( MOD(PATH_LETTER_NUM, 26) + (CASE WHEN MOD(PATH_LETTER_NUM, 26) = 0 THEN 26 + 64 ELSE 64 END) ) PATH_LETTER
              FROM (
              	    SELECT RR.*, DENSE_RANK() OVER (PARTITION BY STARTING_REACTION_SNO ORDER BY PATH_NO) PATH_LETTER_NUM
                      FROM REACTION_REFERENCE_AUTO_TEMP RR
                   )
           )
      ORDER BY 3, 4, 2;

/*
    SELECT REACTION_ID, REACTION_SNO,
           EXT_REG_NO, PATH_LETTER,
           CASE WHEN NO_OF_REACTIONS = 1 THEN '1 STEP'
           ELSE RXN_SNO_IN_PATH || ' OF ' || NO_OF_REACTIONS
           END STEP
      FROM (
            SELECT RRAT_ID, STARTING_REACTION_ID, STARTING_REACTION_SNO, RXN_SNO_IN_PATH,
            	   REACTION_ID, REACTION_SNO,
                   DENSE_RANK() OVER (ORDER BY  STARTING_REACTION_SNO) EXT_REG_NO,
                   COUNT(1) OVER (PARTITION BY PATH_NO) NO_OF_REACTIONS,
                   CHR(DENSE_RANK() OVER (PARTITION BY STARTING_REACTION_SNO ORDER BY PATH_NO) + 64) PATH_LETTER
              FROM REACTION_REFERENCE_AUTO_TEMP);
*/
EXCEPTION
WHEN OTHERS THEN
    COMMON.LOG_ERROR('REACTION_CROSS_REFERENCE', 'DML_DELIVERY_MASTER', LN_LINE_NO, SQLCODE, SQLERRM);
    RAISE;
END;


END REACTION_CROSS_REFERENCE;
/

CREATE OR REPLACE PACKAGE BODY                       REACTION_CROSS_REFERENCE_DEV AS
/******************************************************************************
   NAME:       CROSS_REFERENCE
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        11/07/14      VISWANATH.ETIKALA       1. Created this package body.
******************************************************************************/

PROCEDURE INSERT_PATH
	(
    	PIN_SHP_REF_ID				IN		NUMBER,
        PIC_REACTION_ID_PATH		IN		VARCHAR2,
        PIC_REACTION_SNO_PATH		IN		VARCHAR2
    ) IS
LN_REC_ID	NUMBER(10);
LN_RR_SNO	NUMBER(10);
BEGIN
	SELECT NVL(MAX(RRAT_ID), 0), NVL(MAX(PATH_NO), 0) + 1
      INTO LN_REC_ID, LN_RR_SNO
      FROM REACTION_REFERENCE_AUTO_TEMP;

	INSERT INTO REACTION_REFERENCE_AUTO_TEMP
    SELECT LN_REC_ID + S.TOKEN_NO, STARTING_REACTION_ID, STARTING_REACTION_SNO,
    	   LN_RR_SNO, S.TOKEN_NO, REACTION_ID,
           REACTION_SNO
      FROM (
            SELECT LEVEL TOKEN_NO, REGEXP_SUBSTR(PIC_REACTION_SNO_PATH,'[^->]+', 1, LEVEL) REACTION_SNO,
            	   REGEXP_SUBSTR(PIC_REACTION_SNO_PATH,'[^->]+', 1, 1) STARTING_REACTION_SNO
              FROM DUAL
            CONNECT BY REGEXP_SUBSTR(PIC_REACTION_SNO_PATH, '[^->]+', 1, LEVEL) IS NOT NULL
           ) S,
           (
            SELECT LEVEL TOKEN_NO, REGEXP_SUBSTR(PIC_REACTION_ID_PATH,'[^->]+', 1, LEVEL) REACTION_ID,
            	   REGEXP_SUBSTR(PIC_REACTION_ID_PATH,'[^->]+', 1, 1) STARTING_REACTION_ID 
              FROM DUAL
            CONNECT BY REGEXP_SUBSTR(PIC_REACTION_ID_PATH, '[^->]+', 1, LEVEL) IS NOT NULL
           ) I
	 WHERE S.TOKEN_NO = I.TOKEN_NO;

END;

PROCEDURE FIND_PATH_RECURSIVE
	(
    	PIN_SHP_REF_ID				IN		NUMBER,
        PIN_STARTING_REACTION_ID	IN		NUMBER,
        PIN_REACTION_ID				IN		NUMBER,
        PIN_REACTION_SNO			IN		NUMBER,
        PIC_REACTION_ID_PATH		IN		VARCHAR2,
        PIC_REACTION_SNO_PATH		IN		VARCHAR2
    ) IS

LN_PRD_CNT NUMBER(3);
LN_RXN_CNT	NUMBER(3);
LN_REACTION_ID NUMBER(10);

LC_REACTION_SNO_PATH	VARCHAR2(4000);
LC_REACTION_ID_PATH	VARCHAR2(4000);

BEGIN
	LN_REACTION_ID := PIN_REACTION_ID;
	
    IF PIC_REACTION_ID_PATH IS NULL THEN
    	LC_REACTION_SNO_PATH := PIN_REACTION_SNO;
        LC_REACTION_ID_PATH := PIN_REACTION_ID;
    ELSE
    	LC_REACTION_SNO_PATH := PIC_REACTION_SNO_PATH || '->' || PIN_REACTION_SNO;
        LC_REACTION_ID_PATH := PIC_REACTION_ID_PATH || '->' || PIN_REACTION_ID;
    END IF;
    
    SELECT COUNT(1)
      INTO LN_PRD_CNT
      FROM PRODUCTS
     WHERE REACTION_ID = LN_REACTION_ID;
         
    IF LN_PRD_CNT > 1 THEN
		SELECT COUNT(1)
          INTO LN_RXN_CNT
          FROM (
                SELECT R.REACTION_ID, R.REACTION_SNO
                  FROM PARTICIPANTS PR
                       INNER JOIN REACTION_STEPS RS ON (RS.RXN_STEP_ID = PR.RXN_STEP_ID)
                       INNER JOIN REACTIONS R ON (R.REACTION_ID = RS.REACTION_ID)
                 WHERE R.DOC_ID = PIN_SHP_REF_ID
                   AND R.REACTION_SNO > PIN_REACTION_SNO
                   AND PR.INCHI_KEY IN (SELECT INCHI_KEY FROM PRODUCTS P WHERE REACTION_ID = LN_REACTION_ID)
                   AND R.REACTION_SNO NOT IN (SELECT REACTION_SNO FROM REACTION_REFERENCE_AUTO_TEMP WHERE STARTING_REACTION_SNO <> PIN_STARTING_REACTION_ID)
                   AND NOT EXISTS ( SELECT 1
                                      FROM PRODUCTS IP INNER JOIN REACTIONS IR ON (IR.REACTION_ID = IP.REACTION_ID)
                                     WHERE IP.INCHI_KEY IN (SELECT IPR.INCHI_KEY
                                                             FROM PARTICIPANTS IPR
                                                                  INNER JOIN REACTION_STEPS IRS ON (IRS.RXN_STEP_ID = IPR.RXN_STEP_ID)
                                                                  INNER JOIN REACTIONS IR ON (IR.REACTION_ID = IRS.REACTION_ID)
                                                            WHERE IPR.INCHI_KEY NOT IN (SELECT INCHI_KEY FROM PRODUCTS P WHERE REACTION_ID = LN_REACTION_ID)
                                                              AND IR.REACTION_ID = R.REACTION_ID --OUTER COLUMN NAME
                                                          )
                                       AND IR.DOC_ID = PIN_SHP_REF_ID
			                   	  )
                 GROUP BY R.REACTION_ID, R.REACTION_SNO
                HAVING COUNT(DISTINCT INCHI_KEY) = (SELECT COUNT(DISTINCT INCHI_KEY) FROM PRODUCTS P WHERE REACTION_ID = LN_REACTION_ID)
               );

		IF LN_RXN_CNT = 0 THEN
        	DBMS_OUTPUT.PUT_LINE(LC_REACTION_SNO_PATH);
            INSERT_PATH(PIN_SHP_REF_ID, LC_REACTION_ID_PATH, LC_REACTION_SNO_PATH);
		ELSE
            FOR J IN (
                SELECT *
                  FROM (
                        SELECT R.REACTION_ID, R.REACTION_SNO
                          FROM PARTICIPANTS PR
                               INNER JOIN REACTION_STEPS RS ON (RS.RXN_STEP_ID = PR.RXN_STEP_ID)
                               INNER JOIN REACTIONS R ON (R.REACTION_ID = RS.REACTION_ID)
                         WHERE R.DOC_ID = PIN_SHP_REF_ID
                           AND R.REACTION_SNO > PIN_REACTION_SNO
                           AND PR.INCHI_KEY IN (SELECT INCHI_KEY FROM PRODUCTS P WHERE REACTION_ID = LN_REACTION_ID)
                           AND R.REACTION_SNO NOT IN (SELECT REACTION_SNO FROM REACTION_REFERENCE_AUTO_TEMP WHERE STARTING_REACTION_SNO <> PIN_STARTING_REACTION_ID)
                           AND NOT EXISTS ( SELECT 1
                                              FROM PRODUCTS IP INNER JOIN REACTIONS IR ON (IR.REACTION_ID = IP.REACTION_ID)
                                             WHERE IP.INCHI_KEY IN (SELECT IPR.INCHI_KEY
                                                                     FROM PARTICIPANTS IPR
                                                                          INNER JOIN REACTION_STEPS IRS ON (IRS.RXN_STEP_ID = IPR.RXN_STEP_ID)
                                                                          INNER JOIN REACTIONS IR ON (IR.REACTION_ID = IRS.REACTION_ID)
                                                                    WHERE IPR.INCHI_KEY NOT IN (SELECT INCHI_KEY FROM PRODUCTS P WHERE REACTION_ID = LN_REACTION_ID)
                                                                      AND IR.REACTION_ID = R.REACTION_ID --OUTER COLUMN NAME
                                                                  )
                                               AND IR.DOC_ID = PIN_SHP_REF_ID
                                          )
                         GROUP BY R.REACTION_ID, R.REACTION_SNO
                        HAVING COUNT(DISTINCT INCHI_KEY) = (SELECT COUNT(DISTINCT INCHI_KEY) FROM PRODUCTS P WHERE REACTION_ID = LN_REACTION_ID)
                         ORDER BY R.REACTION_SNO
                       )
                 ORDER BY REACTION_SNO
            ) LOOP
                FIND_PATH_RECURSIVE(PIN_SHP_REF_ID, PIN_STARTING_REACTION_ID, J.REACTION_ID, J.REACTION_SNO, LC_REACTION_ID_PATH, LC_REACTION_SNO_PATH);
            END LOOP;
		END IF;
    ELSE

		SELECT COUNT(1)
          INTO LN_RXN_CNT
          FROM (
                SELECT DISTINCT R.REACTION_ID, R.REACTION_SNO
                  FROM PARTICIPANTS PR
                       INNER JOIN REACTION_STEPS RS ON (RS.RXN_STEP_ID = PR.RXN_STEP_ID)
                       INNER JOIN REACTIONS R ON (R.REACTION_ID = RS.REACTION_ID)
                 WHERE R.DOC_ID = PIN_SHP_REF_ID
                   AND R.REACTION_SNO > PIN_REACTION_SNO
                   AND PR.INCHI_KEY = (SELECT INCHI_KEY FROM PRODUCTS P WHERE REACTION_ID = LN_REACTION_ID)
                   AND R.REACTION_SNO NOT IN (SELECT REACTION_SNO FROM REACTION_REFERENCE_AUTO_TEMP WHERE STARTING_REACTION_SNO <> PIN_STARTING_REACTION_ID)
                   AND NOT EXISTS ( SELECT 1
                                      FROM PRODUCTS IP INNER JOIN REACTIONS IR ON (IR.REACTION_ID = IP.REACTION_ID)
                                     WHERE IP.INCHI_KEY IN (SELECT IPR.INCHI_KEY
                                                             FROM PARTICIPANTS IPR
                                                                  INNER JOIN REACTION_STEPS IRS ON (IRS.RXN_STEP_ID = IPR.RXN_STEP_ID)
                                                                  INNER JOIN REACTIONS IR ON (IR.REACTION_ID = IRS.REACTION_ID)
                                                            WHERE IPR.INCHI_KEY NOT IN (SELECT INCHI_KEY FROM PRODUCTS P WHERE REACTION_ID = LN_REACTION_ID)
                                                              AND IR.REACTION_ID = R.REACTION_ID --OUTER COLUMN NAME
                                                          )
                                       AND IR.DOC_ID = PIN_SHP_REF_ID
			                   	  )
                 ORDER BY R.REACTION_SNO
          	   );

		IF LN_RXN_CNT = 0 THEN
        	DBMS_OUTPUT.PUT_LINE(LC_REACTION_SNO_PATH);
            INSERT_PATH(PIN_SHP_REF_ID, LC_REACTION_ID_PATH, LC_REACTION_SNO_PATH);
        ELSE
            FOR J IN (
                SELECT DISTINCT R.REACTION_ID, R.REACTION_SNO
                  FROM PARTICIPANTS PR
                       INNER JOIN REACTION_STEPS RS ON (RS.RXN_STEP_ID = PR.RXN_STEP_ID)
                       INNER JOIN REACTIONS R ON (R.REACTION_ID = RS.REACTION_ID)
                 WHERE R.DOC_ID = PIN_SHP_REF_ID
                   AND R.REACTION_SNO > PIN_REACTION_SNO
                   AND PR.INCHI_KEY = (SELECT INCHI_KEY FROM PRODUCTS P WHERE REACTION_ID = LN_REACTION_ID)
                   AND R.REACTION_SNO NOT IN (SELECT REACTION_SNO FROM REACTION_REFERENCE_AUTO_TEMP WHERE STARTING_REACTION_SNO <> PIN_STARTING_REACTION_ID)
                   AND NOT EXISTS ( SELECT 1
                                      FROM PRODUCTS IP INNER JOIN REACTIONS IR ON (IR.REACTION_ID = IP.REACTION_ID)
                                     WHERE IP.INCHI_KEY IN (SELECT IPR.INCHI_KEY
                                                             FROM PARTICIPANTS IPR
                                                                  INNER JOIN REACTION_STEPS IRS ON (IRS.RXN_STEP_ID = IPR.RXN_STEP_ID)
                                                                  INNER JOIN REACTIONS IR ON (IR.REACTION_ID = IRS.REACTION_ID)
                                                            WHERE IPR.INCHI_KEY NOT IN (SELECT INCHI_KEY FROM PRODUCTS P WHERE REACTION_ID = LN_REACTION_ID)
                                                              AND IR.REACTION_ID = R.REACTION_ID --OUTER COLUMN NAME
                                                          )
                                       AND IR.DOC_ID = PIN_SHP_REF_ID
			                   	  )
                 ORDER BY R.REACTION_SNO
            ) LOOP
                FIND_PATH_RECURSIVE(PIN_SHP_REF_ID, PIN_STARTING_REACTION_ID, J.REACTION_ID, J.REACTION_SNO, LC_REACTION_ID_PATH, LC_REACTION_SNO_PATH);
            END LOOP;
		END IF;
     END IF;

END;

PROCEDURE GET_RXN_CROSS_REFERENCES
	(
    	PIN_SHIPMENT_REF_ID			IN			NUMBER,
        PORC_CROSS_REFERENCES		OUT			COMMON.REF_CUR,
        PORC_RXN_REFERENCES			OUT			COMMON.REF_CUR
    ) IS

LN_LINE_NO		NUMBER;
LN_PCNT			NUMBER(5);

BEGIN
    LN_LINE_NO := 10;
	--DELETE FROM REACTION_REFERENCE_AUTO_TEMP;
	
    LN_LINE_NO := 20;
    FOR I IN (
	    SELECT P_R.DOC_ID, P_R.REACTION_ID, P_R.REACTION_SNO 
          FROM REACTIONS P_R
         WHERE P_R.DOC_ID = PIN_SHIPMENT_REF_ID
         ORDER BY REACTION_SNO
	) LOOP
		
        LN_LINE_NO := 30;
        SELECT COUNT(1)
          INTO LN_PCNT
          FROM REACTION_REFERENCE_AUTO_TEMP
         WHERE REACTION_SNO = I.REACTION_SNO;
        
        IF LN_PCNT = 0 THEN
        	FIND_PATH_RECURSIVE(I.DOC_ID, I.REACTION_ID, I.REACTION_ID, I.REACTION_SNO, NULL, NULL);
        END IF;

    END LOOP; 

	OPEN PORC_CROSS_REFERENCES FOR
    SELECT REACTION_ID, REACTION_SNO, 
	   	   NTT_TO_VARCHAR2(CAST(COLLECT(TO_CHAR(reaction_sno_prev)) AS VARCHAR2_NTT), '; ', 'YES', 'YES') PRECEEDING,
       	   NTT_TO_VARCHAR2(CAST(COLLECT(TO_CHAR(reaction_sno_next)) AS VARCHAR2_NTT), '; ', 'YES', 'YES') SUCCEEDING
      FROM (SELECT DISTINCT REACTION_ID, REACTION_SNO, REACTION_SNO_PREV, REACTION_SNO_NEXT
  			  FROM (SELECT RRAT_ID, STARTING_REACTION_ID, STARTING_REACTION_SNO, RXN_SNO_IN_PATH,
	   					   REACTION_ID, REACTION_SNO,
	   					   DENSE_RANK() OVER (ORDER BY  STARTING_REACTION_SNO) EXT_REG_NO,
       					   COUNT(1) OVER (PARTITION BY PATH_NO) NO_OF_REACTIONS,
                           CHR(DENSE_RANK() OVER (PARTITION BY STARTING_REACTION_SNO ORDER BY PATH_NO) + 64) PATH_LETTER,
                           LAG(REACTION_SNO, 1) OVER (PARTITION BY PATH_NO ORDER BY RXN_SNO_IN_PATH) AS REACTION_SNO_PREV,
                           LEAD(REACTION_SNO, 1) OVER (PARTITION BY PATH_NO ORDER BY RXN_SNO_IN_PATH) AS REACTION_SNO_NEXT
                      FROM REACTION_REFERENCE_AUTO_TEMP
                   )
		   )
	 GROUP BY REACTION_ID, REACTION_SNO;

	OPEN PORC_RXN_REFERENCES FOR
    SELECT REACTION_ID, REACTION_SNO,
           EXT_REG_NO, PATH_LETTER,
           CASE WHEN NO_OF_REACTIONS = 1 THEN '1 STEP'
           ELSE RXN_SNO_IN_PATH || ' OF ' || NO_OF_REACTIONS
           END STEP
      FROM (
            SELECT RRAT_ID, STARTING_REACTION_ID, STARTING_REACTION_SNO, RXN_SNO_IN_PATH,
            	   REACTION_ID, REACTION_SNO,
                   DENSE_RANK() OVER (ORDER BY  STARTING_REACTION_SNO) EXT_REG_NO,
                   COUNT(1) OVER (PARTITION BY PATH_NO) NO_OF_REACTIONS,
                   CHR(DENSE_RANK() OVER (PARTITION BY STARTING_REACTION_SNO ORDER BY PATH_NO) + 64) PATH_LETTER
              FROM REACTION_REFERENCE_AUTO_TEMP);

EXCEPTION
WHEN OTHERS THEN
    COMMON.LOG_ERROR('REACTION_CROSS_REFERENCE', 'DML_DELIVERY_MASTER', LN_LINE_NO, SQLCODE, SQLERRM);
    RAISE;
END;


END REACTION_CROSS_REFERENCE_DEV;
/

CREATE OR REPLACE PACKAGE BODY                       REPORTS AS
/******************************************************************************
   NAME:       REPORTS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        10/15/14      VISWANATH.ETIKALA       1. Created this package body.
******************************************************************************/
PROCEDURE EXPORT_SHIPMENT_REFERENCES
    (
        PIN_YEAR            IN			NUMBER,
        PIC_CLASS_TYPE		IN			VARCHAR2,
        PORC_REPORT         OUT			COMMON.REF_CUR
    )
IS

LN_ERR_NO   NUMBER;

BEGIN

    LN_ERR_NO:=10;
    OPEN PORC_REPORT FOR
    SELECT SM.SHIPMENT_ID, SM.SHIPMENT_NAME, SM.DOC_TYPE,
    	   SR.SHIPMENT_REF_ID, SR.REFERENCE_NAME, SR.SYS_TEXT,
		   SR.SYS_NO, SR.IS_DELIVERED, TM.TASK_STATUS,
           RC.REACTION_CNT
      FROM SHIPMENT_MASTER SM
      	   INNER JOIN SHIPMENT_REFERENCES SR
              ON (SR.SHIPMENT_ID = SM.SHIPMENT_ID)
           INNER JOIN TASK_MASTER TM
              ON (TM.SHIPMENT_REF_ID = SR.SHIPMENT_REF_ID AND TM.MODULE = 'RA')
           INNER JOIN
            (SELECT R.DOC_ID SHIPMENT_REF_ID, COUNT(1) REACTION_CNT 
               FROM REACTIONS R
              GROUP BY R.DOC_ID
            ) RC 
             ON (RC.SHIPMENT_REF_ID = SR.SHIPMENT_REF_ID)
     WHERE TM.TASK_STATUS = 'QC - COMPLETED'
       AND SR.IS_DELIVERED = 'N'
       AND SM.SHIPMENT_YEAR = PIN_YEAR
       AND SR.SYS_CLASS_TYPE = PIC_CLASS_TYPE
     ORDER BY SR.REFERENCE_NAME;

EXCEPTION
    WHEN OTHERS THEN
    COMMON.LOG_ERROR('REPORTS', 'EXPORT_SHIPMENT_REFERENCES' ,LN_ERR_NO, SQLCODE, SQLERRM);     
END EXPORT_SHIPMENT_REFERENCES;


PROCEDURE SHIPMENT_SUMMARY_REPORT
    (
        PIN_SHIPMENT_ID            IN            NUMBER,
        PORC_REPORT                OUT            COMMON.REF_CUR
    )
IS

LN_ERR_NO   NUMBER;

BEGIN

    LN_ERR_NO:=10;
    OPEN PORC_REPORT FOR
    SELECT SM.SHIPMENT_NAME, SR.REFERENCE_TYPE,
    	   SR.SHIPMENT_REF_ID, SR.REFERENCE_NAME, SR.SYS_TEXT,
		   SR.SYS_NO, SR.SYS_CLASS_TYPE, 
           SR.IS_DELIVERED, NVL(TM.TASK_STATUS, 'NOT ASSIGNED') TASK_STATUS,
           TAC.USER_NAME CURATION_USER_NAME,
           TAQC.USER_NAME REVIEWER_USER_NAME,
           TAQA.USER_NAME QC_USER_NAME,
           RC.REACTION_CNT
      FROM SHIPMENT_MASTER SM
      	   INNER JOIN SHIPMENT_REFERENCES SR
       	      ON (SR.SHIPMENT_ID = SM.SHIPMENT_ID)
           LEFT OUTER JOIN TASK_MASTER TM
              ON (TM.SHIPMENT_REF_ID = SR.SHIPMENT_REF_ID AND TM.MODULE = 'RA')
           LEFT OUTER JOIN ACT_TASK_ALLOC_USER_DET_V TAC
              ON (    TAC.TASK_ID = TM.TASK_ID 
                  AND TAC.ALLOCATION_TYPE = 'CURATION')
           LEFT OUTER JOIN ACT_TASK_ALLOC_USER_DET_V TAQC
              ON (    TAQC.TASK_ID = TM.TASK_ID 
                  AND TAQC.ALLOCATION_TYPE = 'REVIEW')
           LEFT OUTER JOIN ACT_TASK_ALLOC_USER_DET_V TAQA
              ON (    TAQA.TASK_ID = TM.TASK_ID 
                  AND TAQA.ALLOCATION_TYPE = 'QC')
           LEFT OUTER JOIN 
           	(SELECT R.DOC_ID SHIPMENT_REF_ID, COUNT(1) REACTION_CNT 
               FROM REACTIONS R
              GROUP BY R.DOC_ID
            ) RC 
             ON (RC.SHIPMENT_REF_ID = SR.SHIPMENT_REF_ID)
     WHERE SR.SHIPMENT_ID = PIN_SHIPMENT_ID
     ORDER BY SR.REFERENCE_NAME;

EXCEPTION
    WHEN OTHERS THEN
    COMMON.LOG_ERROR('REPORTS', 'SHIPMENT_SUMMARY_REPORT' ,LN_ERR_NO, SQLCODE, SQLERRM);     
END SHIPMENT_SUMMARY_REPORT;


PROCEDURE MONTHLY_USER_REPORT
	(
    	PID_START_DATE			IN			DATE,
        PID_END_DATE			IN			DATE,
        PIC_MODULE				IN			VARCHAR2,
        PORC_REPORT				OUT			COMMON.REF_CUR
    ) IS

LN_ERR_NO   NUMBER;
LC_QRY		VARCHAR2(10000);

BEGIN

    LN_ERR_NO := 10;
    --LC_QRY := 'SELECT * FROM TASK_MASTER';
    
    IF PIC_MODULE = 'RA' THEN    
        LC_QRY := ' 
        SELECT COALESCE(TC.UR_ID, RC.UR_ID) UR_ID,
               COALESCE(TC.USER_NAME, RC.USER_NAME) USER_NAME,
               COALESCE(TC.ROLE_NAME, RC.ROLE_NAME) ROLE_NAME,
               COALESCE(TC.COMPLETED_REF_CNT, 0) COMPLETED_REF_CNT,
               COALESCE(RC.COMPLETED_RXN_CNT, 0) COMPLETED_RXN_CNT
          FROM (SELECT UR_ID, USER_NAME, ROLE_NAME, COUNT(TASK_ALLOC_ID) COMPLETED_REF_CNT
                    FROM TASK_ALLOC_USER_DETAILS_V
                   WHERE MODULE = ''RA''
                     AND ALLOCATION_STATUS = ''COMPLETED''
                     AND TRUNC(TA_END_DATE) BETWEEN TO_DATE(''' || TO_CHAR(PID_START_DATE, 'DDMMYYYY') || 
                     ''', ''DDMMYYYY'') AND TO_DATE(''' || TO_CHAR(PID_END_DATE, 'DDMMYYYY') || ''', ''DDMMYYYY'')
                    GROUP BY UR_ID, USER_NAME, ROLE_NAME
                ) TC FULL OUTER JOIN
                (SELECT CURATED_BY UR_ID, USER_NAME, ROLE_NAME, 
                        COUNT(1) COMPLETED_RXN_CNT
                    FROM REACTIONS R
                         INNER JOIN USER_ROLE_DETAILS_V UR
                            ON (R.CURATED_BY = UR.UR_ID)
                   WHERE TRUNC(CURATED_ON) BETWEEN TO_DATE(''' || TO_CHAR(PID_START_DATE, 'DDMMYYYY') || 
                   ''', ''DDMMYYYY'') AND TO_DATE(''' || TO_CHAR(PID_END_DATE, 'DDMMYYYY') || ''', ''DDMMYYYY'')
                    GROUP BY CURATED_BY, USER_NAME, ROLE_NAME
                UNION ALL
                 SELECT REVIEWED_BY, USER_NAME, ROLE_NAME, 
                        COUNT(1)
                    FROM REACTIONS R
                         INNER JOIN USER_ROLE_DETAILS_V UR
                            ON (R.REVIEWED_BY = UR.UR_ID)
                   WHERE TRUNC(REVIEWED_ON) BETWEEN TO_DATE(''' || TO_CHAR(PID_START_DATE, 'DDMMYYYY') || 
                   ''', ''DDMMYYYY'') AND TO_DATE(''' || TO_CHAR(PID_END_DATE, 'DDMMYYYY') || ''', ''DDMMYYYY'')
                    GROUP BY REVIEWED_BY, USER_NAME, ROLE_NAME
                UNION ALL
                 SELECT QC_BY, USER_NAME, ROLE_NAME, 
                        COUNT(1)
                    FROM REACTIONS R
                         INNER JOIN USER_ROLE_DETAILS_V UR
                            ON (R.QC_BY = UR.UR_ID)
                   WHERE TRUNC(QC_ON) BETWEEN TO_DATE(''' || TO_CHAR(PID_START_DATE, 'DDMMYYYY') || 
                   ''', ''DDMMYYYY'') AND TO_DATE(''' || TO_CHAR(PID_END_DATE, 'DDMMYYYY') || ''', ''DDMMYYYY'')
                    GROUP BY QC_BY, USER_NAME, ROLE_NAME
                ) RC ON (RC.UR_ID = TC.UR_ID)
         ORDER BY CASE ROLE_NAME WHEN ''Quality Analyst'' THEN 3 WHEN ''Review Analyst'' THEN 2 ELSE 1 END, USER_NAME';    
	ELSE
        LC_QRY := ' 
        SELECT TA.UR_ID, TA.USER_NAME, TA.ROLE_NAME, COUNT(1) COMPLETED_REF_CNT
          FROM TASK_MASTER TM
               INNER JOIN ACT_TASK_ALLOC_USER_DET_V TA
                  ON (TM.TASK_ID = TA.TASK_ID)
         WHERE TA.ALLOCATION_STATUS = ''COMPLETED''
           AND TA.IS_REJECTED = ''N''
           AND TA.IS_ACTIVE = ''Y''
           AND TM.MODULE = ''' || PIC_MODULE || '''
           AND TRUNC(TA.END_DATE) >= TO_DATE(''' || TO_CHAR(PID_START_DATE, 'DDMMYYYY') || ''', ''DDMMYYYY'')
           AND TRUNC(TA.END_DATE) <= TO_DATE(''' || TO_CHAR(PID_END_DATE, 'DDMMYYYY') || ''', ''DDMMYYYY'')
         GROUP BY TA.UR_ID, TA.USER_NAME, TA.ROLE_NAME
         ORDER BY CASE ROLE_NAME WHEN ''Quality Analyst'' THEN 3 WHEN ''Review Analyst'' THEN 2 ELSE 1 END, USER_NAME';    
    END IF;
    
    DBMS_OUTPUT.PUT_LINE(LC_QRY);
    LN_ERR_NO := 20;
    OPEN PORC_REPORT FOR LC_QRY;

	LN_ERR_NO := 30;

EXCEPTION
    WHEN OTHERS THEN
    COMMON.LOG_ERROR('REPORTS', 'MONTHLY_USER_REPORT' ,LN_ERR_NO, SQLCODE, SQLERRM);     
END MONTHLY_USER_REPORT;

PROCEDURE USER_HOURLY_REPORT
	(
    	PIN_UR_ID				IN		NUMBER,
        PID_REPORT_DATE			IN		DATE,
        PORC_HOURLY_REPORT		OUT		COMMON.REF_CUR
    ) IS 

LN_LINE_NO NUMBER(5);
LC_ROLE_NAME VARCHAR2(20);

BEGIN
	LN_LINE_NO := 10;
	SELECT ROLE_NAME
      INTO LC_ROLE_NAME
      FROM USER_ROLE_DETAILS_V
     WHERE UR_ID = PIN_UR_ID;
     
	IF LC_ROLE_NAME = 'Analyst' THEN
        LN_LINE_NO := 20;
        OPEN PORC_HOURLY_REPORT FOR
        WITH DAY_HOURS AS
        (
             SELECT ROWNUM RN, TRUNC(SYSDATE) + (ROWNUM + 7 )/24 DATE_HOURS , 
                    TO_CHAR(TRUNC(SYSDATE) + (ROWNUM + 7)/24, 'HH24') HR
               FROM DUAL
            CONNECT BY ROWNUM <= 24
        )
        SELECT CO.RN, CO.HR, CREATED_CNT, COMPLETED_CNT
          FROM (
                SELECT RN, HR, COUNT(REACTION_ID) COMPLETED_CNT 
                  FROM DAY_HOURS DH
                       LEFT OUTER JOIN REACTIONS R
                       ON (HR = TO_CHAR(CURATED_ON,'HH24') AND TRUNC(CURATED_ON) = TRUNC(PID_REPORT_DATE)
                   AND CURATED_BY = PIN_UR_ID)
                 GROUP BY HR, RN) CO,
               (
                SELECT RN, HR, COUNT(REACTION_ID) CREATED_CNT
                  FROM DAY_HOURS DH
                       LEFT OUTER JOIN REACTIONS R
                       ON (HR = TO_CHAR(CREATED_ON,'HH24') AND TRUNC(CREATED_ON) = TRUNC(PID_REPORT_DATE)
                   AND CREATED_BY = PIN_UR_ID)
                 GROUP BY HR, RN
               )CR
         WHERE CO.HR = CR.HR
         ORDER BY RN;
	ELSIF LC_ROLE_NAME = 'Review Analyst' THEN

        LN_LINE_NO := 20;
        OPEN PORC_HOURLY_REPORT FOR
        WITH DAY_HOURS AS
        (
             SELECT ROWNUM RN, TRUNC(SYSDATE) + (ROWNUM + 7 )/24 DATE_HOURS , 
                    TO_CHAR(TRUNC(SYSDATE) + (ROWNUM + 7)/24, 'HH24') HR
               FROM DUAL
            CONNECT BY ROWNUM <= 24
        )
        SELECT RN, HR, COUNT(REACTION_ID) COMPLETED_CNT 
          FROM DAY_HOURS DH
               LEFT OUTER JOIN REACTIONS R
               ON (     HR = TO_CHAR(REVIEWED_ON,'HH24') 
               		AND TRUNC(REVIEWED_ON) = TRUNC(PID_REPORT_DATE) 
                    AND REVIEWED_BY = PIN_UR_ID
           		  )
         GROUP BY HR, RN
         ORDER BY RN;

	ELSE

        LN_LINE_NO := 20;
        OPEN PORC_HOURLY_REPORT FOR
        WITH DAY_HOURS AS
        (
             SELECT ROWNUM RN, TRUNC(SYSDATE) + (ROWNUM + 7 )/24 DATE_HOURS , 
                    TO_CHAR(TRUNC(SYSDATE) + (ROWNUM + 7)/24, 'HH24') HR
               FROM DUAL
            CONNECT BY ROWNUM <= 24
        )
        SELECT RN, HR, COUNT(REACTION_ID) COMPLETED_CNT 
          FROM DAY_HOURS DH
               LEFT OUTER JOIN REACTIONS R
               ON (	    HR = TO_CHAR(QC_ON,'HH24')
                    AND TRUNC(QC_ON) = TRUNC(PID_REPORT_DATE) 
                    AND QC_BY = PIN_UR_ID
           		  )
         GROUP BY HR, RN
         ORDER BY RN;

    END IF;

EXCEPTION
    WHEN OTHERS THEN
    COMMON.LOG_ERROR('REPORTS', 'USER_HOURLY_REPORT' ,LN_LINE_NO, SQLCODE, SQLERRM);     
END USER_HOURLY_REPORT;


END REPORTS;
/

CREATE OR REPLACE PACKAGE BODY                  SHIPMENTS
AS
   PROCEDURE GET_SHIPMENTS_NAMES
    (
        PORC_SHIPMENTS OUT COMMON.REF_CUR
    )
   AS
   LN_ERR_NO NUMBER;
   BEGIN
        LN_ERR_NO:=10;
      OPEN PORC_SHIPMENTS FOR
         SELECT   SHIPMENT_ID,SHIPMENT_NAME
             FROM SHIPMENT_MASTER
         ORDER BY SHIPMENT_ID;
         LN_ERR_NO:=20;
   EXCEPTION
     WHEN OTHERS THEN
         COMMON.LOG_ERROR('SHIPMENTS', 'GET_SHIPMENTS', LN_ERR_NO, SQLCODE, SQLERRM);
         ROLLBACK;
         RAISE;
   END;
   
PROCEDURE GET_SHIPMENTS
   (
        PORC_SHIPMENTS OUT COMMON.REF_CUR
   )
   AS
   LN_ERR_NO NUMBER;
   BEGIN
        LN_ERR_NO:=10;
      OPEN PORC_SHIPMENTS FOR
         SELECT   *
             FROM SHIPMENT_MASTER
         ORDER BY SHIPMENT_ID;
         LN_ERR_NO:=20;
   EXCEPTION
   WHEN OTHERS THEN
         COMMON.LOG_ERROR('SHIPMENTS', 'GET_SHIPMENTS_NAMES', LN_ERR_NO, SQLCODE, SQLERRM);
         ROLLBACK;
         RAISE;
   END;


FUNCTION SAVE_SHIPMENT (
      PIN_SHIPMENT_ID               IN   SHIPMENT_MASTER.SHIPMENT_ID%TYPE,
      PIN_SHIPMENT_NAME             IN   SHIPMENT_MASTER.SHIPMENT_NAME%TYPE,
      PIC_DOC_TYPE                  IN   SHIPMENT_MASTER.DOC_TYPE%TYPE,
      PIN_ABS_REF_COUNT             IN   SHIPMENT_MASTER.REF_COUNT%TYPE,
      PIN_SHIPMENT_YEAR				IN	 SHIPMENT_MASTER.SHIPMENT_YEAR%TYPE,
      PIN_ISSUE						IN	 SHIPMENT_MASTER.ISSUE%TYPE,
      PID_DOWNLOADED_DATE           IN   SHIPMENT_MASTER.DOWNLOADED_DATE%TYPE,
      PID_SCH_DELIVERY_DATE         IN   SHIPMENT_MASTER.SCH_DELIVERY_DATE%TYPE,
      PIC_DOWNLOADED_FILENAME       IN   SHIPMENT_MASTER.DOWNLOADED_FILENAME%TYPE,
      PIC_TASK_PREPARATION_STATUS   IN   SHIPMENT_MASTER.TASK_PREPARATION_STATUS%TYPE
   )
      RETURN NUMBER
   IS
      LN_SHIPMENT_ID   SHIPMENT_MASTER.SHIPMENT_ID%TYPE;
      LN_ERR_NO NUMBER;
   BEGIN
    BEGIN
      IF PIN_SHIPMENT_ID > 0
      THEN
         LN_SHIPMENT_ID := PIN_SHIPMENT_ID;
          LN_ERR_NO:=10;

         UPDATE SHIPMENT_MASTER
            SET SHIPMENT_NAME = PIN_SHIPMENT_NAME,
                DOC_TYPE = PIC_DOC_TYPE,
                REF_COUNT = PIN_ABS_REF_COUNT,
                DOWNLOADED_DATE = PID_DOWNLOADED_DATE,
                SCH_DELIVERY_DATE = PID_SCH_DELIVERY_DATE,
                DOWNLOADED_FILENAME = PIC_DOWNLOADED_FILENAME,
                TASK_PREPARATION_STATUS = PIC_TASK_PREPARATION_STATUS
          WHERE SHIPMENT_ID = PIN_SHIPMENT_ID;
          
      ELSE
      
         LN_ERR_NO:=20;
         INSERT INTO SHIPMENT_MASTER
                     (SHIPMENT_ID, DOC_TYPE, SHIPMENT_NAME,REF_COUNT,
                      DOWNLOADED_DATE, SCH_DELIVERY_DATE, DOWNLOADED_FILENAME, 
                      TASK_PREPARATION_STATUS, SHIPMENT_YEAR, ISSUE)
              VALUES (SHIPMENT_ID_SEQ.NEXTVAL, PIC_DOC_TYPE, PIN_SHIPMENT_NAME,PIN_ABS_REF_COUNT,
                      PID_DOWNLOADED_DATE, PID_SCH_DELIVERY_DATE, PIC_DOWNLOADED_FILENAME, 
                      PIC_TASK_PREPARATION_STATUS, PIN_SHIPMENT_YEAR, PIN_ISSUE);
                      
        INSERT INTO SHIPMENT_REFERENCES (
           SHIPMENT_REF_ID, REFERENCE_NAME, REFERENCE_TYPE)
        SELECT SHIPMENT_REF_ID_SEQ.NEXTVAL,
        	   SUBSTR(TO_CHAR(PIN_SHIPMENT_YEAR, 'FM9999'), 3, 2) || 
               TRIM(TO_CHAR(PIN_ISSUE, '09')) || '-' || 
               TRIM(TO_CHAR(RN, '009')),
               'ABSTRACT'
          FROM  ( SELECT ROWNUM RN
                    FROM DUAL
                 CONNECT BY ROWNUM <= PIN_ABS_REF_COUNT
                );
      END IF;
      
        LN_ERR_NO:=30;
        COMMIT;
        
        LN_ERR_NO:=40;
      EXCEPTION
       WHEN OTHERS THEN
        COMMON.LOG_ERROR('SHIPMENTS', 'SAVE_SHIPMENT', LN_ERR_NO, SQLCODE, SQLERRM);
         ROLLBACK;
         RAISE;
      END;

      RETURN LN_SHIPMENT_ID;
   END;
END SHIPMENTS;
/

CREATE OR REPLACE PACKAGE BODY                       SHIPMENT_MANAGEMENT 
IS
PROCEDURE SAVE_SHIPMENT (
      PIN_SHIPMENT_ID               IN   SHIPMENT_MASTER.SHIPMENT_ID%TYPE,
      PIN_SHIPMENT_NAME             IN   SHIPMENT_MASTER.SHIPMENT_NAME%TYPE,
      PIC_DOC_TYPE                  IN   SHIPMENT_MASTER.DOC_TYPE%TYPE,
      PIN_ABS_REF_COUNT             IN   SHIPMENT_MASTER.REF_COUNT%TYPE,
      PIN_SHIPMENT_YEAR				IN	 SHIPMENT_MASTER.SHIPMENT_YEAR%TYPE,
      PIN_ISSUE						IN	 SHIPMENT_MASTER.ISSUE%TYPE,
      PID_DOWNLOADED_DATE           IN   SHIPMENT_MASTER.DOWNLOADED_DATE%TYPE,
      PID_SCH_DELIVERY_DATE         IN   SHIPMENT_MASTER.SCH_DELIVERY_DATE%TYPE,
      PIC_DOWNLOADED_FILENAME       IN   SHIPMENT_MASTER.DOWNLOADED_FILENAME%TYPE,
      PIC_TASK_PREPARATION_STATUS   IN   SHIPMENT_MASTER.TASK_PREPARATION_STATUS%TYPE,
      POC_STATUS                    OUT  VARCHAR2
   )
IS
LN_SHIPMENT_ID   SHIPMENT_MASTER.SHIPMENT_ID%TYPE;
LN_ERR_NO NUMBER;
LN_COUNT  NUMBER;
BEGIN
    LN_ERR_NO:=10;
    SELECT COUNT(1) INTO LN_COUNT
      FROM SHIPMENT_MASTER
     WHERE UPPER(SHIPMENT_NAME) = UPPER(PIN_SHIPMENT_NAME);
    LN_ERR_NO:=20;         
             
         
--    BEGIN
--      IF PIN_SHIPMENT_ID > 0
--      THEN
--         LN_SHIPMENT_ID := PIN_SHIPMENT_ID;
--          LN_ERR_NO:=10;
--
--         UPDATE SHIPMENT_MASTER
--            SET SHIPMENT_NAME = PIN_SHIPMENT_NAME,
--                DOC_TYPE = PIC_DOC_TYPE,
--                REF_COUNT = PIN_ABS_REF_COUNT,
--                DOWNLOADED_DATE = PID_DOWNLOADED_DATE,
--                SCH_DELIVERY_DATE = PID_SCH_DELIVERY_DATE,
--                DOWNLOADED_FILENAME = PIC_DOWNLOADED_FILENAME,
--                TASK_PREPARATION_STATUS = PIC_TASK_PREPARATION_STATUS
--          WHERE SHIPMENT_ID = PIN_SHIPMENT_ID;
--          
--      ELSE

    IF LN_COUNT = 0 THEN       
         LN_ERR_NO:=30;
         INSERT INTO SHIPMENT_MASTER
                     (SHIPMENT_ID, DOC_TYPE, SHIPMENT_NAME,REF_COUNT,
                      DOWNLOADED_DATE, SCH_DELIVERY_DATE, DOWNLOADED_FILENAME, 
                      TASK_PREPARATION_STATUS, SHIPMENT_YEAR, ISSUE)
              VALUES (SHIPMENT_ID_SEQ.NEXTVAL, PIC_DOC_TYPE, PIN_SHIPMENT_NAME,PIN_ABS_REF_COUNT,
                      PID_DOWNLOADED_DATE, PID_SCH_DELIVERY_DATE, PIC_DOWNLOADED_FILENAME, 
                      PIC_TASK_PREPARATION_STATUS, PIN_SHIPMENT_YEAR, PIN_ISSUE)
		 RETURNING SHIPMENT_ID INTO LN_SHIPMENT_ID;
        LN_ERR_NO:=40;                      
        INSERT INTO SHIPMENT_REFERENCES (
           SHIPMENT_REF_ID, REFERENCE_NAME, REFERENCE_TYPE, SHIPMENT_ID)
        SELECT SHIPMENT_REF_ID_SEQ.NEXTVAL,
        	   SUBSTR(TO_CHAR(PIN_SHIPMENT_YEAR, 'FM9999'), 3, 2) || 
               TRIM(TO_CHAR(PIN_ISSUE, '09')) || '-' || 
               TRIM(TO_CHAR(RN, '009')),
               'ABSTRACT', LN_SHIPMENT_ID
          FROM  ( SELECT ROWNUM RN
                    FROM DUAL
                 CONNECT BY ROWNUM <= PIN_ABS_REF_COUNT
                );
        LN_ERR_NO:=50;                
        POC_STATUS:= 'INSERT SUCCESS'; 
        LN_ERR_NO:=60;                        
    ELSE
        LN_ERR_NO:=70;
        POC_STATUS:= 'DUPLICATE SHIPMENT';                
    END IF;
      
    LN_ERR_NO:=80;
    COMMIT;
    LN_ERR_NO:=90;
    
EXCEPTION
WHEN OTHERS THEN
    COMMON.LOG_ERROR('SHIPMENTS', 'SAVE_SHIPMENT', LN_ERR_NO, SQLCODE, SQLERRM);
    ROLLBACK;
    RAISE;
END SAVE_SHIPMENT;
      
   

PROCEDURE SAVE_SHIPMENT_REFERENCE
    (       
        PIN_SHIPMENT_REF_ID             IN          NUMBER,
        PIC_ABSTRACT_REF_NO             IN          VARCHAR2, 
        PIC_JOURNAL_NAME                IN          VARCHAR2,         
        PIC_DOI                         IN          VARCHAR2, 
        PIC_ZERO_RXN_STATUS             IN          CHAR,       
        PIC_FILE_NAME                   IN          VARCHAR2,
        PIC_FILE_TYPE                   IN          VARCHAR2,
        PIC_REF_FILE_NAMES              IN         VARCHAR2,
        PIC_SYS_NO                      IN          VARCHAR2,
        PIC_SYS_TEXT                    IN          VARCHAR2,  
        PIC_SYS_CLASS_TYPE              IN          VARCHAR2,     
        POC_STATUS                      OUT         VARCHAR2,
        PORC_SHIPMENT_REFS              OUT         SYS_REFCURSOR
    )        
IS
LN_ST_ID    NUMBER;
LN_ERR_NO   NUMBER;
BEGIN
    LN_ERR_NO:= 10;
       
    UPDATE SHIPMENT_REFERENCES 
       SET SYS_NO = PIC_SYS_NO,
           SYS_TEXT = PIC_SYS_TEXT,
           SYS_CLASS_TYPE = PIC_SYS_CLASS_TYPE,
           DOI = PIC_DOI,
           ZERO_REACTIONS_STATUS = PIC_ZERO_RXN_STATUS
     WHERE SHIPMENT_REF_ID = PIN_SHIPMENT_REF_ID;
         
    LN_ERR_NO:= 30;
    INSERT INTO SHIPMENT_REFERENCE_FILES
     (SHIPMENT_FILE_ID, SHIPMENT_REFERENCE_ID, FILE_NAME, FILE_TYPE, ABSTRACT_SOURCE_FILE_NAMES)
     VALUES (ST_FILE_ID_SEQ.NEXTVAL, PIN_SHIPMENT_REF_ID, PIC_FILE_NAME, PIC_FILE_TYPE, PIC_REF_FILE_NAMES);
         
     
    LN_ERR_NO:= 40;
    COMMIT;
    
    LN_ERR_NO:= 50;
    POC_STATUS:= 'UPDATE SUCCESS';
    
    OPEN PORC_SHIPMENT_REFS FOR
        SELECT * 
          FROM SHIPMENT_REFERENCES;
EXCEPTION
    WHEN OTHERS THEN 
    COMMON.LOG_ERROR('SHIPMENT_MANAGEMENT', 'SAVE_SHIPMENT_REFERENCE', LN_ERR_NO, SQLCODE, SQLERRM);
    ROLLBACK;
    RAISE;          
END SAVE_SHIPMENT_REFERENCE;

PROCEDURE GET_SHIPMENT_DLTS
    (
        PORC_SHIPMENTS                  OUT         SYS_REFCURSOR
    )
IS
LN_ERR_NO   NUMBER;
BEGIN
    LN_ERR_NO:=10;
    OPEN PORC_SHIPMENTS FOR
        SELECT *
          FROM SHIPMENT_MASTER
         ORDER BY SHIPMENT_YEAR, ISSUE;
    LN_ERR_NO:=20;          
EXCEPTION
    WHEN OTHERS THEN 
    COMMON.LOG_ERROR('SHIPMENT_MANAGEMENT', 'GET_SHIPMENT_DLTS', LN_ERR_NO, SQLCODE, SQLERRM);
    ROLLBACK;
    RAISE;  
END GET_SHIPMENT_DLTS;           
         
PROCEDURE GET_CLASSFICATION_DLTS
    (
        PORC_CLASSFICATION_DLTS         OUT         SYS_REFCURSOR,
        PORC_SYSNO_DLTS                 OUT         SYS_REFCURSOR
    )
IS
LN_ERR_NO   NUMBER;
BEGIN
    LN_ERR_NO:=10;
    
    OPEN PORC_CLASSFICATION_DLTS FOR
        SELECT *
          FROM CLASSIFICATION_MASTER;
          
    LN_ERR_NO:=20;
              
    OPEN PORC_SYSNO_DLTS FOR
        SELECT *
         FROM CLASSIFICATION_SYSNO;

    LN_ERR_NO:=30;
             
EXCEPTION
    WHEN OTHERS THEN 
    COMMON.LOG_ERROR('SHIPMENT_MANAGEMENT', 'UPDATE_UNASSINGNED_DOCID', LN_ERR_NO, SQLCODE, SQLERRM);
    ROLLBACK;
    RAISE;         
END GET_CLASSFICATION_DLTS; 

PROCEDURE GET_SHIPMENT_REFERENCES_DLTS
    (
        PIN_SHIPMENT_REF_ID             IN          NUMBER,
        PORC_SHIPMENT_REFERENCES        OUT         SYS_REFCURSOR
    )
IS
LN_ERR_NO   NUMBER;
BEGIN
    LN_ERR_NO:=10;
    
    OPEN PORC_SHIPMENT_REFERENCES FOR
        SELECT SR.*, SM.ISSUE, SM.SHIPMENT_YEAR
          FROM SHIPMENT_REFERENCES SR
               INNER JOIN SHIPMENT_MASTER SM
               ON(SM.SHIPMENT_ID = SR.SHIPMENT_ID)
         WHERE SR.SHIPMENT_REF_ID = PIN_SHIPMENT_REF_ID; 

    LN_ERR_NO:=20;          
EXCEPTION
    WHEN OTHERS THEN 
    COMMON.LOG_ERROR('SHIPMENT_MANAGEMENT', 'GET_SHIPMENT_REFERENCES_DLTS', LN_ERR_NO, SQLCODE, SQLERRM);
    ROLLBACK;
    RAISE;                                                                                     
 
END GET_SHIPMENT_REFERENCES_DLTS;


PROCEDURE UPDATE_BIBLIOGRAPHY_INFO
	(
    	PIN_SHIPMENT_REF_ID			IN		NUMBER,
        PIC_JOURNAL_NAME 			IN		VARCHAR2,
        PIN_JOURNAL_YEAR			IN		NUMBER,
        PIC_VOLUME					IN		VARCHAR2,
        PIC_ISSUE					IN		VARCHAR2,
        PIC_START_PAGE				IN		VARCHAR2,
        PIC_END_PAGE				IN		VARCHAR2,
        PIC_DOI						IN		VARCHAR2,
        PORC_SHIPMENT_REFERENCES    OUT     SYS_REFCURSOR
    )
IS

LN_LINE_NO		NUMBER(10);

BEGIN
	
	IF PIC_JOURNAL_NAME IS NOT NULL THEN
        LN_LINE_NO := 10;
        UPDATE SHIPMENT_REFERENCES
           SET JOURNAL_NAME = PIC_JOURNAL_NAME,
               JOURNAL_YEAR = PIN_JOURNAL_YEAR,
               ISSUE = PIC_ISSUE,
               START_PAGE = PIC_START_PAGE,
               END_PAGE = PIC_END_PAGE,
               VOLUME = PIC_VOLUME,
               DOI = PIC_DOI 
         WHERE SHIPMENT_REF_ID = PIN_SHIPMENT_REF_ID;

        LN_LINE_NO := 20;
        COMMIT;
	END IF;

	LN_LINE_NO := 30;
	OPEN PORC_SHIPMENT_REFERENCES FOR
   	SELECT *
      FROM SHIPMENT_REFERENCES
     WHERE SHIPMENT_REF_ID = PIN_SHIPMENT_REF_ID;

EXCEPTION
    WHEN OTHERS THEN 
    COMMON.LOG_ERROR('SHIPMENT_MANAGEMENT', 'UPDATE_BIBLIOGRAPHY_INFO', LN_LINE_NO, SQLCODE, SQLERRM);
    ROLLBACK;
    RAISE;                                                                                     
 
END UPDATE_BIBLIOGRAPHY_INFO;


END SHIPMENT_MANAGEMENT;
/

CREATE OR REPLACE PACKAGE BODY                       TASK_MANAGEMENT
IS
PROCEDURE GET_MODULE_SHIPMENTS
	(
		PIC_MODULE					IN		VARCHAR2,
        PORC_SHIPMENTS				OUT		COMMON.REF_CUR
    ) IS


LN_LINE_NO		NUMBER(5);
BEGIN

	LN_LINE_NO := 10;
	OPEN PORC_SHIPMENTS FOR
    SELECT *
      FROM SHIPMENT_MASTER
     WHERE ((TASK_PREPARATION_STATUS = 'N' AND PIC_MODULE = 'TP')
        OR	(TASK_PREPARATION_STATUS = 'Y' AND PIC_MODULE <> 'TP'));

EXCEPTION
WHEN OTHERS THEN
    COMMON.LOG_ERROR('TASK_MANAGEMENT', 'GET_MODULE_SHIPMENTS', LN_LINE_NO, SQLCODE, SQLERRM);
END;

PROCEDURE GET_USER_TASK_CNTS
	(
        PIC_MODULE				IN      VARCHAR2,
        PORC_MODULE_USER		OUT		COMMON.REF_CUR,
        PORC_USER_TASK_CNTS		OUT		COMMON.REF_CUR
    )
IS

LN_ERR_NO            NUMBER;

BEGIN

	LN_ERR_NO := 10;
    OPEN PORC_MODULE_USER FOR
    SELECT *
      FROM TEAM_USER_DETAILS_V
     WHERE IS_ACTIVE = 'Y'
       AND MODULE = PIC_MODULE
     ORDER BY ANLST_NAME;
    
    LN_ERR_NO := 20;
    OPEN PORC_USER_TASK_CNTS FOR
    	SELECT UR.UR_ID, UR.USER_NAME, UR.ROLE_NAME,
        	   COUNT(CASE WHEN ALLOCATION_STATUS = 'ASSIGNED'  THEN 1 ELSE NULL END) ASSIGNED_CNT,
               COUNT(CASE WHEN ALLOCATION_STATUS = 'PROGRESS'  THEN 1 ELSE NULL END) PROGRESS_CNT
          FROM USER_ROLE_DETAILS_V UR
               LEFT OUTER JOIN TASK_ALLOCATION TA
                  ON (UR.UR_ID = TA.UR_ID)
          	   LEFT OUTER JOIN TASK_MASTER TM
               	  ON (TA.TASK_ID = TM.TASK_ID)
         WHERE UR.IS_ACTIVE = 'Y'
           AND UR.MODULE = PIC_MODULE 
           AND UR.ROLE_NAME IN ('Analyst', 'Quality Analyst', 'Review Analyst')
		 GROUP BY UR.UR_ID, UR.USER_NAME, UR.ROLE_NAME; 

EXCEPTION
    WHEN OTHERS THEN 
    COMMON.LOG_ERROR('TASK_MANAGEMENT', 'GET_USER_TASK_CNTS', LN_ERR_NO, SQLCODE , SQLERRM);
    RAISE;
END GET_USER_TASK_CNTS;

PROCEDURE GET_UNASSIGNED_REFS
	(
        PIC_MODULE				IN      VARCHAR2,
        PIN_SHIPMENT_ID			IN      NUMBER,
        PORC_REFS				OUT		COMMON.REF_CUR
    )
IS

LN_ERR_NO            NUMBER;

BEGIN

	LN_ERR_NO := 10;
    OPEN PORC_REFS FOR
    SELECT SR.SHIPMENT_REF_ID, SR.REFERENCE_NAME, SR.SYS_CLASS_TYPE 
      FROM SHIPMENT_REFERENCES SR
           LEFT OUTER JOIN TASK_MASTER TA
              ON (TA.SHIPMENT_REF_ID = SR.SHIPMENT_REF_ID 
                  AND TA.MODULE = PIC_MODULE)
     WHERE (TA.TASK_ID IS NULL OR TA.TASK_STATUS = 'NOT ASSIGNED')
       AND SR.SHIPMENT_ID = PIN_SHIPMENT_ID
       AND SR.ZERO_REACTIONS_STATUS = 'N'; 

EXCEPTION
    WHEN OTHERS THEN 
    COMMON.LOG_ERROR('TASK_MANAGEMENT', 'GET_UNASSIGNED_REFS', LN_ERR_NO, SQLCODE , SQLERRM);
    RAISE;
END GET_UNASSIGNED_REFS;

PROCEDURE GET_SHIPMENT_REF_DETAILS
	(
        PIC_MODULE				IN      VARCHAR2,
        PIN_SHIPMENT_ID			IN      NUMBER,
        PORC_REFS				OUT		COMMON.REF_CUR
    )
IS

LN_ERR_NO            NUMBER;

BEGIN

	LN_ERR_NO := 10;
    OPEN PORC_REFS FOR
    	WITH ALLOCATION_USERS AS
        	(SELECT TA.TASK_ID, TA.UR_ID, UR.USER_NAME, TA.ALLOCATION_TYPE
               FROM TASK_ALLOCATION TA
               		INNER JOIN USER_ROLE_DETAILS_V UR
                       ON (UR.UR_ID = TA.UR_ID)
              WHERE TA.IS_ACTIVE = 'Y' 
             )
    	SELECT SR.SHIPMENT_REF_ID, SR.REFERENCE_NAME, TM.TASK_STATUS,
        	   UC.USER_NAME ANALYST, URE.USER_NAME REVIEW_ANALYST,
               UQ.USER_NAME QUALITY_ANALYST
          FROM TASK_MASTER TM
          	   INNER JOIN SHIPMENT_REFERENCES SR
                  ON (SR.SHIPMENT_REF_ID = TM.SHIPMENT_REF_ID)
               INNER JOIN ALLOCATION_USERS UC
                  ON (    UC.TASK_ID = TM.TASK_ID 
                  	  AND UC.ALLOCATION_TYPE = 'CURATION')
               LEFT OUTER JOIN ALLOCATION_USERS URE
                  ON (    URE.TASK_ID = TM.TASK_ID 
                  	  AND URE.ALLOCATION_TYPE = 'REVIEW')
               LEFT OUTER JOIN ALLOCATION_USERS UQ
                  ON (    UQ.TASK_ID = TM.TASK_ID 
                  	  AND UQ.ALLOCATION_TYPE = 'QC')
		 WHERE SR.SHIPMENT_ID = PIN_SHIPMENT_ID
           AND TM.MODULE = PIC_MODULE; 

EXCEPTION
    WHEN OTHERS THEN 
    COMMON.LOG_ERROR('TASK_MANAGEMENT', 'GET_SHIPMENT_REF_DETAILS', LN_ERR_NO, SQLCODE , SQLERRM);
    RAISE;
END GET_SHIPMENT_REF_DETAILS;


PROCEDURE TASK_ALLOC_TO_CURATION
    (
        PIC_MODULE				IN      VARCHAR2,
        PIN_SHIPMENT_ID			IN      NUMBER,
        PIN_TEAM_USER_ID		IN      NUMBER,
        PINA_SHPMT_REF_IDS		IN      COMMON.PLST_NUM
     )
IS

LNA_SHPMT_REF_IDS           NUMBER_NTT := NUMBER_NTT();

LN_TOOL_MGR_UR_ID    NUMBER;
LN_QUAL_ANLST_UR_ID  NUMBER;
LN_REV_ANLST_UR_ID   NUMBER;
LN_ANLST_UR_ID       NUMBER;

LN_ERR_NO            NUMBER;

BEGIN
    LN_ERR_NO := 10;
    FOR I IN PINA_SHPMT_REF_IDS.FIRST..PINA_SHPMT_REF_IDS.LAST
    LOOP
    	LNA_SHPMT_REF_IDS.EXTEND(1);
    	LNA_SHPMT_REF_IDS(I) := PINA_SHPMT_REF_IDS(I);
    END LOOP;

    LN_ERR_NO := 20;
    SELECT TOOL_MGR_UR_ID, QUAL_ANLST_UR_ID, REV_ANLST_UR_ID , 
    	   ANLST_UR_ID
      INTO LN_TOOL_MGR_UR_ID, LN_QUAL_ANLST_UR_ID, LN_REV_ANLST_UR_ID, 
    	   LN_ANLST_UR_ID
      FROM TEAM_USERS TU
     WHERE TU.TEAM_USER_ID = PIN_TEAM_USER_ID;

	LN_ERR_NO := 30;
    UPDATE TASK_MASTER
       SET TASK_STATUS = 'CURATION - ASSIGNED'
     WHERE SHIPMENT_REF_ID IN (SELECT COLUMN_VALUE FROM TABLE(LNA_SHPMT_REF_IDS));


    LN_ERR_NO := 40;    
    INSERT INTO TASK_MASTER
        (TASK_ID, SHIPMENT_ID, 
         MODULE, SHIPMENT_REF_ID, TOOL_MGR_UR_ID, 
         START_DATE,  TASK_STATUS, TEAM_USER_ID)      
    SELECT TASK_ID_SEQ.NEXTVAL, PIN_SHIPMENT_ID, 
    	   PIC_MODULE, T.COLUMN_VALUE SHIPMENT_REF_ID, LN_TOOL_MGR_UR_ID,
           SYSDATE, 'CURATION - ASSIGNED', PIN_TEAM_USER_ID
      FROM TABLE(LNA_SHPMT_REF_IDS) T
     WHERE NOT EXISTS (SELECT 1 FROM TASK_MASTER WHERE SHIPMENT_REF_ID = T.COLUMN_VALUE AND MODULE = PIC_MODULE);

    LN_ERR_NO := 50;     
    INSERT INTO TASK_ALLOCATION
        (TASK_ALLOC_ID, TASK_ID, UR_ID, 
         ALLOCATION_STATUS, ALLOCATION_TYPE) 
    SELECT TASK_ALLOC_ID_SEQ.NEXTVAL,TM.TASK_ID, LN_ANLST_UR_ID UR_ID,
    	   'ASSIGNED' STATUS, 'CURATION' ALLOCATION_TYPE 
      FROM TASK_MASTER TM
    	   INNER JOIN TABLE(LNA_SHPMT_REF_IDS) T
    		  ON (TM.SHIPMENT_REF_ID = T.COLUMN_VALUE)
     WHERE TM.MODULE = PIC_MODULE;
               
    LN_ERR_NO := 60;
    INSERT INTO TASK_ALLOCATION
        (TASK_ALLOC_ID, TASK_ID, UR_ID, 
         ALLOCATION_STATUS, ALLOCATION_TYPE)    
    SELECT TASK_ALLOC_ID_SEQ.NEXTVAL,TM.TASK_ID, LN_REV_ANLST_UR_ID,
    	   NULL, 'REVIEW' ALLOCATION_TYPE 
      FROM TASK_MASTER TM
    	   INNER JOIN TABLE(LNA_SHPMT_REF_IDS) T
    		  ON (TM.SHIPMENT_REF_ID = T.COLUMN_VALUE)
     WHERE TM.MODULE = PIC_MODULE;
                          
    LN_ERR_NO := 70;
    INSERT INTO TASK_ALLOCATION
        (TASK_ALLOC_ID, TASK_ID, UR_ID, 
         ALLOCATION_STATUS, ALLOCATION_TYPE)
    SELECT TASK_ALLOC_ID_SEQ.NEXTVAL,TM.TASK_ID, LN_QUAL_ANLST_UR_ID,
    	   NULL, 'QC' ALLOCATION_TYPE 
      FROM TASK_MASTER TM
    	   INNER JOIN TABLE(LNA_SHPMT_REF_IDS) T
    		  ON (TM.SHIPMENT_REF_ID = T.COLUMN_VALUE)
     WHERE TM.MODULE = PIC_MODULE;
             
    COMMIT;
    LN_ERR_NO := 80;

EXCEPTION
    WHEN OTHERS THEN 
    COMMON.LOG_ERROR('TASK_MANAGEMENT', 'TASK_ALLOC_TO_CURATION', LN_ERR_NO, SQLCODE , SQLERRM);
    RAISE;
END TASK_ALLOC_TO_CURATION;

PROCEDURE GET_USER_TASKS
    (
        PIC_MODULE				IN      VARCHAR2,
        PIN_UR_ID               IN      NUMBER,
        PORC_RECORDS            OUT     SYS_REFCURSOR
     )
IS

LC_ROLE_NAME    VARCHAR2(30);
LN_ERR_NO	    NUMBER;

BEGIN
	LN_ERR_NO := 10;
    SELECT ROLE_NAME INTO LC_ROLE_NAME
     FROM USER_ROLE_DETAILS_V RM
     WHERE RM.UR_ID= PIN_UR_ID;
    
    LN_ERR_NO := 20;
    IF UPPER(LC_ROLE_NAME) = 'ANALYST' THEN
        
        OPEN PORC_RECORDS FOR 
        SELECT TM.MODULE, SM.SHIPMENT_ID, SM.SHIPMENT_YEAR, SM.ISSUE,
               SM.SHIPMENT_NAME, SR.REFERENCE_TYPE DOC_TYPE, 
               URDM.USER_ID, URDM.USER_NAME MGR_USER_NAME, 
               TA.TASK_ID, TA.TASK_ALLOC_ID, SR.SHIPMENT_REF_ID, 
               SR.REFERENCE_NAME, SR.SYS_CLASS_TYPE, TA.START_DATE ANA_START_DATE, TA.END_DATE ANA_END_DATE,
               TA.ALLOCATION_STATUS ANA_STATUS, TA.IS_REASSIGNED, TA.IS_REJECTED, 
               TM.TASK_STATUS, RC.REACTION_CNT
          FROM USER_ROLE_DETAILS_V URDM,
               TASK_MASTER TM,
               TASK_ALLOCATION TA,
               SHIPMENT_REFERENCES SR,
               SHIPMENT_MASTER SM,
               (SELECT SR.SHIPMENT_REF_ID, COUNT(1) REACTION_CNT 
  				  FROM SHIPMENT_REFERENCES SR,
  	   				   REACTIONS R
 				 WHERE SR.SHIPMENT_REF_ID = R.DOC_ID
                 GROUP BY SR.SHIPMENT_REF_ID
               ) RC
         WHERE TM.TASK_ID = TA.TASK_ID
           AND URDM.UR_ID = TA.UR_ID
           AND SR.SHIPMENT_REF_ID = TM.SHIPMENT_REF_ID
           AND SM.SHIPMENT_ID = SR.SHIPMENT_ID
           AND TM.SHIPMENT_REF_ID = RC.SHIPMENT_REF_ID(+)
           AND TA.ALLOCATION_TYPE = 'CURATION'
           AND TA.IS_ACTIVE = 'Y'
           AND TA.ALLOCATION_STATUS IN ('ASSIGNED', 'PROGRESS')
           AND TA.UR_ID = PIN_UR_ID
           AND TM.MODULE = PIC_MODULE
         ORDER BY SR.REFERENCE_NAME;
           
    ELSIF UPPER(LC_ROLE_NAME) = 'REVIEW ANALYST' THEN
        OPEN PORC_RECORDS FOR          
           SELECT TM.MODULE, SM.SHIPMENT_ID,  SM.SHIPMENT_YEAR, SM.ISSUE,
                  SM.SHIPMENT_NAME, SR.REFERENCE_TYPE DOC_TYPE,
                  URDM.USER_ID, URDM.USER_NAME MGR_USER_NAME, 
                  TM.TOOL_MGR_UR_ID, TA.TASK_ID, TA.TASK_ALLOC_ID, TA.UR_ID, 
                  SR.SHIPMENT_REF_ID, SR.REFERENCE_NAME, SR.SYS_CLASS_TYPE,
                  TA.START_DATE REV_ANA_START_DATE, TA.END_DATE REV_ANA_END_DATE, TA.ALLOCATION_STATUS REV_ANA_STATUS, 
                  TA.IS_REASSIGNED, TA.IS_REJECTED, TM.TASK_STATUS, URDC.USER_NAME ANALYST,
                  TAC.START_DATE ANAL_START_DATE,TAC.END_DATE ANAL_END_DATE,
                  TAC.ALLOCATION_STATUS ANA_STATUS, RC.REACTION_CNT 
             FROM TASK_ALLOCATION TA,
                  TASK_MASTER TM,
                  SHIPMENT_REFERENCES SR,
                  SHIPMENT_MASTER SM,
                  USER_ROLE_DETAILS_V URDM,
                  TASK_ALLOCATION TAC,
                  USER_ROLE_DETAILS_V URDC,
                  ( SELECT SR.SHIPMENT_REF_ID, COUNT(1) REACTION_CNT 
                      FROM SHIPMENT_REFERENCES SR,
                           REACTIONS R
                     WHERE SR.SHIPMENT_REF_ID = R.DOC_ID
                     GROUP BY SR.SHIPMENT_REF_ID
                  ) RC
            WHERE TA.TASK_ID = TM.TASK_ID
              AND SR.SHIPMENT_REF_ID = TM.SHIPMENT_REF_ID
              AND SM.SHIPMENT_ID = SR.SHIPMENT_ID
              AND URDM.UR_ID = TM.TOOL_MGR_UR_ID
              AND TM.TASK_ID = TAC.TASK_ID
              AND URDC.UR_ID = TAC.UR_ID
              AND TM.SHIPMENT_REF_ID = RC.SHIPMENT_REF_ID(+)
              AND TAC.ALLOCATION_TYPE = 'CURATION'
              AND TA.ALLOCATION_TYPE = 'REVIEW'
              AND TA.IS_ACTIVE = 'Y'
              AND TAC.IS_ACTIVE = 'Y'
              AND TA.ALLOCATION_STATUS IN ('ASSIGNED', 'PROGRESS')
              AND TA.UR_ID = PIN_UR_ID
              AND TM.MODULE = PIC_MODULE
            ORDER BY SR.REFERENCE_NAME;

    ELSIF  UPPER(LC_ROLE_NAME) = 'QUALITY ANALYST' THEN
		NULL; 
        OPEN PORC_RECORDS FOR 
           SELECT TM.MODULE, SM.SHIPMENT_ID,  SM.SHIPMENT_YEAR, SM.ISSUE,
                  SM.SHIPMENT_NAME, SR.REFERENCE_TYPE DOC_TYPE,
                  URDM.USER_ID, URDM.USER_NAME MGR_USER_NAME, 
                  TM.TOOL_MGR_UR_ID, TM.TASK_STATUS, TA.TASK_ID, TA.TASK_ALLOC_ID, TA.UR_ID,  
                  SR.SHIPMENT_REF_ID, SR.REFERENCE_NAME, SR.SYS_CLASS_TYPE, 
                  TA.START_DATE, TA.IS_REASSIGNED, TA.IS_REJECTED,
                  TA.START_DATE QUA_ANA_START_DATE, TA.END_DATE QUA_ANA_END_DATE, TA.ALLOCATION_STATUS QUA_ANA_STATUS,
                  URDC.USER_NAME ANALYST, TAC.START_DATE ANAL_START_DATE ,TAC.END_DATE ANAL_END_DATE,TAC.ALLOCATION_STATUS ANA_STATUS,
                  URDR.USER_NAME REV_ANALYST, TAR.START_DATE REV_START_DATE ,TAR.END_DATE REV_ANA_END_DATE, TAR.ALLOCATION_STATUS REV_ANA_STATUS,
                  RC.REACTION_CNT
             FROM TASK_ALLOCATION TA,
                  TASK_MASTER TM,
                  SHIPMENT_REFERENCES SR,
                  SHIPMENT_MASTER SM,
                  USER_ROLE_DETAILS_V URDM,
                  TASK_ALLOCATION TAC,
                  USER_ROLE_DETAILS_V URDC,
                  TASK_ALLOCATION TAR,
                  USER_ROLE_DETAILS_V URDR,
                  ( SELECT SR.SHIPMENT_REF_ID, COUNT(1) REACTION_CNT 
                      FROM SHIPMENT_REFERENCES SR,
                           REACTIONS R
                     WHERE SR.SHIPMENT_REF_ID = R.DOC_ID
                     GROUP BY SR.SHIPMENT_REF_ID
                  ) RC
            WHERE TA.TASK_ID = TM.TASK_ID
              AND SR.SHIPMENT_REF_ID = TM.SHIPMENT_REF_ID
              AND SM.SHIPMENT_ID = SR.SHIPMENT_ID
              AND TM.TOOL_MGR_UR_ID = URDM.UR_ID
              AND TM.TASK_ID = TAC.TASK_ID
              AND URDC.UR_ID = TAC.UR_ID
              AND TM.TASK_ID = TAR.TASK_ID
              AND URDR.UR_ID = TAR.UR_ID
              AND TM.SHIPMENT_REF_ID = RC.SHIPMENT_REF_ID(+)
              AND TA.ALLOCATION_TYPE='QC'
              AND TAC.ALLOCATION_TYPE = 'CURATION'
              AND TAR.ALLOCATION_TYPE = 'REVIEW'
              AND TA.IS_ACTIVE = 'Y'
              AND TAC.IS_ACTIVE = 'Y'
              AND TAR.IS_ACTIVE = 'Y'
              AND TA.ALLOCATION_STATUS IN ('ASSIGNED', 'PROGRESS')
              AND TA.UR_ID = PIN_UR_ID
              AND TM.MODULE = PIC_MODULE
            ORDER BY SR.REFERENCE_NAME;
              
    END IF;

	LN_ERR_NO := 30;

EXCEPTION
    WHEN OTHERS THEN 
    COMMON.LOG_ERROR('TASK_MANAGEMENT', 'GET_USER_TASKS', LN_ERR_NO, SQLCODE , SQLERRM);
    RAISE;   
END GET_USER_TASKS;

FUNCTION REJECTION_ALLOCATION
	(
    	PIN_TASK_ID					IN			NUMBER,
        PIC_ALLOCATION_TYPE			IN			VARCHAR2,
        PIC_ALLOCATION_STATUS		IN			VARCHAR2,
        PIC_IS_REJECTION			IN			CHAR
    ) RETURN NUMBER
IS
LN_ERR_NO        NUMBER;
LN_UR_ID		 NUMBER;

LN_ACT_TA_ID	 NUMBER;

BEGIN
	UPDATE TASK_ALLOCATION
       SET IS_ACTIVE = 'N'
     WHERE TASK_ID = PIN_TASK_ID
       AND ALLOCATION_TYPE = PIC_ALLOCATION_TYPE
       AND IS_ACTIVE = 'Y'
   RETURNING UR_ID INTO LN_UR_ID;
   
   INSERT INTO TASK_ALLOCATION(TASK_ALLOC_ID, TASK_ID, UR_ID, 
   		ALLOCATION_TYPE, ALLOCATION_STATUS, IS_REJECTED)
   VALUES (TASK_ALLOC_ID_SEQ.NEXTVAL, PIN_TASK_ID, LN_UR_ID, 
   		   PIC_ALLOCATION_TYPE, PIC_ALLOCATION_STATUS, PIC_IS_REJECTION)
   RETURNING TASK_ALLOC_ID INTO LN_ACT_TA_ID;
   
   RETURN LN_ACT_TA_ID;
   
EXCEPTION
    WHEN OTHERS THEN 
    COMMON.LOG_ERROR('TASK_MANAGEMENT', 'GET_BATCH_TAN_DETAILS', LN_ERR_NO, SQLCODE , SQLERRM);
    RAISE;
END;

PROCEDURE UPDATE_TASK_STATUS_NOCOMMIT
    (
		PIN_TASK_ID					IN        NUMBER,
        PIN_TASK_ALLOC_ID			IN        NUMBER,
        PIN_UR_ID					IN        NUMBER,
        PIC_STATUS					IN        VARCHAR2,
        PIC_REMARKS					IN        VARCHAR2
    )
IS

LN_ERR_NO        NUMBER;
LC_ROLE_NAME    VARCHAR2(30);

LN_ACT_TA_ID		NUMBER;
LN_ACT_TA_ID_TMP	NUMBER;

LN_UR_ID_NTM			NUMBER(10);
LC_USER_NAME_NTM	VARCHAR2(100);

BEGIN
    LN_ERR_NO := 10;
	LN_ACT_TA_ID := PIN_TASK_ALLOC_ID;
    SELECT ROLE_NAME
      INTO LC_ROLE_NAME
      FROM USER_ROLE_DETAILS_V
     WHERE UR_ID = PIN_UR_ID;

    LN_ERR_NO := 20;
    UPDATE TASK_ALLOCATION
       SET ALLOCATION_STATUS = DECODE(PIC_STATUS, 'SET PROGRESS', 'PROGRESS', 'SET COMPLETE', 'COMPLETED',
       									'SET REJECT', 'REJECTED', 
       									ALLOCATION_STATUS),
           START_DATE = DECODE(PIC_STATUS, 'SET PROGRESS', SYSDATE, START_DATE),
           END_DATE = CASE WHEN PIC_STATUS IN ('SET COMPLETE', 'SET REJECT') THEN SYSDATE ELSE END_DATE END
     WHERE TASK_ALLOC_ID = LN_ACT_TA_ID;

	IF PIC_STATUS = 'SET COMPLETE' THEN
        LN_ERR_NO := 30;
        UPDATE TASK_COMMENTS
           SET IS_LATEST = 'N'
         WHERE TASK_ID = PIN_TASK_ID
           AND IS_LATEST = 'Y';

        LN_ERR_NO := 40;
        INSERT INTO TASK_COMMENTS (
           TASK_COM_ID, TASK_ID, TASK_ALLOC_ID, 
           UR_ID, USER_COMMENT, IS_LATEST) 
        VALUES(TASK_COM_ID_SEQ.NEXTVAL, PIN_TASK_ID, PIN_TASK_ALLOC_ID,
           PIN_UR_ID, PIC_REMARKS, 'Y');
	END IF;

    IF PIC_STATUS = 'SET REJECT' THEN
		
    	IF LC_ROLE_NAME = 'Review Analyst' THEN 
        	LN_ERR_NO := 60;
            LN_ACT_TA_ID := REJECTION_ALLOCATION(PIN_TASK_ID, 'CURATION', 'ASSIGNED', 'Y');
            
            LN_ERR_NO := 70;
            LN_ACT_TA_ID_TMP := REJECTION_ALLOCATION(PIN_TASK_ID, 'REVIEW', NULL, 'N');
        ELSE 
        	LN_ERR_NO := 80;
            LN_ACT_TA_ID := REJECTION_ALLOCATION(PIN_TASK_ID, 'REVIEW', 'ASSIGNED', 'Y');
            
            LN_ERR_NO := 90;
            LN_ACT_TA_ID_TMP := REJECTION_ALLOCATION(PIN_TASK_ID, 'QC', NULL, 'N');
        END IF;

    ELSIF LC_ROLE_NAME IN ('Analyst', 'Review Analyst') AND PIC_STATUS = 'SET COMPLETE' THEN
        LN_ERR_NO := 50;
        UPDATE TASK_ALLOCATION
           SET ALLOCATION_STATUS = 'ASSIGNED'
         WHERE TASK_ID = PIN_TASK_ID
           AND ((ALLOCATION_TYPE = 'REVIEW' AND LC_ROLE_NAME = 'Analyst')
            OR (ALLOCATION_TYPE = 'QC' AND LC_ROLE_NAME = 'Review Analyst')) 
           AND IS_ACTIVE = 'Y'
        RETURNING TASK_ALLOC_ID, UR_ID INTO LN_ACT_TA_ID, LN_UR_ID_NTM;
	END IF;

    LN_ERR_NO := 100;
    UPDATE TASK_MASTER
       SET TASK_STATUS = (SELECT ALLOCATION_TYPE || ' - ' || ALLOCATION_STATUS ||
       							 CASE WHEN IS_REJECTED = 'Y' THEN '(REJECTED)' ELSE NULL END
                            FROM TASK_ALLOCATION
                           WHERE TASK_ALLOC_ID =  LN_ACT_TA_ID)
     WHERE TASK_ID = PIN_TASK_ID;

	IF LC_ROLE_NAME IN ('Analyst', 'Review Analyst') AND PIC_STATUS = 'SET COMPLETE' THEN

        SELECT USER_NAME
          INTO LC_USER_NAME_NTM
          FROM USER_ROLE_DETAILS_V
         WHERE UR_ID = LN_UR_ID_NTM;

		IF LC_USER_NAME_NTM = 'auto.process' THEN
        	UPDATE_TASK_STATUS_NOCOMMIT(PIN_TASK_ID, LN_ACT_TA_ID, LN_UR_ID_NTM, 
            	'SET COMPLETE', 'Auto Process completed the task' );
        END IF;

    END IF;

    LN_ERR_NO := 130;
        
EXCEPTION
WHEN OTHERS THEN
    ROLLBACK;
    COMMON.LOG_ERROR('TASK_ALLOCATION', 'UPDATE_TASK_STATUS_NOCOMMIT', LN_ERR_NO, SQLCODE, SQLERRM);
    RAISE;
END;

PROCEDURE UPDATE_TASK_STATUS
    (
		PIN_TASK_ID					IN        NUMBER,
        PIN_TASK_ALLOC_ID			IN        NUMBER,
        PIN_UR_ID					IN        NUMBER,
        PIC_STATUS					IN        VARCHAR2,
        PIC_REMARKS					IN        VARCHAR2
    )
IS

LN_ERR_NO        NUMBER;
LC_ROLE_NAME    VARCHAR2(30);

LN_ACT_TA_ID		NUMBER;
LN_ACT_TA_ID_TMP	NUMBER;

LN_UR_ID_NTM			NUMBER(10);
LC_USER_NAME_NTM	VARCHAR2(100);

BEGIN

	LN_ERR_NO := 10;
    UPDATE_TASK_STATUS_NOCOMMIT(PIN_TASK_ID, PIN_TASK_ALLOC_ID, PIN_UR_ID, 
        PIC_STATUS, PIC_REMARKS );

    LN_ERR_NO := 20;
    COMMIT;

    LN_ERR_NO := 30;
        
EXCEPTION
WHEN OTHERS THEN
    ROLLBACK;
    COMMON.LOG_ERROR('TASK_ALLOCATION', 'UPDATE_TASK_STATUS', LN_ERR_NO, SQLCODE, SQLERRM);
    RAISE;
END;

PROCEDURE GET_SHIPMENT_REFERENCES
	(
    	PIN_SHIPMENT_ID			IN		NUMBER,
        PORC_SHIPMENT_REFS		OUT		COMMON.REF_CUR
    )
IS

LN_ERR_NO		NUMBER;

BEGIN

	LN_ERR_NO := 10;
    OPEN PORC_SHIPMENT_REFS FOR
    SELECT SM.SHIPMENT_NAME, SR.SHIPMENT_REF_ID, SR.REFERENCE_NAME, 
    	   SR.REFERENCE_TYPE, SR.TITLE, SR.DOI,
           SR.AUTHORS, SR.SYS_TEXT, SR.SYS_NO, 
           SR.SYS_CLASS_TYPE, SR.ZERO_REACTIONS_STATUS, SR.VALIDATION_STATUS, 
           NVL(TM.TASK_STATUS, 'NOT ASSIGNED') TASK_STATUS
      FROM SHIPMENT_MASTER SM
      	   INNER JOIN SHIPMENT_REFERENCES SR
              ON (SR.SHIPMENT_ID = SM.SHIPMENT_ID)
           LEFT OUTER JOIN TASK_MASTER TM
              ON (TM.SHIPMENT_REF_ID = SR.SHIPMENT_REF_ID)
	 WHERE SM.SHIPMENT_ID = PIN_SHIPMENT_ID;

EXCEPTION
WHEN OTHERS THEN
    ROLLBACK;
    COMMON.LOG_ERROR('TASK_ALLOCATION', 'GET_SHIPMENT_REFERENCES', LN_ERR_NO, SQLCODE, SQLERRM);
    RAISE;
END;


PROCEDURE UPDATE_VALIDATION_STATUS
	(
    	PIAN_SHPT_REFS			IN			COMMON.PLST_NUM,
        PIN_UR_ID				IN			NUMBER,
        POC_STATUS				OUT			VARCHAR2
    )
IS

LN_ERR_NO 		NUMBER(10);

BEGIN

	LN_ERR_NO := 10;
    FORALL I IN 1 .. PIAN_SHPT_REFS.COUNT
    UPDATE SHIPMENT_REFERENCES
       SET VALIDATION_STATUS = 'Y',
           VALIDATED_BY = PIN_UR_ID,
           VALIDATED_ON = SYSDATE
     WHERE SHIPMENT_REF_ID = PIAN_SHPT_REFS(I); 

	LN_ERR_NO := 20;
    UPDATE SHIPMENT_MASTER SM
       SET TASK_PREPARATION_STATUS = 
       		(SELECT CASE WHEN COUNT(CASE WHEN VALIDATION_STATUS = 'Y' THEN 1 ELSE NULL END) = COUNT(1) THEN 'Y' ELSE 'N' END 
               FROM SHIPMENT_REFERENCES SR
              WHERE SR.SHIPMENT_ID = SM.SHIPMENT_ID)
	 WHERE SM.SHIPMENT_ID = (SELECT SHIPMENT_ID FROM SHIPMENT_REFERENCES WHERE SHIPMENT_REF_ID = PIAN_SHPT_REFS(1)); 
    
    LN_ERR_NO := 30;
    POC_STATUS := 'SUCCESS';
    
    

EXCEPTION
    WHEN OTHERS THEN
        COMMON.LOG_ERROR('REPORTS', 'UPDATE_VALIDATION_STATUS' ,LN_ERR_NO, SQLCODE, SQLERRM);
        POC_STATUS := 'ERRORS';     
END UPDATE_VALIDATION_STATUS;    

--MODIFY TASK
PROCEDURE MT_GET_USER_DETAILS
    (
        PIC_MODULE						IN			VARCHAR2,
        PIN_ROLE_ID						IN          NUMBER,
        PORC_USER_DETAILS				OUT         COMMON.REF_CUR
    )
IS

LN_ERR_NO       NUMBER;

BEGIN

    LN_ERR_NO := 10;
    OPEN PORC_USER_DETAILS FOR
        SELECT UR.UR_ID, UR.USER_ID, UR.USER_NAME,
               UR.ROLE_ID, UR.ROLE_NAME, UR.IS_ACTIVE,
               COUNT(CASE WHEN TA.ALLOCATION_STATUS = 'ASSIGNED' THEN 1 ELSE NULL END) ASSIGNED_CNT,
               COUNT(CASE WHEN TA.ALLOCATION_STATUS = 'PROGRESS' THEN 1 ELSE NULL END) PROGRESS_CNT
          FROM USER_ROLE_DETAILS_V UR
               LEFT OUTER JOIN TASK_ALLOCATION TA
                  ON (    TA.UR_ID = UR.UR_ID 
                      AND TA.IS_ACTIVE = 'Y')
         WHERE UR.MODULE = PIC_MODULE
           AND UR.ROLE_ID = PIN_ROLE_ID
         GROUP BY UR.UR_ID, UR.USER_ID, UR.USER_NAME,
                  UR.ROLE_ID, UR.ROLE_NAME, UR.IS_ACTIVE
         ORDER BY UR.USER_NAME;

    LN_ERR_NO := 20;

EXCEPTION
WHEN OTHERS THEN
    COMMON.LOG_ERROR('TASK_MANAGMENT', 'MT_GET_USER_DETAILS', LN_ERR_NO, SQLCODE, SQLERRM);
    RAISE;
END MT_GET_USER_DETAILS;


PROCEDURE MT_GET_USER_TASKS
    (
        PIN_UR_ID				IN            NUMBER,
        PORC_USER_TASKS			OUT            SYS_REFCURSOR
    )
IS
LN_ERR_NO        NUMBER;

BEGIN
    LN_ERR_NO := 10;
    OPEN PORC_USER_TASKS FOR
        SELECT SR.SHIPMENT_REF_ID, SR.REFERENCE_NAME, 
               TM.TASK_ID, TA.TASK_ALLOC_ID, TA.ALLOCATION_STATUS
          FROM SHIPMENT_REFERENCES SR
               INNER JOIN TASK_MASTER TM
                  ON (TM.SHIPMENT_REF_ID = SR.SHIPMENT_REF_ID)
               LEFT OUTER JOIN TASK_ALLOCATION TA
                  ON (TA.TASK_ID = TM.TASK_ID)
         WHERE TA.IS_ACTIVE = 'Y'
           AND TA.ALLOCATION_STATUS IN ('ASSIGNED', 'PROGRESS')
           AND TA.UR_ID = PIN_UR_ID;

EXCEPTION
WHEN OTHERS THEN
    COMMON.LOG_ERROR('TASK_MANAGMENT', 'MT_GET_USER_TASKS', LN_ERR_NO, SQLCODE, SQLERRM);
    RAISE;
END MT_GET_USER_TASKS;

PROCEDURE MT_REASSIGN_REFS
    (
        PIAN_TASK_ALLOC_IDS			IN          COMMON.PLST_NUM,
        PIN_UR_ID                   IN          NUMBER,
        PIN_PM_UR_ID                IN          NUMBER,               
        POC_STATUS                  OUT         VARCHAR2
    )
IS

LN_ERR_NO        	NUMBER;
LN_TASK_ALLOC_ID 	NUMBER(10);
LN_TASK_ID		 	NUMBER(10);

LC_USER_NAME		VARCHAR2(100);

BEGIN
    LN_ERR_NO := 10;
    FORALL I IN 1 .. PIAN_TASK_ALLOC_IDS.COUNT
    UPDATE TASK_ALLOCATION
       SET IS_ACTIVE = 'N'
     WHERE TASK_ALLOC_ID = PIAN_TASK_ALLOC_IDS(I);

    LN_ERR_NO := 20;
    FORALL I IN 1 .. PIAN_TASK_ALLOC_IDS.COUNT
        INSERT INTO TASK_ALLOCATION 
            (TASK_ALLOC_ID, TASK_ID, UR_ID, 
             ALLOCATION_STATUS, ALLOCATION_TYPE, IS_ACTIVE, 
             START_DATE, IS_REASSIGNED, CREATED_BY) 
        SELECT TASK_ALLOC_ID_SEQ.NEXTVAL, TA.TASK_ID, PIN_UR_ID,
               TA.ALLOCATION_STATUS, ALLOCATION_TYPE, 'Y', 
               START_DATE, 'Y', PIN_PM_UR_ID
          FROM TASK_ALLOCATION TA
         WHERE TASK_ALLOC_ID = PIAN_TASK_ALLOC_IDS(I);

    SELECT USER_NAME
      INTO LC_USER_NAME
      FROM USER_ROLE_DETAILS_V
     WHERE UR_ID = PIN_UR_ID;

    IF LC_USER_NAME = 'auto.process' THEN
    
        FOR I IN 1 .. PIAN_TASK_ALLOC_IDS.COUNT
        LOOP
            SELECT TAR.TASK_ALLOC_ID, TAR.TASK_ID
              INTO LN_TASK_ALLOC_ID, LN_TASK_ID
              FROM TASK_ALLOCATION TA 
                   INNER JOIN TASK_ALLOCATION TAR
                      ON (TAR.TASK_ID = TA.TASK_ID)
             WHERE TA.TASK_ALLOC_ID = PIAN_TASK_ALLOC_IDS(I)
               AND TAR.UR_ID = PIN_UR_ID
               AND TAR.IS_ACTIVE = 'Y';

            UPDATE_TASK_STATUS_NOCOMMIT(LN_TASK_ID, LN_TASK_ALLOC_ID, PIN_UR_ID, 'SET COMPLETE', 'Auto Process completed the task');

        END LOOP;

	END IF;

    LN_ERR_NO := 30;
    COMMIT;
    
EXCEPTION
WHEN OTHERS THEN
    COMMON.LOG_ERROR('TASK_MANAGMENT', 'MT_REASSIGN_REFS', LN_ERR_NO, SQLCODE, SQLERRM);
    RAISE;
END MT_REASSIGN_REFS;

PROCEDURE MT_CANCEL_TASKS
    (
        PIAN_TASK_IDS			IN          COMMON.PLST_NUM,
        POC_STATUS              OUT         VARCHAR2
    )
IS

LN_ERR_NO        NUMBER;

LNA_TASK_ALLOC_IDS NUMBER_NTT := NUMBER_NTT();

BEGIN
    LN_ERR_NO := 10;
    FOR I IN 1 .. PIAN_TASK_IDS.COUNT
    LOOP
    	LNA_TASK_ALLOC_IDS.EXTEND;
        LNA_TASK_ALLOC_IDS(I) := PIAN_TASK_IDS(I); 
    END LOOP;

    LN_ERR_NO := 20;
    UPDATE TASK_ALLOCATION
       SET IS_ACTIVE = 'N'
     WHERE TASK_ID IN (SELECT COLUMN_VALUE FROM TABLE(LNA_TASK_ALLOC_IDS));

    LN_ERR_NO := 30;
	UPDATE TASK_MASTER
       SET TASK_STATUS = 'NOT ASSIGNED'
     WHERE TASK_ID IN (SELECT COLUMN_VALUE FROM TABLE(LNA_TASK_ALLOC_IDS));

    LN_ERR_NO := 30;
    COMMIT;
    
    LN_ERR_NO := 40;
    POC_STATUS := 'SUCCESS';
    
EXCEPTION
WHEN OTHERS THEN
    COMMON.LOG_ERROR('TASK_MANAGMENT', 'MT_CANCEL_TASKS', LN_ERR_NO, SQLCODE, SQLERRM);
    POC_STATUS := 'FAILED';
    RAISE;
END MT_CANCEL_TASKS;


END TASK_MANAGEMENT;
/

CREATE OR REPLACE PACKAGE  BODY                                                                                                                                                                                                                                                                                                                              USER_MANAGEMENT
IS
PROCEDURE GET_ROLES
    (
            PORC_ROLES          OUT         COMMON.REF_CUR
    )
IS
LN_ERR_NO        NUMBER;
BEGIN
    LN_ERR_NO := 10;
    OPEN PORC_ROLES FOR
        SELECT * FROM ROLE_MASTER;

    LN_ERR_NO := 20;
EXCEPTION
    WHEN OTHERS THEN
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_ROLES', LN_ERR_NO, SQLCODE, SQLERRM);
END GET_ROLES;


PROCEDURE GET_USER_DETAILS
    (
            PIC_MODULE       IN            VARCHAR2,
            PIC_USER_NAME        IN            VARCHAR2,
            PIN_ROLE_ID          IN            NUMBER,
            PORC_USER_DETAILS    OUT           COMMON.REF_CUR
    )
IS
LN_ERR_NO   NUMBER;
BEGIN

    LN_ERR_NO := 10;
    
    --FOR ROLE_ID (ADMIN -1, PROJECT INCHARGE -2) DOES NOT CONTAIN MODULE
    
   IF PIN_ROLE_ID = 3 THEN
    
        /*IF ROLE IS TOOL MANAGER COMPARE WITH ONLY APPLICATION */
        
        LN_ERR_NO := 20;
    
        OPEN PORC_USER_DETAILS FOR
        SELECT UM.USER_ID, UM.USER_NAME,UR.UR_ID, 
               UR.ROLE_ID, UR.MODULE, UM.IS_LDAP_USER, UM.PASSWD
          FROM USER_ROLES UR,
               USER_MASTER UM              
          WHERE UR.USER_ID = UM.USER_ID
            AND UR.IS_ACTIVE = 'Y'
            AND UR.ROLE_ID = PIN_ROLE_ID
            AND UR.MODULE = PIC_MODULE
            AND UPPER(UM.USER_NAME) = UPPER(PIC_USER_NAME);
            
   ELSIF PIN_ROLE_ID IN (4,5,6) THEN
    
        /* IF ROLE IS REVIWER,ANALYST,QC COMPARE WITH APPLICATION AND MODULE */
        
        LN_ERR_NO := 30;
        
    
        OPEN PORC_USER_DETAILS FOR
           SELECT UM.USER_ID, UM.USER_NAME,UR.UR_ID, 
               UR.ROLE_ID, UR.MODULE, UM.IS_LDAP_USER,
               UM.PASSWD
          FROM USER_ROLES UR,
               USER_MASTER UM              
          WHERE UR.USER_ID = UM.USER_ID
            AND UR.IS_ACTIVE = 'Y'
            AND UR.ROLE_ID = PIN_ROLE_ID
            AND UR.MODULE = PIC_MODULE
            AND UPPER(UM.USER_NAME) = UPPER(PIC_USER_NAME);
            
   ELSIF PIN_ROLE_ID IN (1,2)  THEN      
     
        /* IF ROLE IS ADMIN,PROJECT MANAGER NO NEED COMPARE */
        
        LN_ERR_NO := 40;
              
           
        OPEN PORC_USER_DETAILS FOR
        SELECT UM.USER_ID, UM.USER_NAME,UR.UR_ID, 
        	   UR.ROLE_ID, UR.MODULE, UM.IS_LDAP_USER,UM.PASSWD
          FROM USER_ROLES UR,
        	   USER_MASTER UM              
         WHERE UR.USER_ID = UM.USER_ID
           AND UR.IS_ACTIVE = 'Y'
           AND UR.ROLE_ID = PIN_ROLE_ID
           AND UPPER(UM.USER_NAME) = UPPER(PIC_USER_NAME);     
    END IF;                
    

EXCEPTION
    WHEN OTHERS THEN
    COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_USER_DETAILS', LN_ERR_NO, SQLCODE, SQLERRM);
END GET_USER_DETAILS;
PROCEDURE SAVE_USER
    (
            PIN_USER_ID         IN          NUMBER,
            PIC_USER_NAME       IN          VARCHAR2,
            PIC_EMAIL_ID        IN          VARCHAR2,
            PIC_PASSWORD        IN          VARCHAR2,
            PIC_IS_ACTIVE       IN          VARCHAR2,
            PIC_OP_TYPE         IN          VARCHAR2,
            PIC_IS_LDAP_USER    IN          CHAR,
            POC_STATUS          OUT         VARCHAR2
    )
IS
LN_ERR_NO   NUMBER(4);
LC_STATUS   VARCHAR2(100);
LN_COUNT    NUMBER;
BEGIN
    
    LN_ERR_NO := 10;
    IF PIC_OP_TYPE = 'INSERT' THEN
    
       SELECT COUNT(1) INTO LN_COUNT
       FROM USER_MASTER UM
       WHERE UPPER(UM.USER_NAME) = UPPER(PIC_USER_NAME);
       
       IF LN_COUNT = 0 THEN 
        LN_ERR_NO := 20;
        IF PIC_IS_ACTIVE='Y' THEN 
            INSERT INTO USER_MASTER
                (USER_ID, USER_NAME, EMAIL_ID, PASSWD ,IS_ACTIVE,IS_LDAP_USER)
            VALUES(USER_ID_SEQ.NEXTVAL, PIC_USER_NAME, PIC_EMAIL_ID,PIC_PASSWORD , PIC_IS_ACTIVE,PIC_IS_LDAP_USER);
            LC_STATUS  := 'INSERT SUCCESSFUL';
        ELSE 
            INSERT INTO USER_MASTER
                (USER_ID, USER_NAME, EMAIL_ID, PASSWD ,IS_ACTIVE,INACTIVE_DATE,IS_LDAP_USER)
            VALUES(USER_ID_SEQ.NEXTVAL, PIC_USER_NAME, PIC_EMAIL_ID, PIC_PASSWORD ,PIC_IS_ACTIVE,SYSDATE,PIC_IS_LDAP_USER);
            LC_STATUS  := 'INSERT SUCCESSFUL';
        END IF;
        ELSE
         LC_STATUS := 'DUPLICATE USER NAME!';
        END IF;                  
            
    ELSIF PIC_OP_TYPE = 'UPDATE' THEN
        LN_ERR_NO := 30;
        IF PIC_IS_ACTIVE='Y' THEN 
            UPDATE USER_MASTER
               SET USER_NAME = PIC_USER_NAME,
                   EMAIL_ID = PIC_EMAIL_ID,
                   PASSWD=PIC_PASSWORD,
                   --USER_PASSWORD = PIC_USER_PASSWD,
                   IS_ACTIVE = PIC_IS_ACTIVE,
                   IS_LDAP_USER=PIC_IS_LDAP_USER
             WHERE USER_ID =PIN_USER_ID; 
        ELSE 
            UPDATE USER_MASTER 
               SET USER_NAME = PIC_USER_NAME,
                   EMAIL_ID = PIC_EMAIL_ID,
                   PASSWD=PIC_PASSWORD,
                   IS_ACTIVE = PIC_IS_ACTIVE,
                   IS_LDAP_USER=PIC_IS_LDAP_USER,
                   INACTIVE_DATE=SYSDATE
             WHERE USER_ID =PIN_USER_ID;
        END IF;
        IF PIC_IS_ACTIVE = 'N' THEN
            UPDATE USER_ROLES
               SET IS_ACTIVE = 'N',
                   INACTIVE_DATE=SYSDATE
             WHERE USER_ID = PIN_USER_ID;
        ELSE
            UPDATE USER_ROLES
                   SET IS_ACTIVE = 'Y',
                       INACTIVE_DATE=SYSDATE
                 WHERE USER_ID = PIN_USER_ID;
        END IF;
    LC_STATUS :='UPDATE SUCCESSFUL';
    ELSIF PIC_OP_TYPE = 'DELETE' THEN
        LN_ERR_NO := 40;
        DELETE FROM USER_MASTER
         WHERE USER_ID = PIN_USER_ID;
        LC_STATUS:='DELETE SUCCESSFUL';
    END IF;
        
    LN_ERR_NO := 50;
    COMMIT;
        
    LN_ERR_NO := 60;
    POC_STATUS := LC_STATUS;
        
    LN_ERR_NO := 70;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
    POC_STATUS := 'DUPLICATE USER NAME!';
    COMMON.LOG_ERROR('USER_MANAGEMENT', 'SAVE_USER', LN_ERR_NO, SQLCODE, SQLERRM);
    WHEN OTHERS THEN
    POC_STATUS := 'ERRORS';
    COMMON.LOG_ERROR('USER_MANAGEMENT', 'SAVE_USER', LN_ERR_NO, SQLCODE, SQLERRM);
END SAVE_USER;

PROCEDURE GET_USERS
    (
            PORC_USERS          OUT         COMMON.REF_CUR
    )
IS
LN_ERR_NO	NUMBER;
BEGIN
    LN_ERR_NO := 10;
    OPEN PORC_USERS FOR
      SELECT USER_ID, USER_NAME, 
             EMAIL_ID, 
             DECODE(IS_ACTIVE, 'Y', 'Active', 'InActive') IS_ACTIVE,
             IS_LDAP_USER,PASSWD,
             CREATED_DATE
        FROM USER_MASTER; 
        --WHERE IS_ACTIVE = 'Y';

    LN_ERR_NO := 20;
EXCEPTION
    WHEN OTHERS THEN
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_USERS', LN_ERR_NO, SQLCODE, SQLERRM);
END GET_USERS;
PROCEDURE GET_ACTIVE_USERS
    (
            PORC_USERS          OUT         COMMON.REF_CUR
    )
IS
LN_ERR_NO		NUMBER;
BEGIN
    LN_ERR_NO := 10;
    OPEN PORC_USERS FOR
        SELECT USER_ID, USER_NAME 
          FROM USER_MASTER 
         WHERE IS_ACTIVE = 'Y'
         ORDER BY USER_NAME;
    LN_ERR_NO := 20;
EXCEPTION
    WHEN OTHERS THEN
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_ACTIVE_USERS', LN_ERR_NO, SQLCODE, SQLERRM);
END GET_ACTIVE_USERS;

PROCEDURE SAVE_USER_ROLE
	(
    	PIN_USER_ID					IN			NUMBER,
        PIN_ROLE_ID					IN			NUMBER,
        PIC_MODULE              IN          VARCHAR2,
        POC_STATUS					OUT			VARCHAR2
	)
IS

LN_CNT							NUMBER;
LN_ERR_NO						NUMBER;

USER_ROLE_ALREADY_EXISTS		EXCEPTION;

BEGIN
	
	LN_ERR_NO := 10;
	SELECT COUNT(1) INTO LN_CNT
      FROM USER_ROLES
     WHERE USER_ID = PIN_USER_ID
       AND ROLE_ID = PIN_ROLE_ID
       AND MODULE = PIC_MODULE
       AND IS_ACTIVE = 'Y';
    
    LN_ERR_NO := 20;
	IF LN_CNT > 0 THEN
    	RAISE USER_ROLE_ALREADY_EXISTS; 
    END IF;

	LN_ERR_NO := 30;
    INSERT INTO USER_ROLES 
    	(UR_ID, USER_ID, ROLE_ID, 
   		 MODULE) 
	VALUES (UR_ID_SEQ.NEXTVAL, PIN_USER_ID, PIN_ROLE_ID,
    	    PIC_MODULE);
    
	LN_ERR_NO := 40;    
    COMMIT;
    
    LN_ERR_NO := 50;
    POC_STATUS := 'Success';

	LN_ERR_NO := 60;
EXCEPTION
WHEN USER_ROLE_ALREADY_EXISTS THEN
    ROLLBACK;
	POC_STATUS := 'User Role already exists';
    COMMON.LOG_ERROR('USER_MANAGEMENT', 'SAVE_USER_ROLE', LN_ERR_NO, '', 'User Role already exists');
WHEN OTHERS THEN
    ROLLBACK;
    POC_STATUS := 'Errors Occured';
    COMMON.LOG_ERROR('USER_MANAGEMENT', 'SAVE_USER_ROLE', LN_ERR_NO, SQLCODE, SQLERRM);
END;

PROCEDURE GET_ACTIVE_USER_ROLES
    (
        PORC_USER_ROLE_DETAILS         OUT         COMMON.REF_CUR
    )
IS
LN_ERR_NO		NUMBER;
BEGIN
	LN_ERR_NO := 10;
    OPEN PORC_USER_ROLE_DETAILS FOR
        SELECT UR.UR_ID, UM.USER_NAME, RM.ROLE_NAME, 
        	   UR.MODULE, DECODE(UR.IS_ACTIVE, 'Y', 'Active', 'InActive') IS_ACTIVE
          FROM USER_MASTER UM,
          	   USER_ROLES UR,
               ROLE_MASTER RM
         WHERE UM.USER_ID=UR.USER_ID
           AND UR.ROLE_ID=RM.ROLE_ID
           AND UR.IS_ACTIVE = 'Y';

    LN_ERR_NO := 20;
EXCEPTION
WHEN OTHERS THEN
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_USERS', LN_ERR_NO, SQLCODE, SQLERRM);
END;

PROCEDURE GET_USERNAMES_BY_APP_MOD
    (
		PIC_MODULE			IN        VARCHAR2,
        PIN_ROLE_ID				IN        NUMBER,
        PORC_RECORDS			OUT       SYS_REFCURSOR
    )
IS

LN_ERR_NO NUMBER;

BEGIN

    LN_ERR_NO :=10;
    OPEN PORC_RECORDS FOR 
    SELECT UR.UR_ID ,UM.USER_NAME 
     FROM  USER_ROLES UR 
     	   INNER JOIN USER_MASTER UM
              ON ( UM.USER_ID = UR.USER_ID )
     WHERE UPPER(UR.MODULE) = UPPER(PIC_MODULE)
       AND UR.ROLE_ID = PIN_ROLE_ID
       AND UR.IS_ACTIVE = 'Y'
     ORDER BY USER_NAME;

EXCEPTION
WHEN OTHERS THEN
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_USERNAME_BY_APP_MOD', LN_ERR_NO, SQLCODE, SQLERRM);
END GET_USERNAMES_BY_APP_MOD;

PROCEDURE DML_TEAM_USERS
    (
         PIC_MODULE						IN         VARCHAR2,
         PIN_ANLST_UR_ID				IN         NUMBER,
         PIN_QUAL_ANLST_UR_ID			IN         NUMBER ,
         PIN_REV_ANLST_UR_ID			IN         NUMBER,
         POC_STATUS						OUT        VARCHAR2                
     )
IS

LN_ERR_NO NUMBER;
LN_TOOL_MGR_URID   NUMBER;
LC_COUNT  NUMBER;
 
BEGIN
  LN_ERR_NO :=10;
  
 
--  LN_TOOL_MGR_URID :;
--  LN_PROJECT_MGR_URID :=0;
--  
BEGIN        
           LN_ERR_NO :=20;
           --Get Tool Manager UR_ID
               SELECT UR.UR_ID INTO LN_TOOL_MGR_URID
               FROM USER_ROLES UR,
                    USER_MASTER UM,
                    ROLE_MASTER RM
               WHERE  UR.USER_ID=UM.USER_ID
                AND   RM.ROLE_NAME='Tool Manager'
                AND  UR.MODULE = PIC_MODULE
                AND UR.ROLE_ID=RM.ROLE_ID
                AND UR.IS_ACTIVE='Y';
EXCEPTION
WHEN NO_DATA_FOUND THEN
COMMON.LOG_ERROR('USER_MANAGEMENT',' DML_TEAM_USERS',LN_ERR_NO,SQLCODE,SQLERRM);
END;                
                
              LN_ERR_NO :=40;
              INSERT INTO TEAM_USERS
              (TEAM_USER_ID, MODULE,
              TOOL_MGR_UR_ID,QUAL_ANLST_UR_ID, REV_ANLST_UR_ID,ANLST_UR_ID  
              ) 
              VALUES( TU_ID_SEQ.NEXTVAL, PIC_MODULE ,LN_TOOL_MGR_URID,
              PIN_QUAL_ANLST_UR_ID , PIN_REV_ANLST_UR_ID  ,PIN_ANLST_UR_ID
                         );
             POC_STATUS :='Insertion Success';
             LN_ERR_NO :=50;
   
                 
    COMMIT;
   
    
                 
 EXCEPTION
WHEN OTHERS THEN
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'DML_TEAM_USERS', LN_ERR_NO, SQLCODE, SQLERRM);
     POC_STATUS:='Duplicate Record ';
END DML_TEAM_USERS;  
PROCEDURE GET_TEAM_USERS
(
    PORC_RECORDS             OUT          SYS_REFCURSOR
)               
IS
LN_ERR_NO NUMBER;
BEGIN
    LN_ERR_NO :=10;
    OPEN PORC_RECORDS FOR 
        SELECT UR_IDS.MODULE,
               UM_ANA.USER_NAME ANALYST_NAME ,UM_REV.USER_NAME REVEIWER_NAME,
               UM_QC.USER_NAME QC_NAME
         FROM  
    (
     SELECT TU.MODULE,UR_ANA.USER_ID ANA_USER_ID,
                 UR_REV.USER_ID REV_USER_ID ,UR_QUA.USER_ID QC_USER_ID
       FROM TEAM_USERS TU,
                 USER_ROLES UR_ANA,
                 USER_ROLES UR_REV,
                 USER_ROLES UR_QUA
                  
             WHERE TU.ANLST_UR_ID = UR_ANA.UR_ID 
               AND   TU.REV_ANLST_UR_ID  = UR_REV.UR_ID
               AND TU.QUAL_ANLST_UR_ID  = UR_QUA.UR_ID 
               
        )UR_IDS,
          USER_MASTER UM_ANA,
          USER_MASTER UM_REV,
          USER_MASTER UM_QC
          
       WHERE UM_ANA.USER_ID = ANA_USER_ID
         AND   UM_REV.USER_ID = REV_USER_ID 
         AND  UM_QC.USER_ID = UR_IDS.QC_USER_ID;
         
EXCEPTION
WHEN OTHERS THEN
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_TEAM_USERS', LN_ERR_NO, SQLCODE, SQLERRM);
END GET_TEAM_USERS;

PROCEDURE INACTIVATE_USER_ROLE
	(
    	PIN_UR_ID				IN		NUMBER,
        POC_STATUS				OUT		VARCHAR2
    )
IS
LN_ERR_NO			NUMBER;
BEGIN
    LN_ERR_NO := 10;
	UPDATE USER_ROLES
       SET IS_ACTIVE = 'N',
           INACTIVE_DATE = SYSDATE
     WHERE UR_ID =PIN_UR_ID;
	LN_ERR_NO := 20;
	POC_STATUS := 'Success';
    
    LN_ERR_NO := 30;
    COMMIT;
    
    LN_ERR_NO := 40;
EXCEPTION
WHEN OTHERS THEN
	 ROLLBACK;
     POC_STATUS := 'ERRORS';
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'INACTIVATE_USER_ROLE', LN_ERR_NO, SQLCODE, SQLERRM);
END;

PROCEDURE GET_APP_MODULE_USERS
	(
        PIC_MODULE				IN      VARCHAR2,
        PORC_USERS				OUT		COMMON.REF_CUR
    )
IS
LN_ERR_NO			NUMBER;
BEGIN

	LN_ERR_NO := 10;
	OPEN PORC_USERS FOR
    	SELECT *
          FROM USER_ROLE_DETAILS
         WHERE IS_ACTIVE = 'Y';
           --AND MODULE = PIC_MODULE;

    LN_ERR_NO := 20;

EXCEPTION
WHEN OTHERS THEN
	 COMMON.LOG_ERROR('USER_MANAGEMENT', 'INACTIVATE_USER_ROLE', LN_ERR_NO, SQLCODE, SQLERRM);
END;
    
PROCEDURE CHECK_TOOLMANAGER_ISEXIST
(
       PIC_MODULE          IN   VARCHAR2,
       PORC_RESULTS        OUT  COMMON.REF_CUR
)
IS
LN_ERR_NO   NUMBER;


BEGIN

            OPEN PORC_RESULTS FOR
           SELECT UR.UR_ID
       FROM USER_ROLES UR,
            USER_MASTER UM,
            ROLE_MASTER RM
      WHERE UR.IS_ACTIVE = 'Y'
        AND UR.USER_ID=UM.USER_ID
        AND RM.ROLE_NAME='Tool Manager'
        AND UR.MODULE=PIC_MODULE
        AND UR.ROLE_ID=RM.ROLE_ID;
       
        

EXCEPTION
WHEN OTHERS THEN
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'CHECK_TOOLMANAGER_ISEXIST', LN_ERR_NO, SQLCODE, SQLERRM);
     
END;
PROCEDURE GET_USER_CREDENTIALS
(
       PIC_USER_NAME   IN  VARCHAR2,
       PIC_PASSWORD    IN  VARCHAR2,
       PORC_RESULTS    OUT COMMON.REF_CUR
)
IS
LN_ERR_NO    NUMBER;

BEGIN

    
    OPEN PORC_RESULTS FOR
    
       SELECT * 
       FROM USER_MASTER
       WHERE USER_NAME=PIC_USER_NAME
       AND   PASSWD=PIC_PASSWORD; 
       





EXCEPTION
WHEN OTHERS THEN
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_USER_CREDENTIALS', LN_ERR_NO, SQLCODE, SQLERRM);
     
END;
PROCEDURE GET_ANALYSTNAMES_BY_APP_MOD
    (
            PIC_MODULE              IN          VARCHAR2,
            PORC_RECORDS            OUT         SYS_REFCURSOR
    )
    IS
LN_ERR_NO NUMBER;
BEGIN
    LN_ERR_NO :=10;
    OPEN PORC_RECORDS FOR 
        SELECT UR.UR_ID ,UM.USER_NAME 
            FROM  USER_ROLES UR
                        INNER JOIN
                        USER_MASTER UM
                 ON ( UM.USER_ID = UR.USER_ID )
             AND      UPPER(UR.MODULE) = PIC_MODULE
             AND      UR.ROLE_ID=6
             AND      UR.IS_ACTIVE = 'Y'
             AND NOT  EXISTS 
            (
             
             SELECT USER_NAME FROM TEAM_USERS TU
             WHERE MODULE = PIC_MODULE
             AND  UR.UR_ID = TU.ANLST_UR_ID
            )
             ORDER BY USER_NAME;
EXCEPTION
WHEN OTHERS THEN
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_ANALYSTNAMES_BY_APP_MOD', LN_ERR_NO, SQLCODE, SQLERRM);
END;
PROCEDURE GET_QCDETAILS_ON_REVIEWER
(
            PIC_APPLICATION         IN          VARCHAR2,
            PIC_MODULE              IN          VARCHAR2,
            PIN_REVIEWER_URID            IN          NUMBER,
            PORC_RECORDS            OUT         SYS_REFCURSOR
)
IS
LN_ERR_NO NUMBER;
BEGIN
    LN_ERR_NO :=10;
    OPEN PORC_RECORDS FOR 
        
      SELECT  DISTINCT QUAL_ANLST_UR_ID
      FROM  USER_ROLES UR
      INNER JOIN
      USER_MASTER UM
      ON ( UM.USER_ID = UR.USER_ID )
           INNER JOIN
           TEAM_USERS TU
           ON (TU.REV_ANLST_UR_ID = UR.UR_ID AND TU.REV_ANLST_UR_ID = PIN_REVIEWER_URID)
           WHERE UPPER(UR.MODULE) = PIC_MODULE
             AND      UR.IS_ACTIVE = 'Y';
    
    
    
    
    
EXCEPTION
WHEN OTHERS THEN
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_QCDETAILS_ON_REVIEWER', LN_ERR_NO, SQLCODE, SQLERRM);
END;
PROCEDURE CHECK_MANAGER_ISEXIST
(
       PIC_APPLICATION     IN   VARCHAR2,
       PIC_MODULE          IN   VARCHAR2,
       POC_STATUS          OUT  VARCHAR2
)
IS
LN_ERR_NO   NUMBER;
LN_TOOL_MANAGER_URID   NUMBER;
LN_PROJECT_URID        NUMBER;

BEGIN
       
       BEGIN
            
       SELECT UR.UR_ID INTO LN_TOOL_MANAGER_URID
       FROM USER_ROLES UR,
            USER_MASTER UM,
            ROLE_MASTER RM
       WHERE  UR.USER_ID=UM.USER_ID
        AND   RM.ROLE_NAME='Tool Manager'
        AND  UR.MODULE=PIC_MODULE
        AND UR.ROLE_ID=RM.ROLE_ID;
        
        EXCEPTION
         WHEN NO_DATA_FOUND THEN
         LN_TOOL_MANAGER_URID:=NULL;
       END;
       
       
       BEGIN
        
        SELECT UR.UR_ID INTO LN_PROJECT_URID
       FROM USER_ROLES UR,
            USER_MASTER UM,
            ROLE_MASTER RM
       WHERE  UR.USER_ID=UM.USER_ID
        AND   RM.ROLE_NAME='Project Manager'
        AND  UR.MODULE=PIC_MODULE
        AND UR.ROLE_ID=RM.ROLE_ID;
        
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
            LN_PROJECT_URID:=NULL;
        END;
        
        IF LN_TOOL_MANAGER_URID > 0 THEN
        
           POC_STATUS := 'TOOL MANAGER EXISTS';
           ELSE IF LN_PROJECT_URID > 0 THEN
        
             POC_STATUS := 'PROJECT MANAGER EXISTS';
             ELSE
             POC_STATUS :='NOT EXISTS';
             END IF;
       END IF;
         


EXCEPTION
WHEN OTHERS THEN
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'CHECK_TOOLMANAGER_ISEXIST', LN_ERR_NO, SQLCODE, SQLERRM);
END ;  

PROCEDURE GET_ACTIVE_USERS_BY_MOD
    (
        PIC_MODULE     IN      VARCHAR2,
        PORC_ACTIVE_USERS   OUT     SYS_REFCURSOR
    )
IS
LN_ERR_NO   NUMBER;
BEGIN
    LN_ERR_NO:=10;
    
    OPEN PORC_ACTIVE_USERS FOR 
        SELECT UM.USER_NAME, UM.EMAIL_ID 
        FROM USER_ROLES UR,
             USER_MASTER UM
        WHERE UR.MODULE = PIC_MODULE
         AND  UR.USER_ID = UM.USER_ID
         AND  UM.IS_ACTIVE = 'Y'
        AND  IS_LDAP_USER = 'Y';
        
    LN_ERR_NO:=20;
            
EXCEPTION
WHEN OTHERS THEN
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_ACTIVE_USERS_BY_MOD', LN_ERR_NO, SQLCODE, SQLERRM);
END GET_ACTIVE_USERS_BY_MOD;       
      
END USER_MANAGEMENT;
/

CREATE OR REPLACE PACKAGE BODY                       USER_MANAGEMENT_NEW
IS

PROCEDURE GET_ALL_USERS
    (
        PORC_RES      OUT COMMON.REF_CUR                       
    )
IS
LN_ERR_LINE     NUMBER;
BEGIN

    LN_ERR_LINE:= 10;
    OPEN PORC_RES FOR 
               SELECT * FROM USER_MASTER 
                ORDER BY USER_ID;
    LN_ERR_LINE:=20;
EXCEPTION
WHEN OTHERS THEN
    COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_ALL_USERS', LN_ERR_LINE, SQLCODE, SQLERRM);

END GET_ALL_USERS;

PROCEDURE GET_ROLES
    (
            PORC_ROLES          OUT         COMMON.REF_CUR
    )
IS
LN_ERR_NO        NUMBER;
BEGIN
    LN_ERR_NO := 10;
    OPEN PORC_ROLES FOR
        SELECT * FROM ROLE_MASTER;

    LN_ERR_NO := 20;
EXCEPTION
    WHEN OTHERS THEN
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_ROLES', LN_ERR_NO, SQLCODE, SQLERRM);
END GET_ROLES;


PROCEDURE GET_USER_DETAILS
    (
            PIC_MODULE       IN            VARCHAR2,
            PIC_USER_NAME        IN            VARCHAR2,
            PIN_ROLE_ID          IN            NUMBER,
            PORC_USER_DETAILS    OUT           COMMON.REF_CUR
    )
IS
LN_ERR_NO   NUMBER;
BEGIN

    LN_ERR_NO := 10;
        OPEN PORC_USER_DETAILS FOR
        SELECT UM.USER_ID, UM.USER_NAME,UR.UR_ID, 
               UR.ROLE_ID, UR.MODULE, UM.IS_LDAP_USER, UM.PASSWD
          FROM USER_ROLES UR,
               USER_MASTER UM              
          WHERE UR.USER_ID = UM.USER_ID
            AND UR.IS_ACTIVE = 'Y'
            AND UR.ROLE_ID = PIN_ROLE_ID
            AND (UR.MODULE = PIC_MODULE OR ( PIC_MODULE IS NULL AND UR.MODULE IS NULL))
            AND UPPER(UM.USER_NAME) = UPPER(PIC_USER_NAME);

EXCEPTION
    WHEN OTHERS THEN
    COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_USER_DETAILS', LN_ERR_NO, SQLCODE, SQLERRM);
END GET_USER_DETAILS;

PROCEDURE SAVE_USER
    (
            PIN_USER_ID         IN          NUMBER,
            PIC_USER_NAME       IN          VARCHAR2,
            PIC_EMAIL_ID        IN          VARCHAR2,
            PIC_PASSWORD        IN          VARCHAR2,
            PIC_IS_ACTIVE       IN          VARCHAR2,
            PIC_OP_TYPE         IN          VARCHAR2,
            PIC_IS_LDAP_USER    IN          CHAR,
            POC_STATUS          OUT         VARCHAR2
    )
IS
LN_ERR_NO   NUMBER(4);
LC_STATUS   VARCHAR2(100);
LN_COUNT    NUMBER;
BEGIN
    
    LN_ERR_NO := 10;
    IF PIC_OP_TYPE = 'INSERT' THEN
    
       SELECT COUNT(1) INTO LN_COUNT
       FROM USER_MASTER UM
       WHERE UPPER(UM.USER_NAME) = UPPER(PIC_USER_NAME);
       
       IF LN_COUNT = 0 THEN 
        LN_ERR_NO := 20;
        IF PIC_IS_ACTIVE='Y' THEN 
            INSERT INTO USER_MASTER
                (USER_ID, USER_NAME, EMAIL_ID, PASSWD ,IS_ACTIVE,IS_LDAP_USER)
            VALUES(USER_ID_SEQ.NEXTVAL, PIC_USER_NAME, PIC_EMAIL_ID,PIC_PASSWORD , PIC_IS_ACTIVE,PIC_IS_LDAP_USER);
            LC_STATUS  := 'INSERT SUCCESSFUL';
        ELSE 
            INSERT INTO USER_MASTER
                (USER_ID, USER_NAME, EMAIL_ID, PASSWD ,IS_ACTIVE,INACTIVE_DATE,IS_LDAP_USER)
            VALUES(USER_ID_SEQ.NEXTVAL, PIC_USER_NAME, PIC_EMAIL_ID, PIC_PASSWORD ,PIC_IS_ACTIVE,SYSDATE,PIC_IS_LDAP_USER);
            LC_STATUS  := 'INSERT SUCCESSFUL';
        END IF;
        ELSE
         LC_STATUS := 'DUPLICATE USER NAME!';
        END IF;                  
            
    ELSIF PIC_OP_TYPE = 'UPDATE' THEN
        LN_ERR_NO := 30;
        IF PIC_IS_ACTIVE='Y' THEN 
            UPDATE USER_MASTER
               SET USER_NAME = PIC_USER_NAME,
                   EMAIL_ID = PIC_EMAIL_ID,
                   PASSWD=PIC_PASSWORD,
                   --USER_PASSWORD = PIC_USER_PASSWD,
                   IS_ACTIVE = PIC_IS_ACTIVE,
                   IS_LDAP_USER=PIC_IS_LDAP_USER
             WHERE USER_ID =PIN_USER_ID; 
        ELSE 
            UPDATE USER_MASTER 
               SET USER_NAME = PIC_USER_NAME,
                   EMAIL_ID = PIC_EMAIL_ID,
                   PASSWD=PIC_PASSWORD,
                   IS_ACTIVE = PIC_IS_ACTIVE,
                   IS_LDAP_USER=PIC_IS_LDAP_USER,
                   INACTIVE_DATE=SYSDATE
             WHERE USER_ID =PIN_USER_ID;
        END IF;
        IF PIC_IS_ACTIVE = 'N' THEN
            UPDATE USER_ROLES
               SET IS_ACTIVE = 'N',
                   INACTIVE_DATE=SYSDATE
             WHERE USER_ID = PIN_USER_ID;
        ELSE
            UPDATE USER_ROLES
                   SET IS_ACTIVE = 'Y',
                       INACTIVE_DATE=SYSDATE
                 WHERE USER_ID = PIN_USER_ID;
        END IF;
    LC_STATUS :='UPDATE SUCCESSFUL';
    ELSIF PIC_OP_TYPE = 'DELETE' THEN
        LN_ERR_NO := 40;
        DELETE FROM USER_MASTER
         WHERE USER_ID = PIN_USER_ID;
        LC_STATUS:='DELETE SUCCESSFUL';
    END IF;
        
    LN_ERR_NO := 50;
    COMMIT;
        
    LN_ERR_NO := 60;
    POC_STATUS := LC_STATUS;
        
    LN_ERR_NO := 70;

EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
    POC_STATUS := 'DUPLICATE USER NAME!';
    COMMON.LOG_ERROR('USER_MANAGEMENT', 'SAVE_USER', LN_ERR_NO, SQLCODE, SQLERRM);
    WHEN OTHERS THEN
    POC_STATUS := 'ERRORS';
    COMMON.LOG_ERROR('USER_MANAGEMENT', 'SAVE_USER', LN_ERR_NO, SQLCODE, SQLERRM);
END SAVE_USER;

PROCEDURE GET_USERS
    (
            PORC_USERS          OUT         COMMON.REF_CUR
    )
IS
LN_ERR_NO    NUMBER;
BEGIN
    LN_ERR_NO := 10;
    OPEN PORC_USERS FOR
      SELECT USER_ID, USER_NAME, 
             EMAIL_ID, 
             DECODE(IS_ACTIVE, 'Y', 'Active', 'InActive') IS_ACTIVE,
             IS_LDAP_USER,PASSWD,
             CREATED_DATE
        FROM USER_MASTER; 
        --WHERE IS_ACTIVE = 'Y';

    LN_ERR_NO := 20;
EXCEPTION
    WHEN OTHERS THEN
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_USERS', LN_ERR_NO, SQLCODE, SQLERRM);
END GET_USERS;

PROCEDURE GET_ACTIVE_USERS
    (
            PORC_USERS          OUT         COMMON.REF_CUR
    )
IS
LN_ERR_NO        NUMBER;
BEGIN
    LN_ERR_NO := 10;
    OPEN PORC_USERS FOR
        SELECT USER_ID, USER_NAME 
          FROM USER_MASTER 
         WHERE IS_ACTIVE = 'Y'
         ORDER BY USER_NAME;
    LN_ERR_NO := 20;
EXCEPTION
    WHEN OTHERS THEN
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_ACTIVE_USERS', LN_ERR_NO, SQLCODE, SQLERRM);
END GET_ACTIVE_USERS;

PROCEDURE SAVE_USER_ROLE
    (
        PIN_USER_ID                    IN            NUMBER,
        PIN_ROLE_ID                    IN            NUMBER,
        PIC_MODULE              IN          VARCHAR2,
        POC_STATUS                    OUT            VARCHAR2
    )
IS

LN_CNT                            NUMBER;
LN_ERR_NO                        NUMBER;

USER_ROLE_ALREADY_EXISTS        EXCEPTION;

BEGIN
    
    LN_ERR_NO := 10;
    SELECT COUNT(1) INTO LN_CNT
      FROM USER_ROLES
     WHERE USER_ID = PIN_USER_ID
       AND ROLE_ID = PIN_ROLE_ID
       AND MODULE = PIC_MODULE
       AND IS_ACTIVE = 'Y';
    
    LN_ERR_NO := 20;
    IF LN_CNT > 0 THEN
        RAISE USER_ROLE_ALREADY_EXISTS; 
    END IF;

    LN_ERR_NO := 30;
    INSERT INTO USER_ROLES 
        (UR_ID, USER_ID, ROLE_ID, 
            MODULE) 
    VALUES (UR_ID_SEQ.NEXTVAL, PIN_USER_ID, PIN_ROLE_ID,
            PIC_MODULE);
    
    LN_ERR_NO := 40;    
    COMMIT;
    
    LN_ERR_NO := 50;
    POC_STATUS := 'Success';

    LN_ERR_NO := 60;
EXCEPTION
WHEN USER_ROLE_ALREADY_EXISTS THEN
    ROLLBACK;
    POC_STATUS := 'User Role already exists';
    COMMON.LOG_ERROR('USER_MANAGEMENT', 'SAVE_USER_ROLE', LN_ERR_NO, '', 'User Role already exists');
WHEN OTHERS THEN
    ROLLBACK;
    POC_STATUS := 'Errors Occured';
    COMMON.LOG_ERROR('USER_MANAGEMENT', 'SAVE_USER_ROLE', LN_ERR_NO, SQLCODE, SQLERRM);
END;

PROCEDURE GET_ACTIVE_USER_ROLES
    (
        PORC_USER_ROLE_DETAILS         OUT         COMMON.REF_CUR
    )
IS
LN_ERR_NO        NUMBER;
BEGIN
    LN_ERR_NO := 10;
    OPEN PORC_USER_ROLE_DETAILS FOR
        SELECT UR.UR_ID, UM.USER_NAME, RM.ROLE_NAME, 
               UR.MODULE, DECODE(UR.IS_ACTIVE, 'Y', 'Active', 'InActive') IS_ACTIVE
          FROM USER_MASTER UM,
               USER_ROLES UR,
               ROLE_MASTER RM
         WHERE UM.USER_ID=UR.USER_ID
           AND UR.ROLE_ID=RM.ROLE_ID
           AND UR.IS_ACTIVE = 'Y';

    LN_ERR_NO := 20;
EXCEPTION
WHEN OTHERS THEN
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_USERS', LN_ERR_NO, SQLCODE, SQLERRM);
END;

PROCEDURE GET_USERNAMES_BY_APP_MOD
    (
        PIC_MODULE            IN        VARCHAR2,
        PIN_ROLE_ID                IN        NUMBER,
        PORC_RECORDS            OUT       SYS_REFCURSOR
    )
IS

LN_ERR_NO NUMBER;

BEGIN

    LN_ERR_NO :=10;
    OPEN PORC_RECORDS FOR 
    SELECT UR.UR_ID ,UM.USER_NAME 
     FROM  USER_ROLES UR 
            INNER JOIN USER_MASTER UM
              ON ( UM.USER_ID = UR.USER_ID )
     WHERE UPPER(UR.MODULE) = UPPER(PIC_MODULE)
       AND UR.ROLE_ID = PIN_ROLE_ID
       AND UR.IS_ACTIVE = 'Y'
     ORDER BY USER_NAME;

EXCEPTION
WHEN OTHERS THEN
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_USERNAME_BY_APP_MOD', LN_ERR_NO, SQLCODE, SQLERRM);
END GET_USERNAMES_BY_APP_MOD;

PROCEDURE DML_TEAM_USERS
    (
         PIC_MODULE                        IN         VARCHAR2,
         PIN_ANLST_UR_ID                IN         NUMBER,
         PIN_QUAL_ANLST_UR_ID            IN         NUMBER ,
         PIN_REV_ANLST_UR_ID            IN         NUMBER,
         POC_STATUS                        OUT        VARCHAR2                
     )
IS

LN_ERR_NO NUMBER;
LN_TOOL_MGR_URID   NUMBER;
LC_COUNT  NUMBER;
 
BEGIN
  LN_ERR_NO :=10;
  
 
--  LN_TOOL_MGR_URID :;
--  LN_PROJECT_MGR_URID :=0;
--  
BEGIN        
           LN_ERR_NO :=20;
           --Get Tool Manager UR_ID
               SELECT UR.UR_ID INTO LN_TOOL_MGR_URID
               FROM USER_ROLES UR,
                    USER_MASTER UM,
                    ROLE_MASTER RM
               WHERE  UR.USER_ID=UM.USER_ID
                AND   RM.ROLE_NAME='Tool Manager'
                AND  UR.MODULE = PIC_MODULE
                AND UR.ROLE_ID=RM.ROLE_ID
                AND UR.IS_ACTIVE='Y';
EXCEPTION
WHEN NO_DATA_FOUND THEN
COMMON.LOG_ERROR('USER_MANAGEMENT',' DML_TEAM_USERS',LN_ERR_NO,SQLCODE,SQLERRM);
END;                
                
              LN_ERR_NO :=40;
              INSERT INTO TEAM_USERS
              (TEAM_USER_ID, MODULE,
              TOOL_MGR_UR_ID,QUAL_ANLST_UR_ID, REV_ANLST_UR_ID,ANLST_UR_ID  
              ) 
              VALUES( TU_ID_SEQ.NEXTVAL, PIC_MODULE ,LN_TOOL_MGR_URID,
              PIN_QUAL_ANLST_UR_ID , PIN_REV_ANLST_UR_ID  ,PIN_ANLST_UR_ID
                         );
             POC_STATUS :='Insertion Success';
             LN_ERR_NO :=50;
   
                 
    COMMIT;
   
    
                 
 EXCEPTION
WHEN OTHERS THEN
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'DML_TEAM_USERS', LN_ERR_NO, SQLCODE, SQLERRM);
     POC_STATUS:='Duplicate Record ';
END DML_TEAM_USERS;  

PROCEDURE GET_TEAM_USERS
(
    PORC_RECORDS             OUT          SYS_REFCURSOR
)               
IS
LN_ERR_NO NUMBER;
BEGIN
    LN_ERR_NO :=10;
    OPEN PORC_RECORDS FOR
    SELECT MODULE, ANLST_NAME ANALYST_NAME, REV_ANLST_NAME REVEIWER_NAME,
    	   QUAL_ANLST_NAME QC_NAME, TEAM_USER_ID
      FROM TEAM_USER_DETAILS_V
     WHERE IS_ACTIVE = 'Y';

EXCEPTION
WHEN OTHERS THEN
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_TEAM_USERS', LN_ERR_NO, SQLCODE, SQLERRM);
END GET_TEAM_USERS;

PROCEDURE INACTIVATE_USER_ROLE
    (
        PIN_UR_ID                IN        NUMBER,
        POC_STATUS                OUT        VARCHAR2
    )
IS
LN_ERR_NO            NUMBER;
BEGIN
    LN_ERR_NO := 10;
    UPDATE USER_ROLES
       SET IS_ACTIVE = 'N',
           INACTIVE_DATE = SYSDATE
     WHERE UR_ID =PIN_UR_ID;
    LN_ERR_NO := 20;
    POC_STATUS := 'Success';
    
    LN_ERR_NO := 30;
    COMMIT;
    
    LN_ERR_NO := 40;
EXCEPTION
WHEN OTHERS THEN
     ROLLBACK;
     POC_STATUS := 'ERRORS';
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'INACTIVATE_USER_ROLE', LN_ERR_NO, SQLCODE, SQLERRM);
END;

PROCEDURE INACTIVATE_TEAM_USERS
    (
        PIN_TEAM_USER_ID                IN        NUMBER,
        POC_STATUS                OUT        VARCHAR2
    )
IS
LN_ERR_NO            NUMBER;
BEGIN
    LN_ERR_NO := 10;
    UPDATE TEAM_USERS
       SET IS_ACTIVE = 'N',
           END_DATE = SYSDATE
     WHERE TEAM_USER_ID =PIN_TEAM_USER_ID;

    LN_ERR_NO := 20;
    POC_STATUS := 'Success';
    
    LN_ERR_NO := 30;
    COMMIT;
    
    LN_ERR_NO := 40;
EXCEPTION
WHEN OTHERS THEN
     ROLLBACK;
     POC_STATUS := 'ERRORS';
     COMMON.LOG_ERROR('USER_MANAGEMENT', 'INACTIVATE_TEAM_USERS', LN_ERR_NO, SQLCODE, SQLERRM);
END;


--PROCEDURE GET_APP_MODULE_USERS
--    (
--        PIC_APPLICATION            IN      VARCHAR2,
--        PIC_MODULE                IN      VARCHAR2,
--        PORC_USERS                OUT        COMMON.REF_CUR
--    )
--IS
--LN_ERR_NO            NUMBER;
--BEGIN

--    LN_ERR_NO := 10;
--    OPEN PORC_USERS FOR
--        SELECT *
--          FROM USER_ROLE_DETAILS
--         WHERE IS_ACTIVE = 'Y';
--           --AND MODULE = PIC_MODULE;

--    LN_ERR_NO := 20;

--EXCEPTION
--WHEN OTHERS THEN
--     COMMON.LOG_ERROR('USER_MANAGEMENT', 'INACTIVATE_USER_ROLE', LN_ERR_NO, SQLCODE, SQLERRM);
--END;
--    
--PROCEDURE CHECK_TOOLMANAGER_ISEXIST
--(
--       PIC_APPLICATION     IN   VARCHAR2,
--       PIC_MODULE          IN   VARCHAR2,
--       PORC_RESULTS        OUT  COMMON.REF_CUR
--)
--IS
--LN_ERR_NO   NUMBER;


--BEGIN

--            OPEN PORC_RESULTS FOR
--           SELECT UR.UR_ID
--       FROM USER_ROLES UR,
--            USER_MASTER UM,
--            ROLE_MASTER RM
--      WHERE UR.IS_ACTIVE = 'Y'
--        AND UR.USER_ID=UM.USER_ID
--        AND RM.ROLE_NAME='Tool Manager'
--        AND UR.APPLICATION=PIC_APPLICATION
--        AND UR.MODULE=PIC_MODULE
--        AND UR.ROLE_ID=RM.ROLE_ID;
--       
--        

--EXCEPTION
--WHEN OTHERS THEN
--     COMMON.LOG_ERROR('USER_MANAGEMENT', 'CHECK_TOOLMANAGER_ISEXIST', LN_ERR_NO, SQLCODE, SQLERRM);
--     
--END;
--PROCEDURE GET_USER_CREDENTIALS
--(
--       PIC_USER_NAME   IN  VARCHAR2,
--       PIC_PASSWORD    IN  VARCHAR2,
--       PORC_RESULTS    OUT COMMON.REF_CUR
--)
--IS
--LN_ERR_NO    NUMBER;

--BEGIN

--    
--    OPEN PORC_RESULTS FOR
--    
--       SELECT * 
--       FROM USER_MASTER
--       WHERE USER_NAME=PIC_USER_NAME
--       AND   PASSWD=PIC_PASSWORD; 
--       





--EXCEPTION
--WHEN OTHERS THEN
--     COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_USER_CREDENTIALS', LN_ERR_NO, SQLCODE, SQLERRM);
--     
--END;
--PROCEDURE GET_ANALYSTNAMES_BY_APP_MOD
--    (
--            PIC_APPLICATION         IN          VARCHAR2,
--            PIC_MODULE              IN          VARCHAR2,
--            PORC_RECORDS            OUT         SYS_REFCURSOR
--    )
--    IS
--LN_ERR_NO NUMBER;
--BEGIN
--    LN_ERR_NO :=10;
--    OPEN PORC_RECORDS FOR 
--        SELECT UR.UR_ID ,UM.USER_NAME 
--            FROM  USER_ROLES UR
--                        INNER JOIN
--                        USER_MASTER UM
--                 ON ( UM.USER_ID = UR.USER_ID )
--           WHERE   UPPER(UR.APPLICATION) = PIC_APPLICATION
--             AND      UPPER(UR.MODULE) = PIC_MODULE
--             AND      UR.ROLE_ID=6
--             AND      UR.IS_ACTIVE = 'Y'
--             AND NOT  EXISTS 
--            (
--             
--             SELECT USER_NAME FROM TEAM_USERS TU
--             WHERE APPLICATION = PIC_APPLICATION
--             AND   MODULE = PIC_MODULE
--             AND  UR.UR_ID = TU.ANLST_UR_ID
--            )
--             ORDER BY USER_NAME;
--EXCEPTION
--WHEN OTHERS THEN
--     COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_ANALYSTNAMES_BY_APP_MOD', LN_ERR_NO, SQLCODE, SQLERRM);
--END;
--PROCEDURE GET_QCDETAILS_ON_REVIEWER
--(
--            PIC_APPLICATION         IN          VARCHAR2,
--            PIC_MODULE              IN          VARCHAR2,
--            PIN_REVIEWER_URID            IN          NUMBER,
--            PORC_RECORDS            OUT         SYS_REFCURSOR
--)
--IS
--LN_ERR_NO NUMBER;
--BEGIN
--    LN_ERR_NO :=10;
--    OPEN PORC_RECORDS FOR 
--        
--      SELECT  DISTINCT QUAL_ANLST_UR_ID
--      FROM  USER_ROLES UR
--      INNER JOIN
--      USER_MASTER UM
--      ON ( UM.USER_ID = UR.USER_ID )
--           INNER JOIN
--           TEAM_USERS TU
--           ON (TU.REV_ANLST_UR_ID = UR.UR_ID AND TU.REV_ANLST_UR_ID = PIN_REVIEWER_URID)
--           WHERE   UPPER(UR.APPLICATION) = PIC_APPLICATION   
--             AND      UPPER(UR.MODULE) = PIC_MODULE
--             AND      UR.IS_ACTIVE = 'Y';
--    
--    
--    
--    
--    
--EXCEPTION
--WHEN OTHERS THEN
--     COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_QCDETAILS_ON_REVIEWER', LN_ERR_NO, SQLCODE, SQLERRM);
--END;
--PROCEDURE CHECK_MANAGER_ISEXIST
--(
--       PIC_APPLICATION     IN   VARCHAR2,
--       PIC_MODULE          IN   VARCHAR2,
--       POC_STATUS          OUT  VARCHAR2
--)
--IS
--LN_ERR_NO   NUMBER;
--LN_TOOL_MANAGER_URID   NUMBER;
--LN_PROJECT_URID        NUMBER;

--BEGIN
--       
--       BEGIN
--            
--       SELECT UR.UR_ID INTO LN_TOOL_MANAGER_URID
--       FROM USER_ROLES UR,
--            USER_MASTER UM,
--            ROLE_MASTER RM
--       WHERE  UR.USER_ID=UM.USER_ID
--        AND   RM.ROLE_NAME='Tool Manager'
--        AND  UR.APPLICATION=PIC_APPLICATION
--        AND  UR.MODULE=PIC_MODULE
--        AND UR.ROLE_ID=RM.ROLE_ID;
--        
--        EXCEPTION
--         WHEN NO_DATA_FOUND THEN
--         LN_TOOL_MANAGER_URID:=NULL;
--       END;
--       
--       
--       BEGIN
--        
--        SELECT UR.UR_ID INTO LN_PROJECT_URID
--       FROM USER_ROLES UR,
--            USER_MASTER UM,
--            ROLE_MASTER RM
--       WHERE  UR.USER_ID=UM.USER_ID
--        AND   RM.ROLE_NAME='Project Manager'
--        AND  UR.APPLICATION=PIC_APPLICATION
--        AND  UR.MODULE=PIC_MODULE
--        AND UR.ROLE_ID=RM.ROLE_ID;
--        
--        EXCEPTION
--            WHEN NO_DATA_FOUND THEN
--            LN_PROJECT_URID:=NULL;
--        END;
--        
--        IF LN_TOOL_MANAGER_URID > 0 THEN
--        
--           POC_STATUS := 'TOOL MANAGER EXISTS';
--           ELSE IF LN_PROJECT_URID > 0 THEN
--        
--             POC_STATUS := 'PROJECT MANAGER EXISTS';
--             ELSE
--             POC_STATUS :='NOT EXISTS';
--             END IF;
--       END IF;
--         


--EXCEPTION
--WHEN OTHERS THEN
--     COMMON.LOG_ERROR('USER_MANAGEMENT', 'CHECK_TOOLMANAGER_ISEXIST', LN_ERR_NO, SQLCODE, SQLERRM);
--END ;  

--PROCEDURE GET_ACTIVE_USERS_BY_APP
--    (
--        PIC_APPLICATION     IN      VARCHAR2,
--        PORC_ACTIVE_USERS   OUT     SYS_REFCURSOR
--    )
--IS
--LN_ERR_NO   NUMBER;
--BEGIN
--    LN_ERR_NO:=10;
--    
--    OPEN PORC_ACTIVE_USERS FOR 
--        SELECT UM.USER_NAME, UM.EMAIL_ID 
--        FROM USER_ROLES UR,
--             USER_MASTER UM
--        WHERE UR.APPLICATION = PIC_APPLICATION
--         AND  UR.USER_ID = UM.USER_ID
--         AND  UM.IS_ACTIVE = 'Y'
--        AND  IS_LDAP_USER = 'Y';
--        
--    LN_ERR_NO:=20;
--            
--EXCEPTION
--WHEN OTHERS THEN
--     COMMON.LOG_ERROR('USER_MANAGEMENT', 'GET_ACTIVE_USERS_BY_APP', LN_ERR_NO, SQLCODE, SQLERRM);
--END GET_ACTIVE_USERS_BY_APP;       
-- 

  
END USER_MANAGEMENT_NEW;
/



